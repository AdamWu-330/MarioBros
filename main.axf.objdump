
D:/ECE243_Labs/Mario_Bro/MarioBros/main.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	5c 02 00 00 60 02 00 00 64 02 00 00 68 02 00 00     \...`...d...h...
  30:	6c 02 00 00 dc 32 00 00 d0 05 00 00 70 02 00 00     l....2......p...

Disassembly of section .text:

00000040 <__cs3_reset_generic>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
      d4:	eb000c67 	bl	3278 <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	000033c4 	.word	0x000033c4

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
     120:	00180230 	.word	0x00180230

00000124 <__cs3_heap_start_ptr>:
     124:	00180278 	.word	0x00180278

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
     16c:	00180238 	.word	0x00180238
     170:	0018023b 	.word	0x0018023b
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
     1b8:	00180238 	.word	0x00180238
     1bc:	00180238 	.word	0x00180238
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	00180238 	.word	0x00180238
     200:	00000000 	.word	0x00000000
     204:	00003368 	.word	0x00003368

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	00003368 	.word	0x00003368
     250:	0018023c 	.word	0x0018023c
     254:	000033c8 	.word	0x000033c8
     258:	00000000 	.word	0x00000000

0000025c <__cs3_reset>:
	return;
} 

// Define the remaining exception handlers
void __attribute__ ((interrupt)) __cs3_reset (void)
{
     25c:	eafffffe 	b	25c <__cs3_reset>

00000260 <__cs3_isr_undef>:
    while(1);
}

void __attribute__ ((interrupt)) __cs3_isr_undef (void)
{
     260:	eafffffe 	b	260 <__cs3_isr_undef>

00000264 <__cs3_isr_swi>:
    while(1);
}

void __attribute__ ((interrupt)) __cs3_isr_swi (void)
{
     264:	eafffffe 	b	264 <__cs3_isr_swi>

00000268 <__cs3_isr_pabort>:
    while(1);
}

void __attribute__ ((interrupt)) __cs3_isr_pabort (void)
{
     268:	eafffffe 	b	268 <__cs3_isr_pabort>

0000026c <__cs3_isr_dabort>:
    while(1);
}

void __attribute__ ((interrupt)) __cs3_isr_dabort (void)
{
     26c:	eafffffe 	b	26c <__cs3_isr_dabort>

00000270 <__cs3_isr_fiq>:
    while(1);
}

void __attribute__ ((interrupt)) __cs3_isr_fiq (void)
{
     270:	eafffffe 	b	270 <__cs3_isr_fiq>

00000274 <disable_A9_interrupts>:
 * Turn off interrupts in the ARM processor
*/
void disable_A9_interrupts(void)
{
	int status = 0b11010011;
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
     274:	e3a030d3 	mov	r3, #211	; 0xd3
     278:	e129f003 	msr	CPSR_fc, r3
     27c:	e12fff1e 	bx	lr

00000280 <set_A9_IRQ_stack>:
{
	int stack, mode;
	stack = A9_ONCHIP_END - 7;		// top of A9 onchip memory, aligned to 8 bytes
	/* change processor to IRQ mode with interrupts disabled */
	mode = INT_DISABLE | IRQ_MODE;
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
     280:	e3a030d2 	mov	r3, #210	; 0xd2
     284:	e129f003 	msr	CPSR_fc, r3
	/* set banked stack pointer */
	asm("mov sp, %[ps]" : : [ps] "r" (stack));
     288:	e3e03007 	mvn	r3, #7
     28c:	e1a0d003 	mov	sp, r3

	/* go back to SVC mode before executing subroutine return! */
	mode = INT_DISABLE | SVC_MODE;
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
     290:	e3a030d3 	mov	r3, #211	; 0xd3
     294:	e129f003 	msr	CPSR_fc, r3
     298:	e12fff1e 	bx	lr

0000029c <enable_A9_interrupts>:
 * Turn on interrupts in the ARM processor
*/
void enable_A9_interrupts(void)
{
	int status = SVC_MODE | INT_ENABLE;
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
     29c:	e3a03053 	mov	r3, #83	; 0x53
     2a0:	e129f003 	msr	CPSR_fc, r3
     2a4:	e12fff1e 	bx	lr

000002a8 <config_interrupt>:
 * We configure only the Interrupt Set Enable Registers (ICDISERn) and Interrupt 
 * Processor Target Registers (ICDIPTRn). The default (reset) values are used for 
 * other registers in the GIC
*/
void config_interrupt (int N, int CPU_target)
{
     2a8:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
	int reg_offset, index, value, address;
    
	/* Configure the Interrupt Set-Enable Registers (ICDISERn). 
	 * reg_offset = (integer_div(N / 32) * 4
	 * value = 1 << (N mod 32) */
	reg_offset = (N >> 3) & 0xFFFFFFFC; 
     2ac:	e1a031c0 	asr	r3, r0, #3
     2b0:	e3c33003 	bic	r3, r3, #3
	index = N & 0x1F;
	value = 0x1 << index;
	address = MPCORE_GIC_DIST + ICDISER + reg_offset;
     2b4:	e2433b4b 	sub	r3, r3, #76800	; 0x12c00
    
	/* Configure the Interrupt Set-Enable Registers (ICDISERn). 
	 * reg_offset = (integer_div(N / 32) * 4
	 * value = 1 << (N mod 32) */
	reg_offset = (N >> 3) & 0xFFFFFFFC; 
	index = N & 0x1F;
     2b8:	e200201f 	and	r2, r0, #31
	value = 0x1 << index;
	address = MPCORE_GIC_DIST + ICDISER + reg_offset;
	/* Now that we know the register address and value, set the appropriate bit */
   *(int *)address |= value;
     2bc:	e513c300 	ldr	r12, [r3, #-768]	; 0xfffffd00
     2c0:	e3a04001 	mov	r4, #1
     2c4:	e18c2214 	orr	r2, r12, r4, lsl r2
     2c8:	e5032300 	str	r2, [r3, #-768]	; 0xfffffd00
	 * index = N mod 4 */
	reg_offset = (N & 0xFFFFFFFC);
	index = N & 0x3;
	address = MPCORE_GIC_DIST + ICDIPTR + reg_offset + index;
	/* Now that we know the register address and value, write to (only) the appropriate byte */
	*(char *)address = (char) CPU_target;
     2cc:	e2400b4a 	sub	r0, r0, #75776	; 0x12800
     2d0:	e5c01000 	strb	r1, [r0]
}
     2d4:	e8bd0010 	ldmfd	sp!, {r4}
     2d8:	e12fff1e 	bx	lr

000002dc <config_GIC>:

/* 
 * Configure the Generic Interrupt Controller (GIC)
*/
void config_GIC(void)
{
     2dc:	e92d4008 	push	{r3, lr}
	int address;
  	config_interrupt (KEYS_IRQ, CPU0); 	// configure the FPGA KEYs interrupt
     2e0:	e3a00049 	mov	r0, #73	; 0x49
     2e4:	e3a01001 	mov	r1, #1
     2e8:	ebffffee 	bl	2a8 <config_interrupt>
	config_interrupt (PS2_IRQ, CPU0);  
     2ec:	e3a0004f 	mov	r0, #79	; 0x4f
     2f0:	e3a01001 	mov	r1, #1
     2f4:	ebffffeb 	bl	2a8 <config_interrupt>
    
  	// Set Interrupt Priority Mask Register (ICCPMR). Enable interrupts of all priorities 
	address = MPCORE_GIC_CPUIF + ICCPMR;
  	*(int *) address = 0xFFFF;       
     2f8:	e3e02a13 	mvn	r2, #77824	; 0x13000
     2fc:	e30f3fff 	movw	r3, #65535	; 0xffff
     300:	e5023efb 	str	r3, [r2, #-3835]	; 0xfffff105

  	// Set CPU Interface Control Register (ICCICR). Enable signaling of interrupts
	address = MPCORE_GIC_CPUIF + ICCICR;
  	*(int *) address = 1;       
     304:	e3a03001 	mov	r3, #1
     308:	e5023eff 	str	r3, [r2, #-3839]	; 0xfffff101

	// Configure the Distributor Control Register (ICDDCR) to send pending interrupts to CPUs 
	address = MPCORE_GIC_DIST + ICDDCR;
  	*(int *) address = 1;          
     30c:	e3e02a12 	mvn	r2, #73728	; 0x12000
     310:	e5023fff 	str	r3, [r2, #-4095]	; 0xfffff001
     314:	e8bd8008 	pop	{r3, pc}

00000318 <config_KEYs>:
/* setup the KEY interrupts in the FPGA */
void config_KEYs()
{
	volatile int * KEY_ptr = (int *) KEY_BASE;	// pushbutton KEY base address

	*(KEY_ptr + 2) = 0xF; 	// enable interrupts for the two KEYs
     318:	e3a03000 	mov	r3, #0
     31c:	e34f3f20 	movt	r3, #65312	; 0xff20
     320:	e3a0200f 	mov	r2, #15
     324:	e5832058 	str	r2, [r3, #88]	; 0x58
     328:	e12fff1e 	bx	lr

0000032c <config_PS2>:

/* setup the PS/2 interrupts */
void config_PS2() {
    volatile int * PS2_ptr = (int *)PS2_BASE; // PS/2 port address

    *(PS2_ptr) = 0xFF; /* reset */
     32c:	e3a03000 	mov	r3, #0
     330:	e34f3f20 	movt	r3, #65312	; 0xff20
     334:	e3a020ff 	mov	r2, #255	; 0xff
     338:	e5832100 	str	r2, [r3, #256]	; 0x100
    *(PS2_ptr + 1) =
     33c:	e3a02001 	mov	r2, #1
     340:	e5832104 	str	r2, [r3, #260]	; 0x104
     344:	e12fff1e 	bx	lr

00000348 <pushbutton_ISR>:
{
	volatile int * KEY_ptr = (int *) KEY_BASE;
	volatile int * LED_ptr = (int *) LED_BASE;
	int press, LED_bits;

	press = *(KEY_ptr + 3);					// read the pushbutton interrupt register
     348:	e3a02000 	mov	r2, #0
     34c:	e34f2f20 	movt	r2, #65312	; 0xff20
     350:	e592305c 	ldr	r3, [r2, #92]	; 0x5c
	*(KEY_ptr + 3) = press;					// Clear the interrupt
     354:	e582305c 	str	r3, [r2, #92]	; 0x5c
    
	if (press & 0x1){							// KEY0
     358:	e3130001 	tst	r3, #1
     35c:	0a000004 	beq	374 <pushbutton_ISR+0x2c>
        mario_move_forward = true;
     360:	e3003254 	movw	r3, #596	; 0x254
     364:	e3403018 	movt	r3, #24
     368:	e3a01001 	mov	r1, #1
     36c:	e5c31000 	strb	r1, [r3]
     370:	ea000010 	b	3b8 <pushbutton_ISR+0x70>
        LED_bits = 0b1;
    }else if (press & 0x2){					// KEY1
     374:	e3130002 	tst	r3, #2
     378:	0a000005 	beq	394 <pushbutton_ISR+0x4c>
        mario_move_backward = true;
     37c:	e3003254 	movw	r3, #596	; 0x254
     380:	e3403018 	movt	r3, #24
     384:	e3a02001 	mov	r2, #1
     388:	e5c32001 	strb	r2, [r3, #1]
        LED_bits = 0b10;
     38c:	e3a01002 	mov	r1, #2
     390:	ea000008 	b	3b8 <pushbutton_ISR+0x70>
    }else if (press & 0x4){
     394:	e3130004 	tst	r3, #4
        LED_bits = 0b100;
     398:	13a01004 	movne	r1, #4
        mario_move_forward = true;
        LED_bits = 0b1;
    }else if (press & 0x2){					// KEY1
        mario_move_backward = true;
        LED_bits = 0b10;
    }else if (press & 0x4){
     39c:	1a000005 	bne	3b8 <pushbutton_ISR+0x70>
        LED_bits = 0b100;
    }else if (press & 0x8){
     3a0:	e3130008 	tst	r3, #8
        mario_jump = true;
     3a4:	13003254 	movwne	r3, #596	; 0x254
     3a8:	13403018 	movtne	r3, #24
     3ac:	13a02001 	movne	r2, #1
     3b0:	15c32002 	strbne	r2, [r3, #2]
        LED_bits = 0b1000;
     3b4:	13a01008 	movne	r1, #8
    }

	*LED_ptr = LED_bits;
     3b8:	e3a03000 	mov	r3, #0
     3bc:	e34f3f20 	movt	r3, #65312	; 0xff20
     3c0:	e5831000 	str	r1, [r3]
     3c4:	e12fff1e 	bx	lr

000003c8 <reset>:
		}
	}
	return;
}

void reset(){
     3c8:	e92d0030 	push	{r4, r5}
	//which map 
	map_num = 1;
     3cc:	e30333d0 	movw	r3, #13264	; 0x33d0
     3d0:	e3403000 	movt	r3, #0
     3d4:	e3a0c001 	mov	r12, #1
     3d8:	e583c000 	str	r12, [r3]

	//Mario's position
	mario_x = 10;
     3dc:	e3a0200a 	mov	r2, #10
     3e0:	e5832004 	str	r2, [r3, #4]
	mario_y = LOWEST_Y - 25;
     3e4:	e3a020b1 	mov	r2, #177	; 0xb1
     3e8:	e5832008 	str	r2, [r3, #8]

	//up to three bad mushrooms
	isBadMushroom[0] = true;
     3ec:	e5c3c00c 	strb	r12, [r3, #12]
	isBadMushroom[1] = true;
     3f0:	e5c3c00d 	strb	r12, [r3, #13]
	isBadMushroom[2] = false;
     3f4:	e3a01000 	mov	r1, #0
     3f8:	e5c3100e 	strb	r1, [r3, #14]
	badMushroom_x[0] = 179;
     3fc:	e3a020b3 	mov	r2, #179	; 0xb3
     400:	e5832010 	str	r2, [r3, #16]
	badMushroom_x[1] = 152 - 19;
     404:	e3a02085 	mov	r2, #133	; 0x85
     408:	e5832014 	str	r2, [r3, #20]
	badMushroom_x[2] = OUT_SCREEN;
     40c:	e3e00031 	mvn	r0, #49	; 0x31
     410:	e5830018 	str	r0, [r3, #24]
	badMushroom_y[0] = LOWEST_Y - 19;
     414:	e3a020b7 	mov	r2, #183	; 0xb7
     418:	e583201c 	str	r2, [r3, #28]
	badMushroom_y[1] = 131 - 19;
     41c:	e3a04070 	mov	r4, #112	; 0x70
     420:	e5834020 	str	r4, [r3, #32]
	badMushroom_y[2] = OUT_SCREEN;
     424:	e5830024 	str	r0, [r3, #36]	; 0x24
	isBadMushroomMovingRight[0] = false;
     428:	e3002254 	movw	r2, #596	; 0x254
     42c:	e3402018 	movt	r2, #24
     430:	e5c21004 	strb	r1, [r2, #4]
	isBadMushroomMovingRight[1] = false;
     434:	e5c21005 	strb	r1, [r2, #5]
	isBadMushroomMovingRight[2] = false;
     438:	e5c21006 	strb	r1, [r2, #6]

	//up to three moneys
	isMoney[0] = false;
     43c:	e5c21008 	strb	r1, [r2, #8]
	isMoney[1] = false;
     440:	e5c21009 	strb	r1, [r2, #9]
	isMoney[2] = false;
     444:	e5c2100a 	strb	r1, [r2, #10]
	money_x[0] = 67;
     448:	e3a05043 	mov	r5, #67	; 0x43
     44c:	e5835028 	str	r5, [r3, #40]	; 0x28
	money_x[1] = OUT_SCREEN;
     450:	e583002c 	str	r0, [r3, #44]	; 0x2c
	money_x[2] = OUT_SCREEN;
     454:	e5830030 	str	r0, [r3, #48]	; 0x30
	money_y[0] = 112;
     458:	e5834034 	str	r4, [r3, #52]	; 0x34
	money_y[1] = OUT_SCREEN;
     45c:	e5830038 	str	r0, [r3, #56]	; 0x38
	money_y[2] = OUT_SCREEN;
     460:	e583003c 	str	r0, [r3, #60]	; 0x3c

	//Good mushroom
	isGoodMushroom = false;
     464:	e5c2100b 	strb	r1, [r2, #11]
	goodMushroom_x = 118;
     468:	e3a00076 	mov	r0, #118	; 0x76
     46c:	e5830040 	str	r0, [r3, #64]	; 0x40
	goodMushroom_y = 112;
     470:	e5834044 	str	r4, [r3, #68]	; 0x44

	//turtle
	isTurtle = false;
     474:	e5c2100c 	strb	r1, [r2, #12]
	isTurtleMovingRight = true;
     478:	e5c3c048 	strb	r12, [r3, #72]	; 0x48
	turtle_x = 43;
     47c:	e3a0002b 	mov	r0, #43	; 0x2b
     480:	e583004c 	str	r0, [r3, #76]	; 0x4c
	turtle_y = 93 - 28;
     484:	e3a00041 	mov	r0, #65	; 0x41
     488:	e5830050 	str	r0, [r3, #80]	; 0x50

	byte1 = 0;
     48c:	e5c2100d 	strb	r1, [r2, #13]
	byte2 = 0;
     490:	e5c2100e 	strb	r1, [r2, #14]
	byte3 = 0; // PS/2 variables
     494:	e5c2100f 	strb	r1, [r2, #15]

	isWin = false;
     498:	e5c21010 	strb	r1, [r2, #16]
	isGameOver = false;
     49c:	e5c21011 	strb	r1, [r2, #17]
     4a0:	e8bd0030 	pop	{r4, r5}
     4a4:	e12fff1e 	bx	lr

000004a8 <PS2_ISR>:
	*LED_ptr = LED_bits;
	return;
}

void PS2_ISR( void )
{
     4a8:	e92d4008 	push	{r3, lr}
  	volatile int * PS2_ptr = (int *) 0xFF200100;		// PS/2 port address
	int PS2_data, RAVAIL;

	PS2_data = *(PS2_ptr);									// read the Data register in the PS/2 port
     4ac:	e3a03000 	mov	r3, #0
     4b0:	e34f3f20 	movt	r3, #65312	; 0xff20
     4b4:	e5932100 	ldr	r2, [r3, #256]	; 0x100
	RAVAIL = (PS2_data & 0xFFFF0000) >> 16;			// extract the RAVAIL field
	if (RAVAIL > 0)
     4b8:	e1b03822 	lsrs	r3, r2, #16
     4bc:	08bd8008 	popeq	{r3, pc}
	{
		/* always save the last three bytes received */
		byte1 = byte2;
     4c0:	e3003254 	movw	r3, #596	; 0x254
     4c4:	e3403018 	movt	r3, #24
     4c8:	e5d3100e 	ldrb	r1, [r3, #14]
     4cc:	e5c3100d 	strb	r1, [r3, #13]
		byte2 = byte3;
     4d0:	e5d3100f 	ldrb	r1, [r3, #15]
     4d4:	e5c3100e 	strb	r1, [r3, #14]
		byte3 = PS2_data & 0xFF;
     4d8:	e6ef2072 	uxtb	r2, r2
     4dc:	e5c3200f 	strb	r2, [r3, #15]
		if ( (byte2 == (char) 0xE0) && (byte3 == (char) 0x6B) ) //left arrow
     4e0:	e5d3300e 	ldrb	r3, [r3, #14]
     4e4:	e35300e0 	cmp	r3, #224	; 0xe0
     4e8:	1a000009 	bne	514 <PS2_ISR+0x6c>
     4ec:	e3003254 	movw	r3, #596	; 0x254
     4f0:	e3403018 	movt	r3, #24
     4f4:	e5d3300f 	ldrb	r3, [r3, #15]
     4f8:	e353006b 	cmp	r3, #107	; 0x6b
     4fc:	1a000004 	bne	514 <PS2_ISR+0x6c>
			mario_move_backward = true;
     500:	e3003254 	movw	r3, #596	; 0x254
     504:	e3403018 	movt	r3, #24
     508:	e3a02001 	mov	r2, #1
     50c:	e5c32001 	strb	r2, [r3, #1]
     510:	e8bd8008 	pop	{r3, pc}
		else if ( (byte2 == (char) 0xE0) && (byte3 == (char) 0x74) ) //right arrow
     514:	e3003254 	movw	r3, #596	; 0x254
     518:	e3403018 	movt	r3, #24
     51c:	e5d3300e 	ldrb	r3, [r3, #14]
     520:	e35300e0 	cmp	r3, #224	; 0xe0
     524:	1a000009 	bne	550 <PS2_ISR+0xa8>
     528:	e3003254 	movw	r3, #596	; 0x254
     52c:	e3403018 	movt	r3, #24
     530:	e5d3300f 	ldrb	r3, [r3, #15]
     534:	e3530074 	cmp	r3, #116	; 0x74
     538:	1a000004 	bne	550 <PS2_ISR+0xa8>
			mario_move_forward = true;
     53c:	e3003254 	movw	r3, #596	; 0x254
     540:	e3403018 	movt	r3, #24
     544:	e3a02001 	mov	r2, #1
     548:	e5c32000 	strb	r2, [r3]
     54c:	e8bd8008 	pop	{r3, pc}
		else if (byte3 == (char) 0x29) //space bar
     550:	e3003254 	movw	r3, #596	; 0x254
     554:	e3403018 	movt	r3, #24
     558:	e5d3300f 	ldrb	r3, [r3, #15]
     55c:	e3530029 	cmp	r3, #41	; 0x29
     560:	1a000004 	bne	578 <PS2_ISR+0xd0>
			mario_jump = true;
     564:	e3003254 	movw	r3, #596	; 0x254
     568:	e3403018 	movt	r3, #24
     56c:	e3a02001 	mov	r2, #1
     570:	e5c32002 	strb	r2, [r3, #2]
     574:	e8bd8008 	pop	{r3, pc}
		else if ( (byte2 == (char) 0xE0) && (byte3 == (char) 0x5A) && (isWin || isGameOver)){
     578:	e3003254 	movw	r3, #596	; 0x254
     57c:	e3403018 	movt	r3, #24
     580:	e5d3300e 	ldrb	r3, [r3, #14]
     584:	e35300e0 	cmp	r3, #224	; 0xe0
     588:	18bd8008 	popne	{r3, pc}
     58c:	e3003254 	movw	r3, #596	; 0x254
     590:	e3403018 	movt	r3, #24
     594:	e5d3300f 	ldrb	r3, [r3, #15]
     598:	e353005a 	cmp	r3, #90	; 0x5a
     59c:	18bd8008 	popne	{r3, pc}
     5a0:	e3003254 	movw	r3, #596	; 0x254
     5a4:	e3403018 	movt	r3, #24
     5a8:	e5d33010 	ldrb	r3, [r3, #16]
     5ac:	e3530000 	cmp	r3, #0
     5b0:	1a000004 	bne	5c8 <PS2_ISR+0x120>
     5b4:	e3003254 	movw	r3, #596	; 0x254
     5b8:	e3403018 	movt	r3, #24
     5bc:	e5d33011 	ldrb	r3, [r3, #17]
     5c0:	e3530000 	cmp	r3, #0
     5c4:	08bd8008 	popeq	{r3, pc}
			reset();
     5c8:	ebffff7e 	bl	3c8 <reset>
     5cc:	e8bd8008 	pop	{r3, pc}

000005d0 <__cs3_isr_irq>:
void PS2_ISR( void );
void reset();

// Define the IRQ exception handler
void __attribute__ ((interrupt)) __cs3_isr_irq (void)
{
     5d0:	e24ee004 	sub	lr, lr, #4
     5d4:	e92d503f 	push	{r0, r1, r2, r3, r4, r5, r12, lr}
	// Read the ICCIAR from the CPU interface in the GIC
	int address;
	int interrupt_ID;
	
	address = MPCORE_GIC_CPUIF + ICCIAR;
	interrupt_ID = *(int *)address;
     5d8:	e3e03a13 	mvn	r3, #77824	; 0x13000
     5dc:	e5134ef3 	ldr	r4, [r3, #-3827]	; 0xfffff10d
   
	if (interrupt_ID == KEYS_IRQ)		// check if interrupt is from the KEYs
     5e0:	e3540049 	cmp	r4, #73	; 0x49
     5e4:	1a000001 	bne	5f0 <__cs3_isr_irq+0x20>
		pushbutton_ISR ();
     5e8:	ebffff56 	bl	348 <pushbutton_ISR>
     5ec:	ea000004 	b	604 <__cs3_isr_irq+0x34>
	else if (interrupt_ID == PS2_IRQ)				// check if interrupt is from the PS/2
     5f0:	e354004f 	cmp	r4, #79	; 0x4f
     5f4:	1a000001 	bne	600 <__cs3_isr_irq+0x30>
		PS2_ISR ();
     5f8:	ebffffaa 	bl	4a8 <PS2_ISR>
     5fc:	ea000000 	b	604 <__cs3_isr_irq+0x34>
     600:	eafffffe 	b	600 <__cs3_isr_irq+0x30>
	else
		while (1);							// if unexpected, then stay here

	// Write to the End of Interrupt Register (ICCEOIR)
	address = MPCORE_GIC_CPUIF + ICCEOIR;
	*(int *)address = interrupt_ID;
     604:	e3e03a13 	mvn	r3, #77824	; 0x13000
     608:	e5034eef 	str	r4, [r3, #-3823]	; 0xfffff111
     60c:	e8fd903f 	ldm	sp!, {r0, r1, r2, r3, r4, r5, r12, pc}^

00000610 <reset_characters>:
}

void reset_characters(){
    for (int i = 0; i < 3; i++)
    {
        isMoney[i] = false;
     610:	e3003254 	movw	r3, #596	; 0x254
     614:	e3403018 	movt	r3, #24
     618:	e3a02000 	mov	r2, #0
     61c:	e5c32008 	strb	r2, [r3, #8]
     620:	e5c32009 	strb	r2, [r3, #9]
     624:	e5c3200a 	strb	r2, [r3, #10]
    }

    if (map_num == 2){
     628:	e30333d0 	movw	r3, #13264	; 0x33d0
     62c:	e3403000 	movt	r3, #0
     630:	e5933000 	ldr	r3, [r3]
     634:	e3530002 	cmp	r3, #2
     638:	1a00001c 	bne	6b0 <reset_characters+0xa0>
        for (int i = 0; i < 3; i++)
        {
            isBadMushroom[i] = true;
     63c:	e30333d0 	movw	r3, #13264	; 0x33d0
     640:	e3403000 	movt	r3, #0
     644:	e3a02001 	mov	r2, #1
     648:	e5c3200c 	strb	r2, [r3, #12]
            badMushroom_y[i] = LOWEST_Y - 19;            
     64c:	e3a010b7 	mov	r1, #183	; 0xb7
     650:	e583101c 	str	r1, [r3, #28]
    }

    if (map_num == 2){
        for (int i = 0; i < 3; i++)
        {
            isBadMushroom[i] = true;
     654:	e5c3200d 	strb	r2, [r3, #13]
            badMushroom_y[i] = LOWEST_Y - 19;            
     658:	e5831020 	str	r1, [r3, #32]
    }

    if (map_num == 2){
        for (int i = 0; i < 3; i++)
        {
            isBadMushroom[i] = true;
     65c:	e5c3200e 	strb	r2, [r3, #14]
            badMushroom_y[i] = LOWEST_Y - 19;            
     660:	e5831024 	str	r1, [r3, #36]	; 0x24
        }
        
        isTurtle = true;
     664:	e3001254 	movw	r1, #596	; 0x254
     668:	e3401018 	movt	r1, #24
     66c:	e5c1200c 	strb	r2, [r1, #12]

        badMushroom_x[0] = 196;
     670:	e3a020c4 	mov	r2, #196	; 0xc4
     674:	e5832010 	str	r2, [r3, #16]
        badMushroom_x[1] = 152;
     678:	e3a02098 	mov	r2, #152	; 0x98
     67c:	e5832014 	str	r2, [r3, #20]
        badMushroom_x[2] = 100;
     680:	e3a02064 	mov	r2, #100	; 0x64
     684:	e5832018 	str	r2, [r3, #24]

        money_x[0] = steps_2_R_low_x;
     688:	e5932054 	ldr	r2, [r3, #84]	; 0x54
     68c:	e5832028 	str	r2, [r3, #40]	; 0x28
        money_y[0] = 113;
     690:	e3a02071 	mov	r2, #113	; 0x71
     694:	e5832034 	str	r2, [r3, #52]	; 0x34
        money_x[1] = money_x[2] = money_y[1] = money_y[2] = OUT_SCREEN;
     698:	e3e02031 	mvn	r2, #49	; 0x31
     69c:	e583203c 	str	r2, [r3, #60]	; 0x3c
     6a0:	e5832038 	str	r2, [r3, #56]	; 0x38
     6a4:	e5832030 	str	r2, [r3, #48]	; 0x30
     6a8:	e583202c 	str	r2, [r3, #44]	; 0x2c
     6ac:	e12fff1e 	bx	lr
        
    } else if (map_num == 3){
     6b0:	e3530003 	cmp	r3, #3
     6b4:	112fff1e 	bxne	lr
        isBadMushroom[0] = true;
     6b8:	e30333d0 	movw	r3, #13264	; 0x33d0
     6bc:	e3403000 	movt	r3, #0
     6c0:	e3a02001 	mov	r2, #1
     6c4:	e5c3200c 	strb	r2, [r3, #12]
        isBadMushroom[1] = false;
     6c8:	e3a02000 	mov	r2, #0
     6cc:	e5c3200d 	strb	r2, [r3, #13]
        isBadMushroom[2] = false;
     6d0:	e5c3200e 	strb	r2, [r3, #14]

        badMushroom_x[0] = 96;
     6d4:	e3a02060 	mov	r2, #96	; 0x60
     6d8:	e5832010 	str	r2, [r3, #16]
        badMushroom_y[0] = LOWEST_Y - 19; 
     6dc:	e3a020b7 	mov	r2, #183	; 0xb7
     6e0:	e583201c 	str	r2, [r3, #28]
     6e4:	e12fff1e 	bx	lr

000006e8 <turtle_update_location>:
    }
}

void turtle_update_location(){
     6e8:	e92d4070 	push	{r4, r5, r6, lr}
    if (isTurtle){
     6ec:	e3003254 	movw	r3, #596	; 0x254
     6f0:	e3403018 	movt	r3, #24
     6f4:	e5d3300c 	ldrb	r3, [r3, #12]
     6f8:	e3530000 	cmp	r3, #0
     6fc:	08bd8070 	popeq	{r4, r5, r6, pc}
        //bouncing 
        if (turtle_x <= steps_2_L_low_x){
     700:	e30333d0 	movw	r3, #13264	; 0x33d0
     704:	e3403000 	movt	r3, #0
     708:	e593204c 	ldr	r2, [r3, #76]	; 0x4c
     70c:	e5933058 	ldr	r3, [r3, #88]	; 0x58
     710:	e1520003 	cmp	r2, r3
     714:	ca000004 	bgt	72c <turtle_update_location+0x44>
            isTurtleMovingRight = true;
     718:	e30333d0 	movw	r3, #13264	; 0x33d0
     71c:	e3403000 	movt	r3, #0
     720:	e3a01001 	mov	r1, #1
     724:	e5c31048 	strb	r1, [r3, #72]	; 0x48
     728:	ea00000f 	b	76c <turtle_update_location+0x84>
        } else if (turtle_x + 19 >= steps_2_L_high_x){
     72c:	e2821013 	add	r1, r2, #19
     730:	e30333d0 	movw	r3, #13264	; 0x33d0
     734:	e3403000 	movt	r3, #0
     738:	e593305c 	ldr	r3, [r3, #92]	; 0x5c
     73c:	e1510003 	cmp	r1, r3
     740:	ba000004 	blt	758 <turtle_update_location+0x70>
            isTurtleMovingRight = false;
     744:	e30333d0 	movw	r3, #13264	; 0x33d0
     748:	e3403000 	movt	r3, #0
     74c:	e3a01000 	mov	r1, #0
     750:	e5c31048 	strb	r1, [r3, #72]	; 0x48
     754:	ea000009 	b	780 <turtle_update_location+0x98>
        }

        if (isTurtleMovingRight){
     758:	e30333d0 	movw	r3, #13264	; 0x33d0
     75c:	e3403000 	movt	r3, #0
     760:	e5d33048 	ldrb	r3, [r3, #72]	; 0x48
     764:	e3530000 	cmp	r3, #0
     768:	0a000004 	beq	780 <turtle_update_location+0x98>
            turtle_x += BAD_MUSHROOM_SPEED;
     76c:	e30333d0 	movw	r3, #13264	; 0x33d0
     770:	e3403000 	movt	r3, #0
     774:	e2822005 	add	r2, r2, #5
     778:	e583204c 	str	r2, [r3, #76]	; 0x4c
     77c:	ea000003 	b	790 <turtle_update_location+0xa8>
        } else{
            turtle_x -= BAD_MUSHROOM_SPEED;
     780:	e30333d0 	movw	r3, #13264	; 0x33d0
     784:	e3403000 	movt	r3, #0
     788:	e2422005 	sub	r2, r2, #5
     78c:	e583204c 	str	r2, [r3, #76]	; 0x4c
        }

        //check whether mario dies
        if (turtle_x <= mario_x + MARIO_MID && turtle_x + 19 >= mario_x + MARIO_MID  && turtle_y + 28 >= mario_y && mario_y + 25 >= turtle_y){
     790:	e30333d0 	movw	r3, #13264	; 0x33d0
     794:	e3403000 	movt	r3, #0
     798:	e593604c 	ldr	r6, [r3, #76]	; 0x4c
     79c:	e5930004 	ldr	r0, [r3, #4]
     7a0:	eb000823 	bl	2834 <__aeabi_i2d>
     7a4:	e3a02000 	mov	r2, #0
     7a8:	e3a03000 	mov	r3, #0
     7ac:	e3443029 	movt	r3, #16425	; 0x4029
     7b0:	eb000752 	bl	2500 <__adddf3>
     7b4:	e1a04000 	mov	r4, r0
     7b8:	e1a05001 	mov	r5, r1
     7bc:	e1a00006 	mov	r0, r6
     7c0:	eb00081b 	bl	2834 <__aeabi_i2d>
     7c4:	e1a02004 	mov	r2, r4
     7c8:	e1a03005 	mov	r3, r5
     7cc:	eb0009b5 	bl	2ea8 <__aeabi_dcmple>
     7d0:	e3500000 	cmp	r0, #0
     7d4:	08bd8070 	popeq	{r4, r5, r6, pc}
     7d8:	e2860013 	add	r0, r6, #19
     7dc:	eb000814 	bl	2834 <__aeabi_i2d>
     7e0:	e1a02000 	mov	r2, r0
     7e4:	e1a03001 	mov	r3, r1
     7e8:	e1a00004 	mov	r0, r4
     7ec:	e1a01005 	mov	r1, r5
     7f0:	eb0009ac 	bl	2ea8 <__aeabi_dcmple>
     7f4:	e3500000 	cmp	r0, #0
     7f8:	08bd8070 	popeq	{r4, r5, r6, pc}
     7fc:	e30333d0 	movw	r3, #13264	; 0x33d0
     800:	e3403000 	movt	r3, #0
     804:	e5932050 	ldr	r2, [r3, #80]	; 0x50
     808:	e5933008 	ldr	r3, [r3, #8]
     80c:	e282101c 	add	r1, r2, #28
     810:	e1510003 	cmp	r1, r3
     814:	b8bd8070 	poplt	{r4, r5, r6, pc}
     818:	e2833019 	add	r3, r3, #25
     81c:	e1520003 	cmp	r2, r3
            lives--;
     820:	d30333d0 	movwle	r3, #13264	; 0x33d0
     824:	d3403000 	movtle	r3, #0
     828:	d5932060 	ldrle	r2, [r3, #96]	; 0x60
     82c:	d2422001 	suble	r2, r2, #1
     830:	d5832060 	strle	r2, [r3, #96]	; 0x60
     834:	e8bd8070 	pop	{r4, r5, r6, pc}

00000838 <beat_turtle>:
    
}

void beat_turtle(){

    if (isTurtle && mario_x + 25 >= turtle_x && mario_x <= turtle_x + 19 && mario_y + 25 <= turtle_y){
     838:	e3003254 	movw	r3, #596	; 0x254
     83c:	e3403018 	movt	r3, #24
     840:	e5d3300c 	ldrb	r3, [r3, #12]
     844:	e3530000 	cmp	r3, #0
     848:	012fff1e 	bxeq	lr
     84c:	e30333d0 	movw	r3, #13264	; 0x33d0
     850:	e3403000 	movt	r3, #0
     854:	e5932004 	ldr	r2, [r3, #4]
     858:	e593304c 	ldr	r3, [r3, #76]	; 0x4c
     85c:	e2821019 	add	r1, r2, #25
     860:	e1510003 	cmp	r1, r3
     864:	b12fff1e 	bxlt	lr
     868:	e2833013 	add	r3, r3, #19
     86c:	e1520003 	cmp	r2, r3
     870:	c12fff1e 	bxgt	lr
     874:	e30333d0 	movw	r3, #13264	; 0x33d0
     878:	e3403000 	movt	r3, #0
     87c:	e5932008 	ldr	r2, [r3, #8]
     880:	e5933050 	ldr	r3, [r3, #80]	; 0x50
     884:	e2821019 	add	r1, r2, #25
     888:	e1510003 	cmp	r1, r3
     88c:	c12fff1e 	bxgt	lr
        if (mario_y + 25 + GRAVITY_FALL >= turtle_y){
     890:	e282202d 	add	r2, r2, #45	; 0x2d
     894:	e1530002 	cmp	r3, r2
     898:	c12fff1e 	bxgt	lr
            isTurtle = false;
     89c:	e3003254 	movw	r3, #596	; 0x254
     8a0:	e3403018 	movt	r3, #24
     8a4:	e3a02000 	mov	r2, #0
     8a8:	e5c3200c 	strb	r2, [r3, #12]
            turtle_x = OUT_SCREEN;
     8ac:	e30333d0 	movw	r3, #13264	; 0x33d0
     8b0:	e3403000 	movt	r3, #0
     8b4:	e3e01031 	mvn	r1, #49	; 0x31
     8b8:	e583104c 	str	r1, [r3, #76]	; 0x4c
            turtle_y = OUT_SCREEN;
     8bc:	e5831050 	str	r1, [r3, #80]	; 0x50
            for (int i = 0; i < 3; i++)
            {
                isBadMushroom[i] = false;
     8c0:	e5c3200c 	strb	r2, [r3, #12]
     8c4:	e5c3200d 	strb	r2, [r3, #13]
     8c8:	e5c3200e 	strb	r2, [r3, #14]
     8cc:	e12fff1e 	bx	lr

000008d0 <bad_mushroom_update_location>:
    }

    return;
}

void bad_mushroom_update_location(){
     8d0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     8d4:	e24dd024 	sub	sp, sp, #36	; 0x24
    //bad mushroom move to left automatically
    for (int i = 0; i < 3; i++)
    {
        if (map_num == 1){
     8d8:	e30333d0 	movw	r3, #13264	; 0x33d0
     8dc:	e3403000 	movt	r3, #0
     8e0:	e593a000 	ldr	r10, [r3]
            if (isBadMushroom[i] && badMushroom_x[i] + 19 >= 0){
                badMushroom_x[i] -= BAD_MUSHROOM_SPEED;
            }

            //gravitational falling of bad mush room
            if (isBadMushroom[i] && badMushroom_x[i] + 19 * 0.5 <= steps_1_low_x && badMushroom_y[i] + 19 < LOWEST_Y){
     8e4:	e5931064 	ldr	r1, [r3, #100]	; 0x64
     8e8:	e58d1014 	str	r1, [sp, #20]
                    badMushroom_y[i] = LOWEST_Y - 19;
                }
            }
        } else if (map_num == 2){
            //bouncing between two pipes
            if (badMushroom_x[i] <= pipe_2_L_high_x){
     8ec:	e5932068 	ldr	r2, [r3, #104]	; 0x68
     8f0:	e58d2010 	str	r2, [sp, #16]
                isBadMushroomMovingRight[i] = true;
            } else if (badMushroom_x[i] + 19 >= pipe_2_R_low_x){
     8f4:	e593106c 	ldr	r1, [r3, #108]	; 0x6c
     8f8:	e58d1018 	str	r1, [sp, #24]
                badMushroom_x[i] -= BAD_MUSHROOM_SPEED;
            }

        } else{
            //bouncing 
            if (badMushroom_x[i] <= pipe_3_high_x){
     8fc:	e5932070 	ldr	r2, [r3, #112]	; 0x70
     900:	e58d2000 	str	r2, [sp]
            }
        }
        

        //check whether mario dies
        if (isBadMushroom[i] && badMushroom_x[i] <= mario_x + MARIO_MID && badMushroom_x[i] + 19 >= mario_x + MARIO_MID  && badMushroom_y[i] + 19 >= mario_y && mario_y + 25 >= badMushroom_y[i]){
     904:	e5931004 	ldr	r1, [r3, #4]
     908:	e58d1004 	str	r1, [sp, #4]
     90c:	e5932008 	ldr	r2, [r3, #8]
     910:	e58d2008 	str	r2, [sp, #8]
     914:	e2821019 	add	r1, r2, #25
     918:	e58d101c 	str	r1, [sp, #28]
     91c:	e5933060 	ldr	r3, [r3, #96]	; 0x60
     920:	e58d300c 	str	r3, [sp, #12]
     924:	e3a07000 	mov	r7, #0
    return;
}

void bad_mushroom_update_location(){
    //bad mushroom move to left automatically
    for (int i = 0; i < 3; i++)
     928:	e1a06007 	mov	r6, r7
                badMushroom_x[i] -= BAD_MUSHROOM_SPEED;
            }

        } else{
            //bouncing 
            if (badMushroom_x[i] <= pipe_3_high_x){
     92c:	e30383d0 	movw	r8, #13264	; 0x33d0
     930:	e3408000 	movt	r8, #0
                isBadMushroomMovingRight[i] = true;
            } else if (badMushroom_x[i] + 19 >= 224){
                isBadMushroomMovingRight[i] = false;
            }

            if (isBadMushroomMovingRight[i]){
     934:	e3009254 	movw	r9, #596	; 0x254
     938:	e3409018 	movt	r9, #24

void bad_mushroom_update_location(){
    //bad mushroom move to left automatically
    for (int i = 0; i < 3; i++)
    {
        if (map_num == 1){
     93c:	e35a0001 	cmp	r10, #1
     940:	1a000018 	bne	9a8 <bad_mushroom_update_location+0xd8>
            if (isBadMushroom[i] && badMushroom_x[i] + 19 >= 0){
     944:	e288300c 	add	r3, r8, #12
     948:	e7d63003 	ldrb	r3, [r6, r3]
     94c:	e3530000 	cmp	r3, #0
     950:	0a00004a 	beq	a80 <bad_mushroom_update_location+0x1b0>
     954:	e2883010 	add	r3, r8, #16
     958:	e7973003 	ldr	r3, [r7, r3]
     95c:	e3730013 	cmn	r3, #19
                badMushroom_x[i] -= BAD_MUSHROOM_SPEED;
     960:	52882010 	addpl	r2, r8, #16
     964:	52433005 	subpl	r3, r3, #5
     968:	57873002 	strpl	r3, [r7, r2]
     96c:	ea000075 	b	b48 <bad_mushroom_update_location+0x278>
            }

            //gravitational falling of bad mush room
            if (isBadMushroom[i] && badMushroom_x[i] + 19 * 0.5 <= steps_1_low_x && badMushroom_y[i] + 19 < LOWEST_Y){
     970:	e288301c 	add	r3, r8, #28
     974:	e7973003 	ldr	r3, [r7, r3]
     978:	e2832013 	add	r2, r3, #19
     97c:	e35200c9 	cmp	r2, #201	; 0xc9
     980:	ca00003e 	bgt	a80 <bad_mushroom_update_location+0x1b0>
                badMushroom_y[i] += GRAVITY_FALL;
                if (badMushroom_y[i] + GRAVITY_FALL >= LOWEST_Y - 19){
     984:	e2832028 	add	r2, r3, #40	; 0x28
     988:	e35200b6 	cmp	r2, #182	; 0xb6
                badMushroom_x[i] -= BAD_MUSHROOM_SPEED;
            }

            //gravitational falling of bad mush room
            if (isBadMushroom[i] && badMushroom_x[i] + 19 * 0.5 <= steps_1_low_x && badMushroom_y[i] + 19 < LOWEST_Y){
                badMushroom_y[i] += GRAVITY_FALL;
     98c:	d288201c 	addle	r2, r8, #28
     990:	d2833014 	addle	r3, r3, #20
     994:	d7873002 	strle	r3, [r7, r2]
                if (badMushroom_y[i] + GRAVITY_FALL >= LOWEST_Y - 19){
                    badMushroom_y[i] = LOWEST_Y - 19;
     998:	c288301c 	addgt	r3, r8, #28
     99c:	c3a020b7 	movgt	r2, #183	; 0xb7
     9a0:	c7872003 	strgt	r2, [r7, r3]
     9a4:	ea000035 	b	a80 <bad_mushroom_update_location+0x1b0>
                }
            }
        } else if (map_num == 2){
     9a8:	e35a0002 	cmp	r10, #2
     9ac:	1a00001a 	bne	a1c <bad_mushroom_update_location+0x14c>
            //bouncing between two pipes
            if (badMushroom_x[i] <= pipe_2_L_high_x){
     9b0:	e2883010 	add	r3, r8, #16
     9b4:	e7973003 	ldr	r3, [r7, r3]
     9b8:	e59d1010 	ldr	r1, [sp, #16]
     9bc:	e1530001 	cmp	r3, r1
                isBadMushroomMovingRight[i] = true;
     9c0:	d2892004 	addle	r2, r9, #4
     9c4:	d3a01001 	movle	r1, #1
     9c8:	d7c61002 	strble	r1, [r6, r2]
     9cc:	da00000a 	ble	9fc <bad_mushroom_update_location+0x12c>
            } else if (badMushroom_x[i] + 19 >= pipe_2_R_low_x){
     9d0:	e2832013 	add	r2, r3, #19
     9d4:	e59d1018 	ldr	r1, [sp, #24]
     9d8:	e1520001 	cmp	r2, r1
                isBadMushroomMovingRight[i] = false;
     9dc:	a2892004 	addge	r2, r9, #4
     9e0:	a3a01000 	movge	r1, #0
     9e4:	a7c61002 	strbge	r1, [r6, r2]
     9e8:	aa000007 	bge	a0c <bad_mushroom_update_location+0x13c>
            }

            if (isBadMushroomMovingRight[i]){
     9ec:	e2892004 	add	r2, r9, #4
     9f0:	e7d62002 	ldrb	r2, [r6, r2]
     9f4:	e3520000 	cmp	r2, #0
     9f8:	0a000003 	beq	a0c <bad_mushroom_update_location+0x13c>
                badMushroom_x[i] += BAD_MUSHROOM_SPEED;
     9fc:	e2882010 	add	r2, r8, #16
     a00:	e2833005 	add	r3, r3, #5
     a04:	e7873002 	str	r3, [r7, r2]
     a08:	ea00001c 	b	a80 <bad_mushroom_update_location+0x1b0>
            } else{
                badMushroom_x[i] -= BAD_MUSHROOM_SPEED;
     a0c:	e2882010 	add	r2, r8, #16
     a10:	e2433005 	sub	r3, r3, #5
     a14:	e7873002 	str	r3, [r7, r2]
     a18:	ea000018 	b	a80 <bad_mushroom_update_location+0x1b0>
            }

        } else{
            //bouncing 
            if (badMushroom_x[i] <= pipe_3_high_x){
     a1c:	e2883010 	add	r3, r8, #16
     a20:	e7973003 	ldr	r3, [r7, r3]
     a24:	e59d2000 	ldr	r2, [sp]
     a28:	e1530002 	cmp	r3, r2
                isBadMushroomMovingRight[i] = true;
     a2c:	d2892004 	addle	r2, r9, #4
     a30:	d3a01001 	movle	r1, #1
     a34:	d7c61002 	strble	r1, [r6, r2]
     a38:	da000009 	ble	a64 <bad_mushroom_update_location+0x194>
            } else if (badMushroom_x[i] + 19 >= 224){
     a3c:	e2832013 	add	r2, r3, #19
     a40:	e35200df 	cmp	r2, #223	; 0xdf
                isBadMushroomMovingRight[i] = false;
     a44:	c2892004 	addgt	r2, r9, #4
     a48:	c3a01000 	movgt	r1, #0
     a4c:	c7c61002 	strbgt	r1, [r6, r2]
     a50:	ca000007 	bgt	a74 <bad_mushroom_update_location+0x1a4>
            }

            if (isBadMushroomMovingRight[i]){
     a54:	e2892004 	add	r2, r9, #4
     a58:	e7d62002 	ldrb	r2, [r6, r2]
     a5c:	e3520000 	cmp	r2, #0
     a60:	0a000003 	beq	a74 <bad_mushroom_update_location+0x1a4>
                badMushroom_x[i] += BAD_MUSHROOM_SPEED;
     a64:	e2882010 	add	r2, r8, #16
     a68:	e2833005 	add	r3, r3, #5
     a6c:	e7873002 	str	r3, [r7, r2]
     a70:	ea000002 	b	a80 <bad_mushroom_update_location+0x1b0>
            } else{
                badMushroom_x[i] -= BAD_MUSHROOM_SPEED;
     a74:	e2882010 	add	r2, r8, #16
     a78:	e2433005 	sub	r3, r3, #5
     a7c:	e7873002 	str	r3, [r7, r2]
            }
        }
        

        //check whether mario dies
        if (isBadMushroom[i] && badMushroom_x[i] <= mario_x + MARIO_MID && badMushroom_x[i] + 19 >= mario_x + MARIO_MID  && badMushroom_y[i] + 19 >= mario_y && mario_y + 25 >= badMushroom_y[i]){
     a80:	e288300c 	add	r3, r8, #12
     a84:	e7d63003 	ldrb	r3, [r6, r3]
     a88:	e3530000 	cmp	r3, #0
     a8c:	0a000024 	beq	b24 <bad_mushroom_update_location+0x254>
     a90:	e2883010 	add	r3, r8, #16
     a94:	e797b003 	ldr	r11, [r7, r3]
     a98:	e59d0004 	ldr	r0, [sp, #4]
     a9c:	eb000764 	bl	2834 <__aeabi_i2d>
     aa0:	e3a02000 	mov	r2, #0
     aa4:	e3a03000 	mov	r3, #0
     aa8:	e3443029 	movt	r3, #16425	; 0x4029
     aac:	eb000693 	bl	2500 <__adddf3>
     ab0:	e1a04000 	mov	r4, r0
     ab4:	e1a05001 	mov	r5, r1
     ab8:	e1a0000b 	mov	r0, r11
     abc:	eb00075c 	bl	2834 <__aeabi_i2d>
     ac0:	e1a02004 	mov	r2, r4
     ac4:	e1a03005 	mov	r3, r5
     ac8:	eb0008f6 	bl	2ea8 <__aeabi_dcmple>
     acc:	e3500000 	cmp	r0, #0
     ad0:	0a000013 	beq	b24 <bad_mushroom_update_location+0x254>
     ad4:	e28b0013 	add	r0, r11, #19
     ad8:	eb000755 	bl	2834 <__aeabi_i2d>
     adc:	e1a02000 	mov	r2, r0
     ae0:	e1a03001 	mov	r3, r1
     ae4:	e1a00004 	mov	r0, r4
     ae8:	e1a01005 	mov	r1, r5
     aec:	eb0008ed 	bl	2ea8 <__aeabi_dcmple>
     af0:	e3500000 	cmp	r0, #0
     af4:	0a00000a 	beq	b24 <bad_mushroom_update_location+0x254>
     af8:	e288301c 	add	r3, r8, #28
     afc:	e7973003 	ldr	r3, [r7, r3]
     b00:	e2832013 	add	r2, r3, #19
     b04:	e59d1008 	ldr	r1, [sp, #8]
     b08:	e1520001 	cmp	r2, r1
     b0c:	ba000004 	blt	b24 <bad_mushroom_update_location+0x254>
     b10:	e59d201c 	ldr	r2, [sp, #28]
     b14:	e1530002 	cmp	r3, r2
            lives--;
     b18:	d59d300c 	ldrle	r3, [sp, #12]
     b1c:	d2433001 	suble	r3, r3, #1
     b20:	d58d300c 	strle	r3, [sp, #12]
    return;
}

void bad_mushroom_update_location(){
    //bad mushroom move to left automatically
    for (int i = 0; i < 3; i++)
     b24:	e2866001 	add	r6, r6, #1
     b28:	e2877004 	add	r7, r7, #4
     b2c:	e3560003 	cmp	r6, #3
     b30:	1affff81 	bne	93c <bad_mushroom_update_location+0x6c>
     b34:	e30333d0 	movw	r3, #13264	; 0x33d0
     b38:	e3403000 	movt	r3, #0
     b3c:	e59d100c 	ldr	r1, [sp, #12]
     b40:	e5831060 	str	r1, [r3, #96]	; 0x60
     b44:	ea000012 	b	b94 <bad_mushroom_update_location+0x2c4>
            if (isBadMushroom[i] && badMushroom_x[i] + 19 >= 0){
                badMushroom_x[i] -= BAD_MUSHROOM_SPEED;
            }

            //gravitational falling of bad mush room
            if (isBadMushroom[i] && badMushroom_x[i] + 19 * 0.5 <= steps_1_low_x && badMushroom_y[i] + 19 < LOWEST_Y){
     b48:	e2883010 	add	r3, r8, #16
     b4c:	e7970003 	ldr	r0, [r7, r3]
     b50:	eb000737 	bl	2834 <__aeabi_i2d>
     b54:	e3a02000 	mov	r2, #0
     b58:	e3a03000 	mov	r3, #0
     b5c:	e3443023 	movt	r3, #16419	; 0x4023
     b60:	eb000666 	bl	2500 <__adddf3>
     b64:	e1a04000 	mov	r4, r0
     b68:	e1a05001 	mov	r5, r1
     b6c:	e59d0014 	ldr	r0, [sp, #20]
     b70:	eb00072f 	bl	2834 <__aeabi_i2d>
     b74:	e1a02000 	mov	r2, r0
     b78:	e1a03001 	mov	r3, r1
     b7c:	e1a00004 	mov	r0, r4
     b80:	e1a01005 	mov	r1, r5
     b84:	eb0008c7 	bl	2ea8 <__aeabi_dcmple>
     b88:	e3500000 	cmp	r0, #0
     b8c:	1affff77 	bne	970 <bad_mushroom_update_location+0xa0>
     b90:	eaffffba 	b	a80 <bad_mushroom_update_location+0x1b0>
        //check whether mario dies
        if (isBadMushroom[i] && badMushroom_x[i] <= mario_x + MARIO_MID && badMushroom_x[i] + 19 >= mario_x + MARIO_MID  && badMushroom_y[i] + 19 >= mario_y && mario_y + 25 >= badMushroom_y[i]){
            lives--;
        }
    }
}
     b94:	e28dd024 	add	sp, sp, #36	; 0x24
     b98:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

00000b9c <beat_mushroom>:

void beat_mushroom(){
     b9c:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    for (int i = 0; i < 3; i++)
    {
        if (isBadMushroom[i] && mario_x + 25 >= badMushroom_x[i] && mario_x <= badMushroom_x[i] + 19 && mario_y + 25 <= badMushroom_y[i]){
     ba0:	e30323d0 	movw	r2, #13264	; 0x33d0
     ba4:	e3402000 	movt	r2, #0
     ba8:	e592c004 	ldr	r12, [r2, #4]
     bac:	e28c4019 	add	r4, r12, #25
     bb0:	e5923008 	ldr	r3, [r2, #8]
     bb4:	e2835019 	add	r5, r3, #25
            if (mario_y + 25 + GRAVITY_FALL >= badMushroom_y[i]){
     bb8:	e283702d 	add	r7, r3, #45	; 0x2d
     bbc:	e282200c 	add	r2, r2, #12
     bc0:	e3a03000 	mov	r3, #0
}

void beat_mushroom(){
    for (int i = 0; i < 3; i++)
    {
        if (isBadMushroom[i] && mario_x + 25 >= badMushroom_x[i] && mario_x <= badMushroom_x[i] + 19 && mario_y + 25 <= badMushroom_y[i]){
     bc4:	e30303d0 	movw	r0, #13264	; 0x33d0
     bc8:	e3400000 	movt	r0, #0
            if (mario_y + 25 + GRAVITY_FALL >= badMushroom_y[i]){
                isBadMushroom[i] = false;
     bcc:	e1a08003 	mov	r8, r3
                badMushroom_x[i] = OUT_SCREEN;
     bd0:	e3e06031 	mvn	r6, #49	; 0x31
}

void beat_mushroom(){
    for (int i = 0; i < 3; i++)
    {
        if (isBadMushroom[i] && mario_x + 25 >= badMushroom_x[i] && mario_x <= badMushroom_x[i] + 19 && mario_y + 25 <= badMushroom_y[i]){
     bd4:	e4d21001 	ldrb	r1, [r2], #1
     bd8:	e3510000 	cmp	r1, #0
     bdc:	0a000010 	beq	c24 <beat_mushroom+0x88>
     be0:	e2801010 	add	r1, r0, #16
     be4:	e7931001 	ldr	r1, [r3, r1]
     be8:	e1540001 	cmp	r4, r1
     bec:	ba00000c 	blt	c24 <beat_mushroom+0x88>
     bf0:	e2811013 	add	r1, r1, #19
     bf4:	e15c0001 	cmp	r12, r1
     bf8:	ca000009 	bgt	c24 <beat_mushroom+0x88>
     bfc:	e280101c 	add	r1, r0, #28
     c00:	e7931001 	ldr	r1, [r3, r1]
     c04:	e1550001 	cmp	r5, r1
     c08:	ca000005 	bgt	c24 <beat_mushroom+0x88>
            if (mario_y + 25 + GRAVITY_FALL >= badMushroom_y[i]){
     c0c:	e1510007 	cmp	r1, r7
                isBadMushroom[i] = false;
     c10:	d5428001 	strble	r8, [r2, #-1]
                badMushroom_x[i] = OUT_SCREEN;
     c14:	d2801010 	addle	r1, r0, #16
     c18:	d7836001 	strle	r6, [r3, r1]
                badMushroom_y[i] = OUT_SCREEN;
     c1c:	d280101c 	addle	r1, r0, #28
     c20:	d7836001 	strle	r6, [r3, r1]
     c24:	e2833004 	add	r3, r3, #4
        }
    }
}

void beat_mushroom(){
    for (int i = 0; i < 3; i++)
     c28:	e353000c 	cmp	r3, #12
     c2c:	1affffe8 	bne	bd4 <beat_mushroom+0x38>
                badMushroom_y[i] = OUT_SCREEN;
            }
        }
    }
    return;
}
     c30:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
     c34:	e12fff1e 	bx	lr

00000c38 <mario_update_location>:
        isGameOver = true;
    }
}


void mario_update_location(){
     c38:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     c3c:	e24dd00c 	sub	sp, sp, #12
    if (map_num == 1){
     c40:	e30333d0 	movw	r3, #13264	; 0x33d0
     c44:	e3403000 	movt	r3, #0
     c48:	e5933000 	ldr	r3, [r3]
     c4c:	e3530001 	cmp	r3, #1
     c50:	1a000148 	bne	1178 <mario_update_location+0x540>
        //control mario depends on different flags
        if (mario_move_forward && (mario_x + 25 <= pipe_1_low_x || mario_x > pipe_1_low_x || mario_y + 25 <= pipe_1_y)){
     c54:	e3003254 	movw	r3, #596	; 0x254
     c58:	e3403018 	movt	r3, #24
     c5c:	e5d33000 	ldrb	r3, [r3]
     c60:	e3530000 	cmp	r3, #0
     c64:	0a000015 	beq	cc0 <mario_update_location+0x88>
     c68:	e30333d0 	movw	r3, #13264	; 0x33d0
     c6c:	e3403000 	movt	r3, #0
     c70:	e5932004 	ldr	r2, [r3, #4]
     c74:	e5933074 	ldr	r3, [r3, #116]	; 0x74
     c78:	e2821019 	add	r1, r2, #25
     c7c:	e1510003 	cmp	r1, r3
     c80:	da000008 	ble	ca8 <mario_update_location+0x70>
     c84:	e1520003 	cmp	r2, r3
     c88:	ca000006 	bgt	ca8 <mario_update_location+0x70>
     c8c:	e30333d0 	movw	r3, #13264	; 0x33d0
     c90:	e3403000 	movt	r3, #0
     c94:	e5931008 	ldr	r1, [r3, #8]
     c98:	e2811019 	add	r1, r1, #25
     c9c:	e5933078 	ldr	r3, [r3, #120]	; 0x78
     ca0:	e1510003 	cmp	r1, r3
     ca4:	ca000005 	bgt	cc0 <mario_update_location+0x88>
            mario_x += MARIO_RUN_SPEED;
     ca8:	e30333d0 	movw	r3, #13264	; 0x33d0
     cac:	e3403000 	movt	r3, #0
     cb0:	e2822002 	add	r2, r2, #2
     cb4:	e5832004 	str	r2, [r3, #4]
            is_mario_moving_forward = true;
     cb8:	e3a02001 	mov	r2, #1
     cbc:	e5c3207c 	strb	r2, [r3, #124]	; 0x7c
        } 
        if (mario_move_backward && (mario_x >= pipe_1_high_x || mario_x < pipe_1_low_x || mario_y + 25 <= pipe_1_y)){
     cc0:	e3003254 	movw	r3, #596	; 0x254
     cc4:	e3403018 	movt	r3, #24
     cc8:	e5d33001 	ldrb	r3, [r3, #1]
     ccc:	e3530000 	cmp	r3, #0
     cd0:	0a000017 	beq	d34 <mario_update_location+0xfc>
     cd4:	e30333d0 	movw	r3, #13264	; 0x33d0
     cd8:	e3403000 	movt	r3, #0
     cdc:	e5932004 	ldr	r2, [r3, #4]
     ce0:	e5933080 	ldr	r3, [r3, #128]	; 0x80
     ce4:	e1520003 	cmp	r2, r3
     ce8:	aa00000b 	bge	d1c <mario_update_location+0xe4>
     cec:	e30333d0 	movw	r3, #13264	; 0x33d0
     cf0:	e3403000 	movt	r3, #0
     cf4:	e5933074 	ldr	r3, [r3, #116]	; 0x74
     cf8:	e1520003 	cmp	r2, r3
     cfc:	ba000006 	blt	d1c <mario_update_location+0xe4>
     d00:	e30333d0 	movw	r3, #13264	; 0x33d0
     d04:	e3403000 	movt	r3, #0
     d08:	e5931008 	ldr	r1, [r3, #8]
     d0c:	e2811019 	add	r1, r1, #25
     d10:	e5933078 	ldr	r3, [r3, #120]	; 0x78
     d14:	e1510003 	cmp	r1, r3
     d18:	ca000005 	bgt	d34 <mario_update_location+0xfc>
            mario_x -= MARIO_RUN_SPEED;
     d1c:	e30333d0 	movw	r3, #13264	; 0x33d0
     d20:	e3403000 	movt	r3, #0
     d24:	e2422002 	sub	r2, r2, #2
     d28:	e5832004 	str	r2, [r3, #4]
            is_mario_moving_forward = false;
     d2c:	e3a02000 	mov	r2, #0
     d30:	e5c3207c 	strb	r2, [r3, #124]	; 0x7c
        }
        if (mario_jump){
     d34:	e3003254 	movw	r3, #596	; 0x254
     d38:	e3403018 	movt	r3, #24
     d3c:	e5d33002 	ldrb	r3, [r3, #2]
     d40:	e3530000 	cmp	r3, #0
     d44:	0a000085 	beq	f60 <mario_update_location+0x328>
            //if under steps
            if (steps_1_low_x <= mario_x + MARIO_MID && mario_x + MARIO_MID <= steps_1_high_x && mario_y > steps_1_y){
     d48:	e30363d0 	movw	r6, #13264	; 0x33d0
     d4c:	e3406000 	movt	r6, #0
     d50:	e5960004 	ldr	r0, [r6, #4]
     d54:	eb0006b6 	bl	2834 <__aeabi_i2d>
     d58:	e3a02000 	mov	r2, #0
     d5c:	e3a03000 	mov	r3, #0
     d60:	e3443029 	movt	r3, #16425	; 0x4029
     d64:	eb0005e5 	bl	2500 <__adddf3>
     d68:	e1a04000 	mov	r4, r0
     d6c:	e1a05001 	mov	r5, r1
     d70:	e5960064 	ldr	r0, [r6, #100]	; 0x64
     d74:	eb0006ae 	bl	2834 <__aeabi_i2d>
     d78:	e1a02004 	mov	r2, r4
     d7c:	e1a03005 	mov	r3, r5
     d80:	eb000848 	bl	2ea8 <__aeabi_dcmple>
     d84:	e3500000 	cmp	r0, #0
     d88:	0a00004f 	beq	ecc <mario_update_location+0x294>
     d8c:	e5960084 	ldr	r0, [r6, #132]	; 0x84
     d90:	eb0006a7 	bl	2834 <__aeabi_i2d>
     d94:	e1a02000 	mov	r2, r0
     d98:	e1a03001 	mov	r3, r1
     d9c:	e1a00004 	mov	r0, r4
     da0:	e1a01005 	mov	r1, r5
     da4:	eb00083f 	bl	2ea8 <__aeabi_dcmple>
     da8:	e3500000 	cmp	r0, #0
     dac:	0a000046 	beq	ecc <mario_update_location+0x294>
     db0:	e5962008 	ldr	r2, [r6, #8]
     db4:	e5963088 	ldr	r3, [r6, #136]	; 0x88
     db8:	e1520003 	cmp	r2, r3
     dbc:	da000042 	ble	ecc <mario_update_location+0x294>
                if (!mario_fall && mario_y > steps_1_y + 25){
     dc0:	e3001254 	movw	r1, #596	; 0x254
     dc4:	e3401018 	movt	r1, #24
     dc8:	e5d11012 	ldrb	r1, [r1, #18]
     dcc:	e3510000 	cmp	r1, #0
     dd0:	1a000004 	bne	de8 <mario_update_location+0x1b0>
     dd4:	e2833019 	add	r3, r3, #25
     dd8:	e1520003 	cmp	r2, r3
                    mario_y -= MARIO_JUMP_SPEED;
     ddc:	c2422001 	subgt	r2, r2, #1
     de0:	c5862008 	strgt	r2, [r6, #8]
     de4:	ca000052 	bgt	f34 <mario_update_location+0x2fc>
                } else{
                    mario_fall = true;
     de8:	e3003254 	movw	r3, #596	; 0x254
     dec:	e3403018 	movt	r3, #24
     df0:	e3a02001 	mov	r2, #1
     df4:	e5c32012 	strb	r2, [r3, #18]
                    mario_jumped = 0;
     df8:	e3a06000 	mov	r6, #0
     dfc:	e5836014 	str	r6, [r3, #20]
        isGameOver = true;
    }
}


void mario_update_location(){
     e00:	e59f8f94 	ldr	r8, [pc, #3988]	; 1d9c <mario_update_location+0x1164>
                    mario_fall = true;
                    mario_jumped = 0;
                    for (int i = 0; i < 3; i++)
                    {
                        if (mario_x + MARIO_MID >= money_x[i] && mario_x + MARIO_MID <= money_x[i] + 16){
                            isMoney[i] = true;
     e04:	e1a0a003 	mov	r10, r3
     e08:	e1a09002 	mov	r9, r2
                } else{
                    mario_fall = true;
                    mario_jumped = 0;
                    for (int i = 0; i < 3; i++)
                    {
                        if (mario_x + MARIO_MID >= money_x[i] && mario_x + MARIO_MID <= money_x[i] + 16){
     e0c:	e5b87004 	ldr	r7, [r8, #4]!
     e10:	e1a00007 	mov	r0, r7
     e14:	eb000686 	bl	2834 <__aeabi_i2d>
     e18:	e1a02000 	mov	r2, r0
     e1c:	e1a03001 	mov	r3, r1
     e20:	e1a00004 	mov	r0, r4
     e24:	e1a01005 	mov	r1, r5
     e28:	eb000824 	bl	2ec0 <__aeabi_dcmpge>
     e2c:	e3500000 	cmp	r0, #0
     e30:	0a000009 	beq	e5c <mario_update_location+0x224>
     e34:	e2870010 	add	r0, r7, #16
     e38:	eb00067d 	bl	2834 <__aeabi_i2d>
     e3c:	e1a02000 	mov	r2, r0
     e40:	e1a03001 	mov	r3, r1
     e44:	e1a00004 	mov	r0, r4
     e48:	e1a01005 	mov	r1, r5
     e4c:	eb000815 	bl	2ea8 <__aeabi_dcmple>
     e50:	e3500000 	cmp	r0, #0
                            isMoney[i] = true;
     e54:	128a3008 	addne	r3, r10, #8
     e58:	17c69003 	strbne	r9, [r6, r3]
                if (!mario_fall && mario_y > steps_1_y + 25){
                    mario_y -= MARIO_JUMP_SPEED;
                } else{
                    mario_fall = true;
                    mario_jumped = 0;
                    for (int i = 0; i < 3; i++)
     e5c:	e2866001 	add	r6, r6, #1
     e60:	e3560003 	cmp	r6, #3
     e64:	1affffe8 	bne	e0c <mario_update_location+0x1d4>
                    {
                        if (mario_x + MARIO_MID >= money_x[i] && mario_x + MARIO_MID <= money_x[i] + 16){
                            isMoney[i] = true;
                        }
                    }
                    if (mario_x + MARIO_MID >= goodMushroom_x && mario_x + MARIO_MID <= goodMushroom_x + 19){
     e68:	e30333d0 	movw	r3, #13264	; 0x33d0
     e6c:	e3403000 	movt	r3, #0
     e70:	e5936040 	ldr	r6, [r3, #64]	; 0x40
     e74:	e1a00006 	mov	r0, r6
     e78:	eb00066d 	bl	2834 <__aeabi_i2d>
     e7c:	e1a02000 	mov	r2, r0
     e80:	e1a03001 	mov	r3, r1
     e84:	e1a00004 	mov	r0, r4
     e88:	e1a01005 	mov	r1, r5
     e8c:	eb00080b 	bl	2ec0 <__aeabi_dcmpge>
     e90:	e3500000 	cmp	r0, #0
     e94:	0a000026 	beq	f34 <mario_update_location+0x2fc>
     e98:	e2860013 	add	r0, r6, #19
     e9c:	eb000664 	bl	2834 <__aeabi_i2d>
     ea0:	e1a02000 	mov	r2, r0
     ea4:	e1a03001 	mov	r3, r1
     ea8:	e1a00004 	mov	r0, r4
     eac:	e1a01005 	mov	r1, r5
     eb0:	eb0007fc 	bl	2ea8 <__aeabi_dcmple>
     eb4:	e3500000 	cmp	r0, #0
                        isGoodMushroom = true;
     eb8:	13003254 	movwne	r3, #596	; 0x254
     ebc:	13403018 	movtne	r3, #24
     ec0:	13a02001 	movne	r2, #1
     ec4:	15c3200b 	strbne	r2, [r3, #11]
     ec8:	ea000019 	b	f34 <mario_update_location+0x2fc>
                    }
                    
                }
            }else if (!mario_fall && mario_jumped < MARIO_JUMP_HIGHT){
     ecc:	e3003254 	movw	r3, #596	; 0x254
     ed0:	e3403018 	movt	r3, #24
     ed4:	e5d33012 	ldrb	r3, [r3, #18]
     ed8:	e3530000 	cmp	r3, #0
     edc:	1a00000e 	bne	f1c <mario_update_location+0x2e4>
     ee0:	e3003254 	movw	r3, #596	; 0x254
     ee4:	e3403018 	movt	r3, #24
     ee8:	e5933014 	ldr	r3, [r3, #20]
     eec:	e3530063 	cmp	r3, #99	; 0x63
     ef0:	ca000009 	bgt	f1c <mario_update_location+0x2e4>
                mario_y -= MARIO_JUMP_SPEED;
     ef4:	e30323d0 	movw	r2, #13264	; 0x33d0
     ef8:	e3402000 	movt	r2, #0
     efc:	e5921008 	ldr	r1, [r2, #8]
     f00:	e2411001 	sub	r1, r1, #1
     f04:	e5821008 	str	r1, [r2, #8]
                mario_jumped += MARIO_JUMP_SPEED;
     f08:	e3002254 	movw	r2, #596	; 0x254
     f0c:	e3402018 	movt	r2, #24
     f10:	e2833001 	add	r3, r3, #1
     f14:	e5823014 	str	r3, [r2, #20]
     f18:	ea000005 	b	f34 <mario_update_location+0x2fc>
            } else{
                mario_fall = true;
     f1c:	e3003254 	movw	r3, #596	; 0x254
     f20:	e3403018 	movt	r3, #24
     f24:	e3a02001 	mov	r2, #1
     f28:	e5c32012 	strb	r2, [r3, #18]
                mario_jumped = 0;
     f2c:	e3a02000 	mov	r2, #0
     f30:	e5832014 	str	r2, [r3, #20]
            }

            if (mario_fall){
     f34:	e3003254 	movw	r3, #596	; 0x254
     f38:	e3403018 	movt	r3, #24
     f3c:	e5d33012 	ldrb	r3, [r3, #18]
     f40:	e3530000 	cmp	r3, #0
     f44:	0a000056 	beq	10a4 <mario_update_location+0x46c>
                beat_mushroom();
     f48:	ebffff13 	bl	b9c <beat_mushroom>
                mario_y += GRAVITY_FALL;
     f4c:	e30333d0 	movw	r3, #13264	; 0x33d0
     f50:	e3403000 	movt	r3, #0
     f54:	e5932008 	ldr	r2, [r3, #8]
     f58:	e2822014 	add	r2, r2, #20
     f5c:	e5832008 	str	r2, [r3, #8]
            }
        }
        //if not landing, cannot jump again
        //if on steps
        if (mario_fall && steps_1_low_x < mario_x + 20 && mario_x + 5 < steps_1_high_x && mario_y + 25 <= steps_1_y + 20){
     f60:	e3003254 	movw	r3, #596	; 0x254
     f64:	e3403018 	movt	r3, #24
     f68:	e5d33012 	ldrb	r3, [r3, #18]
     f6c:	e3530000 	cmp	r3, #0
     f70:	0a00004b 	beq	10a4 <mario_update_location+0x46c>
     f74:	e30333d0 	movw	r3, #13264	; 0x33d0
     f78:	e3403000 	movt	r3, #0
     f7c:	e5932004 	ldr	r2, [r3, #4]
     f80:	e2821014 	add	r1, r2, #20
     f84:	e5933064 	ldr	r3, [r3, #100]	; 0x64
     f88:	e1510003 	cmp	r1, r3
     f8c:	da000019 	ble	ff8 <mario_update_location+0x3c0>
     f90:	e2820005 	add	r0, r2, #5
     f94:	e30333d0 	movw	r3, #13264	; 0x33d0
     f98:	e3403000 	movt	r3, #0
     f9c:	e5933084 	ldr	r3, [r3, #132]	; 0x84
     fa0:	e1500003 	cmp	r0, r3
     fa4:	aa000013 	bge	ff8 <mario_update_location+0x3c0>
     fa8:	e30333d0 	movw	r3, #13264	; 0x33d0
     fac:	e3403000 	movt	r3, #0
     fb0:	e5930008 	ldr	r0, [r3, #8]
     fb4:	e2800019 	add	r0, r0, #25
     fb8:	e5933088 	ldr	r3, [r3, #136]	; 0x88
     fbc:	e283c014 	add	r12, r3, #20
     fc0:	e150000c 	cmp	r0, r12
     fc4:	ca00000b 	bgt	ff8 <mario_update_location+0x3c0>
            if (mario_y + 25 >= steps_1_y){
     fc8:	e1500003 	cmp	r0, r3
     fcc:	ba000034 	blt	10a4 <mario_update_location+0x46c>
                mario_y = steps_1_y - 25;
     fd0:	e30323d0 	movw	r2, #13264	; 0x33d0
     fd4:	e3402000 	movt	r2, #0
     fd8:	e2433019 	sub	r3, r3, #25
     fdc:	e5823008 	str	r3, [r2, #8]
                mario_jump = false;
     fe0:	e3003254 	movw	r3, #596	; 0x254
     fe4:	e3403018 	movt	r3, #24
     fe8:	e3a02000 	mov	r2, #0
     fec:	e5c32002 	strb	r2, [r3, #2]
                mario_fall = false;
     ff0:	e5c32012 	strb	r2, [r3, #18]
     ff4:	ea00002a 	b	10a4 <mario_update_location+0x46c>
            }
        }//if on the pipe 
        else if (mario_fall && pipe_1_low_x < mario_x + 20 && mario_x + 5 < pipe_1_high_x){
     ff8:	e30333d0 	movw	r3, #13264	; 0x33d0
     ffc:	e3403000 	movt	r3, #0
    1000:	e5933074 	ldr	r3, [r3, #116]	; 0x74
    1004:	e1510003 	cmp	r1, r3
    1008:	da000016 	ble	1068 <mario_update_location+0x430>
    100c:	e2822005 	add	r2, r2, #5
    1010:	e30333d0 	movw	r3, #13264	; 0x33d0
    1014:	e3403000 	movt	r3, #0
    1018:	e5933080 	ldr	r3, [r3, #128]	; 0x80
    101c:	e1520003 	cmp	r2, r3
    1020:	aa000010 	bge	1068 <mario_update_location+0x430>
            if (mario_y + 25 >= pipe_1_y){
    1024:	e30333d0 	movw	r3, #13264	; 0x33d0
    1028:	e3403000 	movt	r3, #0
    102c:	e5932078 	ldr	r2, [r3, #120]	; 0x78
    1030:	e5933008 	ldr	r3, [r3, #8]
    1034:	e2833019 	add	r3, r3, #25
    1038:	e1530002 	cmp	r3, r2
    103c:	ba000018 	blt	10a4 <mario_update_location+0x46c>
                mario_y = pipe_1_y - 25;
    1040:	e30333d0 	movw	r3, #13264	; 0x33d0
    1044:	e3403000 	movt	r3, #0
    1048:	e2422019 	sub	r2, r2, #25
    104c:	e5832008 	str	r2, [r3, #8]
                mario_jump = false;
    1050:	e3003254 	movw	r3, #596	; 0x254
    1054:	e3403018 	movt	r3, #24
    1058:	e3a02000 	mov	r2, #0
    105c:	e5c32002 	strb	r2, [r3, #2]
                mario_fall = false;
    1060:	e5c32012 	strb	r2, [r3, #18]
    1064:	ea00000e 	b	10a4 <mario_update_location+0x46c>
            }
        } else if (mario_fall){
            if (mario_y + 25 >= LOWEST_Y){
    1068:	e30333d0 	movw	r3, #13264	; 0x33d0
    106c:	e3403000 	movt	r3, #0
    1070:	e5933008 	ldr	r3, [r3, #8]
    1074:	e2833019 	add	r3, r3, #25
    1078:	e35300c9 	cmp	r3, #201	; 0xc9
    107c:	da000008 	ble	10a4 <mario_update_location+0x46c>
                mario_y = LOWEST_Y - 25;
    1080:	e30333d0 	movw	r3, #13264	; 0x33d0
    1084:	e3403000 	movt	r3, #0
    1088:	e3a020b1 	mov	r2, #177	; 0xb1
    108c:	e5832008 	str	r2, [r3, #8]
                mario_jump = false;
    1090:	e3003254 	movw	r3, #596	; 0x254
    1094:	e3403018 	movt	r3, #24
    1098:	e3a02000 	mov	r2, #0
    109c:	e5c32002 	strb	r2, [r3, #2]
                mario_fall = false;
    10a0:	e5c32012 	strb	r2, [r3, #18]
            }
        }
        mario_move_backward = false;
    10a4:	e3003254 	movw	r3, #596	; 0x254
    10a8:	e3403018 	movt	r3, #24
    10ac:	e3a02000 	mov	r2, #0
    10b0:	e5c32001 	strb	r2, [r3, #1]
        mario_move_forward = false;
    10b4:	e5c32000 	strb	r2, [r3]

        //gravitational falling of Mario
        if (!mario_jump && (mario_x + 20 < steps_1_low_x || mario_x + 5 > steps_1_high_x) && (mario_x + 20 < pipe_1_low_x || mario_x + 5 > pipe_1_high_x) && mario_y + 25 < LOWEST_Y){
    10b8:	e5d33002 	ldrb	r3, [r3, #2]
    10bc:	e1530002 	cmp	r3, r2
    10c0:	1a00028d 	bne	1afc <mario_update_location+0xec4>
    10c4:	e30333d0 	movw	r3, #13264	; 0x33d0
    10c8:	e3403000 	movt	r3, #0
    10cc:	e5932004 	ldr	r2, [r3, #4]
    10d0:	e2821014 	add	r1, r2, #20
    10d4:	e5933064 	ldr	r3, [r3, #100]	; 0x64
    10d8:	e1510003 	cmp	r1, r3
    10dc:	ba000005 	blt	10f8 <mario_update_location+0x4c0>
    10e0:	e2820005 	add	r0, r2, #5
    10e4:	e30333d0 	movw	r3, #13264	; 0x33d0
    10e8:	e3403000 	movt	r3, #0
    10ec:	e5933084 	ldr	r3, [r3, #132]	; 0x84
    10f0:	e1500003 	cmp	r0, r3
    10f4:	da000280 	ble	1afc <mario_update_location+0xec4>
    10f8:	e30333d0 	movw	r3, #13264	; 0x33d0
    10fc:	e3403000 	movt	r3, #0
    1100:	e5933074 	ldr	r3, [r3, #116]	; 0x74
    1104:	e1510003 	cmp	r1, r3
    1108:	ba000005 	blt	1124 <mario_update_location+0x4ec>
    110c:	e2822005 	add	r2, r2, #5
    1110:	e30333d0 	movw	r3, #13264	; 0x33d0
    1114:	e3403000 	movt	r3, #0
    1118:	e5933080 	ldr	r3, [r3, #128]	; 0x80
    111c:	e1520003 	cmp	r2, r3
    1120:	da000275 	ble	1afc <mario_update_location+0xec4>
    1124:	e30333d0 	movw	r3, #13264	; 0x33d0
    1128:	e3403000 	movt	r3, #0
    112c:	e5933008 	ldr	r3, [r3, #8]
    1130:	e2833019 	add	r3, r3, #25
    1134:	e35300c9 	cmp	r3, #201	; 0xc9
    1138:	ca00026f 	bgt	1afc <mario_update_location+0xec4>
            beat_mushroom();
    113c:	ebfffe96 	bl	b9c <beat_mushroom>
            mario_y += GRAVITY_FALL;
    1140:	e30333d0 	movw	r3, #13264	; 0x33d0
    1144:	e3403000 	movt	r3, #0
    1148:	e5933008 	ldr	r3, [r3, #8]
            if (mario_y + GRAVITY_FALL >= LOWEST_Y - 25){
    114c:	e2832028 	add	r2, r3, #40	; 0x28
    1150:	e35200b0 	cmp	r2, #176	; 0xb0
        mario_move_forward = false;

        //gravitational falling of Mario
        if (!mario_jump && (mario_x + 20 < steps_1_low_x || mario_x + 5 > steps_1_high_x) && (mario_x + 20 < pipe_1_low_x || mario_x + 5 > pipe_1_high_x) && mario_y + 25 < LOWEST_Y){
            beat_mushroom();
            mario_y += GRAVITY_FALL;
    1154:	d30323d0 	movwle	r2, #13264	; 0x33d0
    1158:	d3402000 	movtle	r2, #0
    115c:	d2833014 	addle	r3, r3, #20
    1160:	d5823008 	strle	r3, [r2, #8]
            if (mario_y + GRAVITY_FALL >= LOWEST_Y - 25){
                mario_y = LOWEST_Y - 25;
    1164:	c30333d0 	movwgt	r3, #13264	; 0x33d0
    1168:	c3403000 	movtgt	r3, #0
    116c:	c3a020b1 	movgt	r2, #177	; 0xb1
    1170:	c5832008 	strgt	r2, [r3, #8]
    1174:	ea000260 	b	1afc <mario_update_location+0xec4>
            }
        } 
    } else if (map_num == 2){
    1178:	e3530002 	cmp	r3, #2
    117c:	1a0001b0 	bne	1844 <mario_update_location+0xc0c>
        //control mario depends on different flags
        if (mario_move_forward && (mario_x + 25 <= pipe_2_L_low_x || mario_x > pipe_2_L_low_x || mario_y + 25 <= pipe_2_L_y)
    1180:	e3003254 	movw	r3, #596	; 0x254
    1184:	e3403018 	movt	r3, #24
    1188:	e5d33000 	ldrb	r3, [r3]
    118c:	e3530000 	cmp	r3, #0
    1190:	0a000023 	beq	1224 <mario_update_location+0x5ec>
    1194:	e30333d0 	movw	r3, #13264	; 0x33d0
    1198:	e3403000 	movt	r3, #0
    119c:	e5932004 	ldr	r2, [r3, #4]
    11a0:	e2821019 	add	r1, r2, #25
    11a4:	e593308c 	ldr	r3, [r3, #140]	; 0x8c
    11a8:	e1510003 	cmp	r1, r3
    11ac:	da000008 	ble	11d4 <mario_update_location+0x59c>
    11b0:	e1520003 	cmp	r2, r3
    11b4:	ca000006 	bgt	11d4 <mario_update_location+0x59c>
    11b8:	e30333d0 	movw	r3, #13264	; 0x33d0
    11bc:	e3403000 	movt	r3, #0
    11c0:	e5930008 	ldr	r0, [r3, #8]
    11c4:	e2800019 	add	r0, r0, #25
    11c8:	e5933090 	ldr	r3, [r3, #144]	; 0x90
    11cc:	e1500003 	cmp	r0, r3
    11d0:	ca000013 	bgt	1224 <mario_update_location+0x5ec>
                               && (mario_x + 25 <= pipe_2_R_low_x || mario_x > pipe_2_R_low_x || mario_y + 25 <= pipe_2_R_y)){
    11d4:	e30333d0 	movw	r3, #13264	; 0x33d0
    11d8:	e3403000 	movt	r3, #0
    11dc:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
    11e0:	e1510003 	cmp	r1, r3
    11e4:	da000008 	ble	120c <mario_update_location+0x5d4>
    11e8:	e1520003 	cmp	r2, r3
    11ec:	ca000006 	bgt	120c <mario_update_location+0x5d4>
    11f0:	e30333d0 	movw	r3, #13264	; 0x33d0
    11f4:	e3403000 	movt	r3, #0
    11f8:	e5931008 	ldr	r1, [r3, #8]
    11fc:	e2811019 	add	r1, r1, #25
    1200:	e5933094 	ldr	r3, [r3, #148]	; 0x94
    1204:	e1510003 	cmp	r1, r3
    1208:	ca000005 	bgt	1224 <mario_update_location+0x5ec>
            mario_x += MARIO_RUN_SPEED;
    120c:	e30333d0 	movw	r3, #13264	; 0x33d0
    1210:	e3403000 	movt	r3, #0
    1214:	e2822002 	add	r2, r2, #2
    1218:	e5832004 	str	r2, [r3, #4]
            is_mario_moving_forward = true;
    121c:	e3a02001 	mov	r2, #1
    1220:	e5c3207c 	strb	r2, [r3, #124]	; 0x7c
        } 
        if (mario_move_backward && (mario_x >= pipe_2_L_high_x || mario_x < pipe_2_L_high_x || mario_y + 25 <= pipe_2_L_y)
    1224:	e3003254 	movw	r3, #596	; 0x254
    1228:	e3403018 	movt	r3, #24
    122c:	e5d33001 	ldrb	r3, [r3, #1]
    1230:	e3530000 	cmp	r3, #0
    1234:	0a000006 	beq	1254 <mario_update_location+0x61c>
                                && (mario_x >= pipe_2_R_high_x || mario_x < pipe_2_R_high_x || mario_y + 25 <= pipe_2_R_y)){
            mario_x -= MARIO_RUN_SPEED;
    1238:	e30333d0 	movw	r3, #13264	; 0x33d0
    123c:	e3403000 	movt	r3, #0
    1240:	e5932004 	ldr	r2, [r3, #4]
    1244:	e2422002 	sub	r2, r2, #2
    1248:	e5832004 	str	r2, [r3, #4]
            is_mario_moving_forward = false;
    124c:	e3a02000 	mov	r2, #0
    1250:	e5c3207c 	strb	r2, [r3, #124]	; 0x7c
        }
        if (mario_jump){
    1254:	e3003254 	movw	r3, #596	; 0x254
    1258:	e3403018 	movt	r3, #24
    125c:	e5d33002 	ldrb	r3, [r3, #2]
    1260:	e3530000 	cmp	r3, #0
    1264:	0a00009e 	beq	14e4 <mario_update_location+0x8ac>
            //if under left steps
            if (steps_2_L_low_x <= mario_x + MARIO_MID && mario_x + MARIO_MID <= steps_2_L_high_x && mario_y > steps_2_L_y){
    1268:	e30363d0 	movw	r6, #13264	; 0x33d0
    126c:	e3406000 	movt	r6, #0
    1270:	e5960004 	ldr	r0, [r6, #4]
    1274:	eb00056e 	bl	2834 <__aeabi_i2d>
    1278:	e3a02000 	mov	r2, #0
    127c:	e3a03000 	mov	r3, #0
    1280:	e3443029 	movt	r3, #16425	; 0x4029
    1284:	eb00049d 	bl	2500 <__adddf3>
    1288:	e1a04000 	mov	r4, r0
    128c:	e1a05001 	mov	r5, r1
    1290:	e5960058 	ldr	r0, [r6, #88]	; 0x58
    1294:	eb000566 	bl	2834 <__aeabi_i2d>
    1298:	e1a02004 	mov	r2, r4
    129c:	e1a03005 	mov	r3, r5
    12a0:	eb000700 	bl	2ea8 <__aeabi_dcmple>
    12a4:	e3500000 	cmp	r0, #0
    12a8:	0a00001d 	beq	1324 <mario_update_location+0x6ec>
    12ac:	e596005c 	ldr	r0, [r6, #92]	; 0x5c
    12b0:	eb00055f 	bl	2834 <__aeabi_i2d>
    12b4:	e1a02000 	mov	r2, r0
    12b8:	e1a03001 	mov	r3, r1
    12bc:	e1a00004 	mov	r0, r4
    12c0:	e1a01005 	mov	r1, r5
    12c4:	eb0006f7 	bl	2ea8 <__aeabi_dcmple>
    12c8:	e3500000 	cmp	r0, #0
    12cc:	0a000014 	beq	1324 <mario_update_location+0x6ec>
    12d0:	e5962008 	ldr	r2, [r6, #8]
    12d4:	e5963098 	ldr	r3, [r6, #152]	; 0x98
    12d8:	e1520003 	cmp	r2, r3
    12dc:	da000010 	ble	1324 <mario_update_location+0x6ec>
                if (!mario_fall && mario_y > steps_2_L_y + 25){
    12e0:	e3001254 	movw	r1, #596	; 0x254
    12e4:	e3401018 	movt	r1, #24
    12e8:	e5d11012 	ldrb	r1, [r1, #18]
    12ec:	e3510000 	cmp	r1, #0
    12f0:	1a000004 	bne	1308 <mario_update_location+0x6d0>
    12f4:	e2833019 	add	r3, r3, #25
    12f8:	e1520003 	cmp	r2, r3
                    mario_y -= MARIO_JUMP_SPEED;
    12fc:	c2422001 	subgt	r2, r2, #1
    1300:	c5862008 	strgt	r2, [r6, #8]
    1304:	ca00006a 	bgt	14b4 <mario_update_location+0x87c>
                } else{
                    mario_fall = true;
    1308:	e3003254 	movw	r3, #596	; 0x254
    130c:	e3403018 	movt	r3, #24
    1310:	e3a02001 	mov	r2, #1
    1314:	e5c32012 	strb	r2, [r3, #18]
                    mario_jumped = 0;
    1318:	e3a02000 	mov	r2, #0
    131c:	e5832014 	str	r2, [r3, #20]
    1320:	ea000063 	b	14b4 <mario_update_location+0x87c>
                }
            } else if (steps_2_R_low_x <= mario_x + MARIO_MID && mario_x + MARIO_MID <= steps_2_R_high_x && mario_y > steps_2_R_y){ //if under right step
    1324:	e30333d0 	movw	r3, #13264	; 0x33d0
    1328:	e3403000 	movt	r3, #0
    132c:	e5930054 	ldr	r0, [r3, #84]	; 0x54
    1330:	eb00053f 	bl	2834 <__aeabi_i2d>
    1334:	e1a02000 	mov	r2, r0
    1338:	e1a03001 	mov	r3, r1
    133c:	e1a00004 	mov	r0, r4
    1340:	e1a01005 	mov	r1, r5
    1344:	eb0006dd 	bl	2ec0 <__aeabi_dcmpge>
    1348:	e3500000 	cmp	r0, #0
    134c:	0a00003e 	beq	144c <mario_update_location+0x814>
    1350:	e30333d0 	movw	r3, #13264	; 0x33d0
    1354:	e3403000 	movt	r3, #0
    1358:	e593009c 	ldr	r0, [r3, #156]	; 0x9c
    135c:	eb000534 	bl	2834 <__aeabi_i2d>
    1360:	e1a02000 	mov	r2, r0
    1364:	e1a03001 	mov	r3, r1
    1368:	e1a00004 	mov	r0, r4
    136c:	e1a01005 	mov	r1, r5
    1370:	eb0006cc 	bl	2ea8 <__aeabi_dcmple>
    1374:	e3500000 	cmp	r0, #0
    1378:	0a000033 	beq	144c <mario_update_location+0x814>
    137c:	e30333d0 	movw	r3, #13264	; 0x33d0
    1380:	e3403000 	movt	r3, #0
    1384:	e5932008 	ldr	r2, [r3, #8]
    1388:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
    138c:	e1520003 	cmp	r2, r3
    1390:	da00002d 	ble	144c <mario_update_location+0x814>
                if (!mario_fall && mario_y > steps_2_R_y + 25){
    1394:	e3001254 	movw	r1, #596	; 0x254
    1398:	e3401018 	movt	r1, #24
    139c:	e5d11012 	ldrb	r1, [r1, #18]
    13a0:	e3510000 	cmp	r1, #0
    13a4:	1a000007 	bne	13c8 <mario_update_location+0x790>
    13a8:	e2833019 	add	r3, r3, #25
    13ac:	e1520003 	cmp	r2, r3
    13b0:	da000004 	ble	13c8 <mario_update_location+0x790>
                    mario_y -= MARIO_JUMP_SPEED;
    13b4:	e30333d0 	movw	r3, #13264	; 0x33d0
    13b8:	e3403000 	movt	r3, #0
    13bc:	e2422001 	sub	r2, r2, #1
    13c0:	e5832008 	str	r2, [r3, #8]
    13c4:	ea00003a 	b	14b4 <mario_update_location+0x87c>
                } else{
                    mario_fall = true;
    13c8:	e3003254 	movw	r3, #596	; 0x254
    13cc:	e3403018 	movt	r3, #24
    13d0:	e3a02001 	mov	r2, #1
    13d4:	e5c32012 	strb	r2, [r3, #18]
                    mario_jumped = 0;
    13d8:	e3a06000 	mov	r6, #0
    13dc:	e5836014 	str	r6, [r3, #20]
        isGameOver = true;
    }
}


void mario_update_location(){
    13e0:	e59f89b4 	ldr	r8, [pc, #2484]	; 1d9c <mario_update_location+0x1164>
                    mario_fall = true;
                    mario_jumped = 0;
                    for (int i = 0; i < 3; i++)
                    {
                        if (mario_x + MARIO_MID >= money_x[i] && mario_x + MARIO_MID <= money_x[i] + 16){
                            isMoney[i] = true;
    13e4:	e1a0a003 	mov	r10, r3
    13e8:	e1a09002 	mov	r9, r2
                } else{
                    mario_fall = true;
                    mario_jumped = 0;
                    for (int i = 0; i < 3; i++)
                    {
                        if (mario_x + MARIO_MID >= money_x[i] && mario_x + MARIO_MID <= money_x[i] + 16){
    13ec:	e5b87004 	ldr	r7, [r8, #4]!
    13f0:	e1a00007 	mov	r0, r7
    13f4:	eb00050e 	bl	2834 <__aeabi_i2d>
    13f8:	e1a02000 	mov	r2, r0
    13fc:	e1a03001 	mov	r3, r1
    1400:	e1a00004 	mov	r0, r4
    1404:	e1a01005 	mov	r1, r5
    1408:	eb0006ac 	bl	2ec0 <__aeabi_dcmpge>
    140c:	e3500000 	cmp	r0, #0
    1410:	0a000009 	beq	143c <mario_update_location+0x804>
    1414:	e2870010 	add	r0, r7, #16
    1418:	eb000505 	bl	2834 <__aeabi_i2d>
    141c:	e1a02000 	mov	r2, r0
    1420:	e1a03001 	mov	r3, r1
    1424:	e1a00004 	mov	r0, r4
    1428:	e1a01005 	mov	r1, r5
    142c:	eb00069d 	bl	2ea8 <__aeabi_dcmple>
    1430:	e3500000 	cmp	r0, #0
                            isMoney[i] = true;
    1434:	128a3008 	addne	r3, r10, #8
    1438:	17c69003 	strbne	r9, [r6, r3]
                if (!mario_fall && mario_y > steps_2_R_y + 25){
                    mario_y -= MARIO_JUMP_SPEED;
                } else{
                    mario_fall = true;
                    mario_jumped = 0;
                    for (int i = 0; i < 3; i++)
    143c:	e2866001 	add	r6, r6, #1
    1440:	e3560003 	cmp	r6, #3
    1444:	1affffe8 	bne	13ec <mario_update_location+0x7b4>
    1448:	ea000019 	b	14b4 <mario_update_location+0x87c>
                            isMoney[i] = true;
                        }
                    }
                    
                }
            }else if (!mario_fall && mario_jumped < MARIO_JUMP_HIGHT){
    144c:	e3003254 	movw	r3, #596	; 0x254
    1450:	e3403018 	movt	r3, #24
    1454:	e5d33012 	ldrb	r3, [r3, #18]
    1458:	e3530000 	cmp	r3, #0
    145c:	1a00000e 	bne	149c <mario_update_location+0x864>
    1460:	e3003254 	movw	r3, #596	; 0x254
    1464:	e3403018 	movt	r3, #24
    1468:	e5933014 	ldr	r3, [r3, #20]
    146c:	e3530063 	cmp	r3, #99	; 0x63
    1470:	ca000009 	bgt	149c <mario_update_location+0x864>
                mario_y -= MARIO_JUMP_SPEED;
    1474:	e30323d0 	movw	r2, #13264	; 0x33d0
    1478:	e3402000 	movt	r2, #0
    147c:	e5921008 	ldr	r1, [r2, #8]
    1480:	e2411001 	sub	r1, r1, #1
    1484:	e5821008 	str	r1, [r2, #8]
                mario_jumped += MARIO_JUMP_SPEED;
    1488:	e3002254 	movw	r2, #596	; 0x254
    148c:	e3402018 	movt	r2, #24
    1490:	e2833001 	add	r3, r3, #1
    1494:	e5823014 	str	r3, [r2, #20]
    1498:	ea000005 	b	14b4 <mario_update_location+0x87c>
            } else{
                mario_fall = true;
    149c:	e3003254 	movw	r3, #596	; 0x254
    14a0:	e3403018 	movt	r3, #24
    14a4:	e3a02001 	mov	r2, #1
    14a8:	e5c32012 	strb	r2, [r3, #18]
                mario_jumped = 0;
    14ac:	e3a02000 	mov	r2, #0
    14b0:	e5832014 	str	r2, [r3, #20]
            }

            if (mario_fall){
    14b4:	e3003254 	movw	r3, #596	; 0x254
    14b8:	e3403018 	movt	r3, #24
    14bc:	e5d33012 	ldrb	r3, [r3, #18]
    14c0:	e3530000 	cmp	r3, #0
    14c4:	0a000092 	beq	1714 <mario_update_location+0xadc>
                beat_mushroom();
    14c8:	ebfffdb3 	bl	b9c <beat_mushroom>
                beat_turtle();
    14cc:	ebfffcd9 	bl	838 <beat_turtle>
                mario_y += GRAVITY_FALL;
    14d0:	e30333d0 	movw	r3, #13264	; 0x33d0
    14d4:	e3403000 	movt	r3, #0
    14d8:	e5932008 	ldr	r2, [r3, #8]
    14dc:	e2822014 	add	r2, r2, #20
    14e0:	e5832008 	str	r2, [r3, #8]
            }
        }
        //if not landing, cannot jump again
        //if on left steps
        if (mario_fall && steps_2_L_low_x < mario_x + 20 && mario_x + 5 < steps_2_L_high_x && mario_y + 25 <= steps_2_L_y + 20){
    14e4:	e3003254 	movw	r3, #596	; 0x254
    14e8:	e3403018 	movt	r3, #24
    14ec:	e5d33012 	ldrb	r3, [r3, #18]
    14f0:	e3530000 	cmp	r3, #0
    14f4:	0a000086 	beq	1714 <mario_update_location+0xadc>
    14f8:	e30333d0 	movw	r3, #13264	; 0x33d0
    14fc:	e3403000 	movt	r3, #0
    1500:	e5931004 	ldr	r1, [r3, #4]
    1504:	e2812014 	add	r2, r1, #20
    1508:	e5933058 	ldr	r3, [r3, #88]	; 0x58
    150c:	e1520003 	cmp	r2, r3
    1510:	da000019 	ble	157c <mario_update_location+0x944>
    1514:	e2810005 	add	r0, r1, #5
    1518:	e30333d0 	movw	r3, #13264	; 0x33d0
    151c:	e3403000 	movt	r3, #0
    1520:	e593305c 	ldr	r3, [r3, #92]	; 0x5c
    1524:	e1500003 	cmp	r0, r3
    1528:	aa000013 	bge	157c <mario_update_location+0x944>
    152c:	e30333d0 	movw	r3, #13264	; 0x33d0
    1530:	e3403000 	movt	r3, #0
    1534:	e5930008 	ldr	r0, [r3, #8]
    1538:	e2800019 	add	r0, r0, #25
    153c:	e5933098 	ldr	r3, [r3, #152]	; 0x98
    1540:	e283c014 	add	r12, r3, #20
    1544:	e150000c 	cmp	r0, r12
    1548:	ca00000b 	bgt	157c <mario_update_location+0x944>
            if (mario_y + 25 >= steps_2_L_y){
    154c:	e1500003 	cmp	r0, r3
    1550:	ba00006f 	blt	1714 <mario_update_location+0xadc>
                mario_y = steps_2_L_y - 25;
    1554:	e30323d0 	movw	r2, #13264	; 0x33d0
    1558:	e3402000 	movt	r2, #0
    155c:	e2433019 	sub	r3, r3, #25
    1560:	e5823008 	str	r3, [r2, #8]
                mario_jump = false;
    1564:	e3003254 	movw	r3, #596	; 0x254
    1568:	e3403018 	movt	r3, #24
    156c:	e3a02000 	mov	r2, #0
    1570:	e5c32002 	strb	r2, [r3, #2]
                mario_fall = false;
    1574:	e5c32012 	strb	r2, [r3, #18]
    1578:	ea000065 	b	1714 <mario_update_location+0xadc>
            }
        } else if (mario_fall && steps_2_R_low_x < mario_x + 20 && mario_x + 5 < steps_2_R_high_x && mario_y + 25 <= steps_2_R_y + 20){ // on right step
    157c:	e30333d0 	movw	r3, #13264	; 0x33d0
    1580:	e3403000 	movt	r3, #0
    1584:	e5933054 	ldr	r3, [r3, #84]	; 0x54
    1588:	e1520003 	cmp	r2, r3
    158c:	da000019 	ble	15f8 <mario_update_location+0x9c0>
    1590:	e2810005 	add	r0, r1, #5
    1594:	e30333d0 	movw	r3, #13264	; 0x33d0
    1598:	e3403000 	movt	r3, #0
    159c:	e593309c 	ldr	r3, [r3, #156]	; 0x9c
    15a0:	e1500003 	cmp	r0, r3
    15a4:	aa000013 	bge	15f8 <mario_update_location+0x9c0>
    15a8:	e30333d0 	movw	r3, #13264	; 0x33d0
    15ac:	e3403000 	movt	r3, #0
    15b0:	e5930008 	ldr	r0, [r3, #8]
    15b4:	e2800019 	add	r0, r0, #25
    15b8:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
    15bc:	e283c014 	add	r12, r3, #20
    15c0:	e150000c 	cmp	r0, r12
    15c4:	ca00000b 	bgt	15f8 <mario_update_location+0x9c0>
            if (mario_y + 25 >= steps_2_R_y){
    15c8:	e1500003 	cmp	r0, r3
    15cc:	ba000050 	blt	1714 <mario_update_location+0xadc>
                mario_y = steps_2_R_y - 25;
    15d0:	e30323d0 	movw	r2, #13264	; 0x33d0
    15d4:	e3402000 	movt	r2, #0
    15d8:	e2433019 	sub	r3, r3, #25
    15dc:	e5823008 	str	r3, [r2, #8]
                mario_jump = false;
    15e0:	e3003254 	movw	r3, #596	; 0x254
    15e4:	e3403018 	movt	r3, #24
    15e8:	e3a02000 	mov	r2, #0
    15ec:	e5c32002 	strb	r2, [r3, #2]
                mario_fall = false;
    15f0:	e5c32012 	strb	r2, [r3, #18]
    15f4:	ea000046 	b	1714 <mario_update_location+0xadc>
            }
        } else if (mario_fall && pipe_2_L_low_x < mario_x + 20 && mario_x + 5 < pipe_2_L_high_x){//if on left pipe 
    15f8:	e30333d0 	movw	r3, #13264	; 0x33d0
    15fc:	e3403000 	movt	r3, #0
    1600:	e593308c 	ldr	r3, [r3, #140]	; 0x8c
    1604:	e1520003 	cmp	r2, r3
    1608:	da000016 	ble	1668 <mario_update_location+0xa30>
    160c:	e2810005 	add	r0, r1, #5
    1610:	e30333d0 	movw	r3, #13264	; 0x33d0
    1614:	e3403000 	movt	r3, #0
    1618:	e5933068 	ldr	r3, [r3, #104]	; 0x68
    161c:	e1500003 	cmp	r0, r3
    1620:	aa000010 	bge	1668 <mario_update_location+0xa30>
            if (mario_y + 25 >= pipe_2_L_y){
    1624:	e30333d0 	movw	r3, #13264	; 0x33d0
    1628:	e3403000 	movt	r3, #0
    162c:	e5932090 	ldr	r2, [r3, #144]	; 0x90
    1630:	e5933008 	ldr	r3, [r3, #8]
    1634:	e2833019 	add	r3, r3, #25
    1638:	e1530002 	cmp	r3, r2
    163c:	ba000034 	blt	1714 <mario_update_location+0xadc>
                mario_y = pipe_2_L_y - 25;
    1640:	e30333d0 	movw	r3, #13264	; 0x33d0
    1644:	e3403000 	movt	r3, #0
    1648:	e2422019 	sub	r2, r2, #25
    164c:	e5832008 	str	r2, [r3, #8]
                mario_jump = false;
    1650:	e3003254 	movw	r3, #596	; 0x254
    1654:	e3403018 	movt	r3, #24
    1658:	e3a02000 	mov	r2, #0
    165c:	e5c32002 	strb	r2, [r3, #2]
                mario_fall = false;
    1660:	e5c32012 	strb	r2, [r3, #18]
    1664:	ea00002a 	b	1714 <mario_update_location+0xadc>
            }
        } else if (mario_fall && pipe_2_R_low_x < mario_x + 20 && mario_x + 5 < pipe_2_R_high_x){//if on right pipe 
    1668:	e30333d0 	movw	r3, #13264	; 0x33d0
    166c:	e3403000 	movt	r3, #0
    1670:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
    1674:	e1520003 	cmp	r2, r3
    1678:	da000016 	ble	16d8 <mario_update_location+0xaa0>
    167c:	e2811005 	add	r1, r1, #5
    1680:	e30333d0 	movw	r3, #13264	; 0x33d0
    1684:	e3403000 	movt	r3, #0
    1688:	e59330a4 	ldr	r3, [r3, #164]	; 0xa4
    168c:	e1510003 	cmp	r1, r3
    1690:	aa000010 	bge	16d8 <mario_update_location+0xaa0>
            if (mario_y + 25 >= pipe_2_R_y){
    1694:	e30333d0 	movw	r3, #13264	; 0x33d0
    1698:	e3403000 	movt	r3, #0
    169c:	e5932094 	ldr	r2, [r3, #148]	; 0x94
    16a0:	e5933008 	ldr	r3, [r3, #8]
    16a4:	e2833019 	add	r3, r3, #25
    16a8:	e1530002 	cmp	r3, r2
    16ac:	ba000018 	blt	1714 <mario_update_location+0xadc>
                mario_y = pipe_2_R_y - 25;
    16b0:	e30333d0 	movw	r3, #13264	; 0x33d0
    16b4:	e3403000 	movt	r3, #0
    16b8:	e2422019 	sub	r2, r2, #25
    16bc:	e5832008 	str	r2, [r3, #8]
                mario_jump = false;
    16c0:	e3003254 	movw	r3, #596	; 0x254
    16c4:	e3403018 	movt	r3, #24
    16c8:	e3a02000 	mov	r2, #0
    16cc:	e5c32002 	strb	r2, [r3, #2]
                mario_fall = false;
    16d0:	e5c32012 	strb	r2, [r3, #18]
    16d4:	ea00000e 	b	1714 <mario_update_location+0xadc>
            }
        } else if (mario_fall){
            if (mario_y + 25 >= LOWEST_Y){
    16d8:	e30333d0 	movw	r3, #13264	; 0x33d0
    16dc:	e3403000 	movt	r3, #0
    16e0:	e5933008 	ldr	r3, [r3, #8]
    16e4:	e2833019 	add	r3, r3, #25
    16e8:	e35300c9 	cmp	r3, #201	; 0xc9
    16ec:	da000008 	ble	1714 <mario_update_location+0xadc>
                mario_y = LOWEST_Y - 25;
    16f0:	e30333d0 	movw	r3, #13264	; 0x33d0
    16f4:	e3403000 	movt	r3, #0
    16f8:	e3a020b1 	mov	r2, #177	; 0xb1
    16fc:	e5832008 	str	r2, [r3, #8]
                mario_jump = false;
    1700:	e3003254 	movw	r3, #596	; 0x254
    1704:	e3403018 	movt	r3, #24
    1708:	e3a02000 	mov	r2, #0
    170c:	e5c32002 	strb	r2, [r3, #2]
                mario_fall = false;
    1710:	e5c32012 	strb	r2, [r3, #18]
            }
        }
        mario_move_backward = false;
    1714:	e3003254 	movw	r3, #596	; 0x254
    1718:	e3403018 	movt	r3, #24
    171c:	e3a02000 	mov	r2, #0
    1720:	e5c32001 	strb	r2, [r3, #1]
        mario_move_forward = false;
    1724:	e5c32000 	strb	r2, [r3]

        //gravitational falling of Mario
        if (!mario_jump && (mario_x + 20 < steps_2_L_low_x || mario_x + 5 > steps_2_L_high_x) 
    1728:	e5d33002 	ldrb	r3, [r3, #2]
    172c:	e1530002 	cmp	r3, r2
    1730:	1a0000f1 	bne	1afc <mario_update_location+0xec4>
    1734:	e30333d0 	movw	r3, #13264	; 0x33d0
    1738:	e3403000 	movt	r3, #0
    173c:	e5931004 	ldr	r1, [r3, #4]
    1740:	e2812014 	add	r2, r1, #20
    1744:	e5933058 	ldr	r3, [r3, #88]	; 0x58
    1748:	e1520003 	cmp	r2, r3
    174c:	ba000005 	blt	1768 <mario_update_location+0xb30>
    1750:	e2810005 	add	r0, r1, #5
    1754:	e30333d0 	movw	r3, #13264	; 0x33d0
    1758:	e3403000 	movt	r3, #0
    175c:	e593305c 	ldr	r3, [r3, #92]	; 0x5c
    1760:	e1500003 	cmp	r0, r3
    1764:	da0000e4 	ble	1afc <mario_update_location+0xec4>
                        && (mario_x + 20 < steps_2_R_low_x || mario_x + 5 > steps_2_R_high_x) 
    1768:	e30333d0 	movw	r3, #13264	; 0x33d0
    176c:	e3403000 	movt	r3, #0
    1770:	e5933054 	ldr	r3, [r3, #84]	; 0x54
    1774:	e1520003 	cmp	r2, r3
    1778:	ba000005 	blt	1794 <mario_update_location+0xb5c>
    177c:	e2810005 	add	r0, r1, #5
    1780:	e30333d0 	movw	r3, #13264	; 0x33d0
    1784:	e3403000 	movt	r3, #0
    1788:	e593309c 	ldr	r3, [r3, #156]	; 0x9c
    178c:	e1500003 	cmp	r0, r3
    1790:	da0000d9 	ble	1afc <mario_update_location+0xec4>
                        && (mario_x + 20 < pipe_2_L_low_x || mario_x + 5 > pipe_2_L_high_x) 
    1794:	e30333d0 	movw	r3, #13264	; 0x33d0
    1798:	e3403000 	movt	r3, #0
    179c:	e593308c 	ldr	r3, [r3, #140]	; 0x8c
    17a0:	e1520003 	cmp	r2, r3
    17a4:	ba000005 	blt	17c0 <mario_update_location+0xb88>
    17a8:	e2810005 	add	r0, r1, #5
    17ac:	e30333d0 	movw	r3, #13264	; 0x33d0
    17b0:	e3403000 	movt	r3, #0
    17b4:	e5933068 	ldr	r3, [r3, #104]	; 0x68
    17b8:	e1500003 	cmp	r0, r3
    17bc:	da0000ce 	ble	1afc <mario_update_location+0xec4>
                        && (mario_x + 20 < pipe_2_R_low_x || mario_x + 5 > pipe_2_R_high_x) 
    17c0:	e30333d0 	movw	r3, #13264	; 0x33d0
    17c4:	e3403000 	movt	r3, #0
    17c8:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
    17cc:	e1520003 	cmp	r2, r3
    17d0:	ba000005 	blt	17ec <mario_update_location+0xbb4>
    17d4:	e2811005 	add	r1, r1, #5
    17d8:	e30333d0 	movw	r3, #13264	; 0x33d0
    17dc:	e3403000 	movt	r3, #0
    17e0:	e59330a4 	ldr	r3, [r3, #164]	; 0xa4
    17e4:	e1510003 	cmp	r1, r3
    17e8:	da0000c3 	ble	1afc <mario_update_location+0xec4>
                        && mario_y + 25 < LOWEST_Y){
    17ec:	e30333d0 	movw	r3, #13264	; 0x33d0
    17f0:	e3403000 	movt	r3, #0
    17f4:	e5933008 	ldr	r3, [r3, #8]
    17f8:	e2833019 	add	r3, r3, #25
    17fc:	e35300c9 	cmp	r3, #201	; 0xc9
    1800:	ca0000bd 	bgt	1afc <mario_update_location+0xec4>
            beat_mushroom();
    1804:	ebfffce4 	bl	b9c <beat_mushroom>
            beat_turtle();
    1808:	ebfffc0a 	bl	838 <beat_turtle>
            mario_y += GRAVITY_FALL;
    180c:	e30333d0 	movw	r3, #13264	; 0x33d0
    1810:	e3403000 	movt	r3, #0
    1814:	e5933008 	ldr	r3, [r3, #8]
            if (mario_y + GRAVITY_FALL >= LOWEST_Y - 25){
    1818:	e2832028 	add	r2, r3, #40	; 0x28
    181c:	e35200b0 	cmp	r2, #176	; 0xb0
                        && (mario_x + 20 < pipe_2_L_low_x || mario_x + 5 > pipe_2_L_high_x) 
                        && (mario_x + 20 < pipe_2_R_low_x || mario_x + 5 > pipe_2_R_high_x) 
                        && mario_y + 25 < LOWEST_Y){
            beat_mushroom();
            beat_turtle();
            mario_y += GRAVITY_FALL;
    1820:	d30323d0 	movwle	r2, #13264	; 0x33d0
    1824:	d3402000 	movtle	r2, #0
    1828:	d2833014 	addle	r3, r3, #20
    182c:	d5823008 	strle	r3, [r2, #8]
            if (mario_y + GRAVITY_FALL >= LOWEST_Y - 25){
                mario_y = LOWEST_Y - 25;
    1830:	c30333d0 	movwgt	r3, #13264	; 0x33d0
    1834:	c3403000 	movtgt	r3, #0
    1838:	c3a020b1 	movgt	r2, #177	; 0xb1
    183c:	c5832008 	strgt	r2, [r3, #8]
    1840:	ea0000ad 	b	1afc <mario_update_location+0xec4>
            }
        } 
    } else if (map_num == 3){
    1844:	e3530003 	cmp	r3, #3
    1848:	1a0000ab 	bne	1afc <mario_update_location+0xec4>
        //control mario depends on different flags
        if (mario_move_forward && (mario_x + 25 <= pipe_3_low_x || mario_x > pipe_3_low_x || mario_y + 25 <= pipe_3_y)){
    184c:	e3003254 	movw	r3, #596	; 0x254
    1850:	e3403018 	movt	r3, #24
    1854:	e5d33000 	ldrb	r3, [r3]
    1858:	e3530000 	cmp	r3, #0
    185c:	0a000015 	beq	18b8 <mario_update_location+0xc80>
    1860:	e30333d0 	movw	r3, #13264	; 0x33d0
    1864:	e3403000 	movt	r3, #0
    1868:	e5932004 	ldr	r2, [r3, #4]
    186c:	e59330a8 	ldr	r3, [r3, #168]	; 0xa8
    1870:	e2821019 	add	r1, r2, #25
    1874:	e1510003 	cmp	r1, r3
    1878:	da000008 	ble	18a0 <mario_update_location+0xc68>
    187c:	e1520003 	cmp	r2, r3
    1880:	ca000006 	bgt	18a0 <mario_update_location+0xc68>
    1884:	e30333d0 	movw	r3, #13264	; 0x33d0
    1888:	e3403000 	movt	r3, #0
    188c:	e5931008 	ldr	r1, [r3, #8]
    1890:	e2811019 	add	r1, r1, #25
    1894:	e59330ac 	ldr	r3, [r3, #172]	; 0xac
    1898:	e1510003 	cmp	r1, r3
    189c:	ca000005 	bgt	18b8 <mario_update_location+0xc80>
            mario_x += MARIO_RUN_SPEED;
    18a0:	e30333d0 	movw	r3, #13264	; 0x33d0
    18a4:	e3403000 	movt	r3, #0
    18a8:	e2822002 	add	r2, r2, #2
    18ac:	e5832004 	str	r2, [r3, #4]
            is_mario_moving_forward = true;
    18b0:	e3a02001 	mov	r2, #1
    18b4:	e5c3207c 	strb	r2, [r3, #124]	; 0x7c
        } 
        if (mario_move_backward && (mario_x >= pipe_3_high_x || mario_x < pipe_3_high_x || mario_y + 25 <= pipe_3_y)){
    18b8:	e3003254 	movw	r3, #596	; 0x254
    18bc:	e3403018 	movt	r3, #24
    18c0:	e5d33001 	ldrb	r3, [r3, #1]
    18c4:	e3530000 	cmp	r3, #0
    18c8:	0a000006 	beq	18e8 <mario_update_location+0xcb0>
            mario_x -= MARIO_RUN_SPEED;
    18cc:	e30333d0 	movw	r3, #13264	; 0x33d0
    18d0:	e3403000 	movt	r3, #0
    18d4:	e5932004 	ldr	r2, [r3, #4]
    18d8:	e2422002 	sub	r2, r2, #2
    18dc:	e5832004 	str	r2, [r3, #4]
            is_mario_moving_forward = false;
    18e0:	e3a02000 	mov	r2, #0
    18e4:	e5c3207c 	strb	r2, [r3, #124]	; 0x7c
        }
        if (mario_jump){
    18e8:	e3003254 	movw	r3, #596	; 0x254
    18ec:	e3403018 	movt	r3, #24
    18f0:	e5d33002 	ldrb	r3, [r3, #2]
    18f4:	e3530000 	cmp	r3, #0
    18f8:	0a000024 	beq	1990 <mario_update_location+0xd58>
            if (!mario_fall && mario_jumped < MARIO_JUMP_HIGHT){
    18fc:	e3003254 	movw	r3, #596	; 0x254
    1900:	e3403018 	movt	r3, #24
    1904:	e5d33012 	ldrb	r3, [r3, #18]
    1908:	e3530000 	cmp	r3, #0
    190c:	1a00000e 	bne	194c <mario_update_location+0xd14>
    1910:	e3003254 	movw	r3, #596	; 0x254
    1914:	e3403018 	movt	r3, #24
    1918:	e5933014 	ldr	r3, [r3, #20]
    191c:	e3530063 	cmp	r3, #99	; 0x63
    1920:	ca000009 	bgt	194c <mario_update_location+0xd14>
                mario_y -= MARIO_JUMP_SPEED;
    1924:	e30323d0 	movw	r2, #13264	; 0x33d0
    1928:	e3402000 	movt	r2, #0
    192c:	e5921008 	ldr	r1, [r2, #8]
    1930:	e2411001 	sub	r1, r1, #1
    1934:	e5821008 	str	r1, [r2, #8]
                mario_jumped += MARIO_JUMP_SPEED;
    1938:	e3002254 	movw	r2, #596	; 0x254
    193c:	e3402018 	movt	r2, #24
    1940:	e2833001 	add	r3, r3, #1
    1944:	e5823014 	str	r3, [r2, #20]
    1948:	ea000005 	b	1964 <mario_update_location+0xd2c>
            } else{
                mario_fall = true;
    194c:	e3003254 	movw	r3, #596	; 0x254
    1950:	e3403018 	movt	r3, #24
    1954:	e3a02001 	mov	r2, #1
    1958:	e5c32012 	strb	r2, [r3, #18]
                mario_jumped = 0;
    195c:	e3a02000 	mov	r2, #0
    1960:	e5832014 	str	r2, [r3, #20]
            }

            if (mario_fall){
    1964:	e3003254 	movw	r3, #596	; 0x254
    1968:	e3403018 	movt	r3, #24
    196c:	e5d33012 	ldrb	r3, [r3, #18]
    1970:	e3530000 	cmp	r3, #0
    1974:	0a000037 	beq	1a58 <mario_update_location+0xe20>
                beat_mushroom();
    1978:	ebfffc87 	bl	b9c <beat_mushroom>
                mario_y += GRAVITY_FALL;
    197c:	e30333d0 	movw	r3, #13264	; 0x33d0
    1980:	e3403000 	movt	r3, #0
    1984:	e5932008 	ldr	r2, [r3, #8]
    1988:	e2822014 	add	r2, r2, #20
    198c:	e5832008 	str	r2, [r3, #8]
            }
        }
        //if not landing, cannot jump again
        if (mario_fall && pipe_3_low_x < mario_x + 20 && mario_x + 5 < pipe_3_high_x){//if on right pipe 
    1990:	e3003254 	movw	r3, #596	; 0x254
    1994:	e3403018 	movt	r3, #24
    1998:	e5d33012 	ldrb	r3, [r3, #18]
    199c:	e3530000 	cmp	r3, #0
    19a0:	0a00002c 	beq	1a58 <mario_update_location+0xe20>
    19a4:	e30333d0 	movw	r3, #13264	; 0x33d0
    19a8:	e3403000 	movt	r3, #0
    19ac:	e5932004 	ldr	r2, [r3, #4]
    19b0:	e2821014 	add	r1, r2, #20
    19b4:	e59330a8 	ldr	r3, [r3, #168]	; 0xa8
    19b8:	e1510003 	cmp	r1, r3
    19bc:	da000016 	ble	1a1c <mario_update_location+0xde4>
    19c0:	e2822005 	add	r2, r2, #5
    19c4:	e30333d0 	movw	r3, #13264	; 0x33d0
    19c8:	e3403000 	movt	r3, #0
    19cc:	e5933070 	ldr	r3, [r3, #112]	; 0x70
    19d0:	e1520003 	cmp	r2, r3
    19d4:	aa000010 	bge	1a1c <mario_update_location+0xde4>
            if (mario_y + 25 >= pipe_3_y){
    19d8:	e30333d0 	movw	r3, #13264	; 0x33d0
    19dc:	e3403000 	movt	r3, #0
    19e0:	e59320ac 	ldr	r2, [r3, #172]	; 0xac
    19e4:	e5933008 	ldr	r3, [r3, #8]
    19e8:	e2833019 	add	r3, r3, #25
    19ec:	e1530002 	cmp	r3, r2
    19f0:	ba000018 	blt	1a58 <mario_update_location+0xe20>
                mario_y = pipe_3_y - 25;
    19f4:	e30333d0 	movw	r3, #13264	; 0x33d0
    19f8:	e3403000 	movt	r3, #0
    19fc:	e2422019 	sub	r2, r2, #25
    1a00:	e5832008 	str	r2, [r3, #8]
                mario_jump = false;
    1a04:	e3003254 	movw	r3, #596	; 0x254
    1a08:	e3403018 	movt	r3, #24
    1a0c:	e3a02000 	mov	r2, #0
    1a10:	e5c32002 	strb	r2, [r3, #2]
                mario_fall = false;
    1a14:	e5c32012 	strb	r2, [r3, #18]
    1a18:	ea00000e 	b	1a58 <mario_update_location+0xe20>
            }
        } else if (mario_fall){
            if (mario_y + 25 >= LOWEST_Y){
    1a1c:	e30333d0 	movw	r3, #13264	; 0x33d0
    1a20:	e3403000 	movt	r3, #0
    1a24:	e5933008 	ldr	r3, [r3, #8]
    1a28:	e2833019 	add	r3, r3, #25
    1a2c:	e35300c9 	cmp	r3, #201	; 0xc9
    1a30:	da000008 	ble	1a58 <mario_update_location+0xe20>
                mario_y = LOWEST_Y - 25;
    1a34:	e30333d0 	movw	r3, #13264	; 0x33d0
    1a38:	e3403000 	movt	r3, #0
    1a3c:	e3a020b1 	mov	r2, #177	; 0xb1
    1a40:	e5832008 	str	r2, [r3, #8]
                mario_jump = false;
    1a44:	e3003254 	movw	r3, #596	; 0x254
    1a48:	e3403018 	movt	r3, #24
    1a4c:	e3a02000 	mov	r2, #0
    1a50:	e5c32002 	strb	r2, [r3, #2]
                mario_fall = false;
    1a54:	e5c32012 	strb	r2, [r3, #18]
            }
        }
        mario_move_backward = false;
    1a58:	e3003254 	movw	r3, #596	; 0x254
    1a5c:	e3403018 	movt	r3, #24
    1a60:	e3a02000 	mov	r2, #0
    1a64:	e5c32001 	strb	r2, [r3, #1]
        mario_move_forward = false;
    1a68:	e5c32000 	strb	r2, [r3]

        //gravitational falling of Mario
        if (!mario_jump && (mario_x + 20 < pipe_3_low_x || mario_x + 5 > pipe_3_high_x) 
    1a6c:	e5d33002 	ldrb	r3, [r3, #2]
    1a70:	e1530002 	cmp	r3, r2
    1a74:	1a000020 	bne	1afc <mario_update_location+0xec4>
    1a78:	e30333d0 	movw	r3, #13264	; 0x33d0
    1a7c:	e3403000 	movt	r3, #0
    1a80:	e5932004 	ldr	r2, [r3, #4]
    1a84:	e2821014 	add	r1, r2, #20
    1a88:	e59330a8 	ldr	r3, [r3, #168]	; 0xa8
    1a8c:	e1510003 	cmp	r1, r3
    1a90:	ba000005 	blt	1aac <mario_update_location+0xe74>
    1a94:	e2822005 	add	r2, r2, #5
    1a98:	e30333d0 	movw	r3, #13264	; 0x33d0
    1a9c:	e3403000 	movt	r3, #0
    1aa0:	e5933070 	ldr	r3, [r3, #112]	; 0x70
    1aa4:	e1520003 	cmp	r2, r3
    1aa8:	da000013 	ble	1afc <mario_update_location+0xec4>
                        && mario_y + 25 < LOWEST_Y){
    1aac:	e30333d0 	movw	r3, #13264	; 0x33d0
    1ab0:	e3403000 	movt	r3, #0
    1ab4:	e5933008 	ldr	r3, [r3, #8]
    1ab8:	e2833019 	add	r3, r3, #25
    1abc:	e35300c9 	cmp	r3, #201	; 0xc9
    1ac0:	ca00000d 	bgt	1afc <mario_update_location+0xec4>
            beat_mushroom();
    1ac4:	ebfffc34 	bl	b9c <beat_mushroom>
            mario_y += GRAVITY_FALL;
    1ac8:	e30333d0 	movw	r3, #13264	; 0x33d0
    1acc:	e3403000 	movt	r3, #0
    1ad0:	e5933008 	ldr	r3, [r3, #8]
            if (mario_y + GRAVITY_FALL >= LOWEST_Y - 25){
    1ad4:	e2832028 	add	r2, r3, #40	; 0x28
    1ad8:	e35200b0 	cmp	r2, #176	; 0xb0

        //gravitational falling of Mario
        if (!mario_jump && (mario_x + 20 < pipe_3_low_x || mario_x + 5 > pipe_3_high_x) 
                        && mario_y + 25 < LOWEST_Y){
            beat_mushroom();
            mario_y += GRAVITY_FALL;
    1adc:	d30323d0 	movwle	r2, #13264	; 0x33d0
    1ae0:	d3402000 	movtle	r2, #0
    1ae4:	d2833014 	addle	r3, r3, #20
    1ae8:	d5823008 	strle	r3, [r2, #8]
            if (mario_y + GRAVITY_FALL >= LOWEST_Y - 25){
                mario_y = LOWEST_Y - 25;
    1aec:	c30333d0 	movwgt	r3, #13264	; 0x33d0
    1af0:	c3403000 	movtgt	r3, #0
    1af4:	c3a020b1 	movgt	r2, #177	; 0xb1
    1af8:	c5832008 	strgt	r2, [r3, #8]
            }
        } 
    }
    
    if (!isGameOver && !isWin){
    1afc:	e3003254 	movw	r3, #596	; 0x254
    1b00:	e3403018 	movt	r3, #24
    1b04:	e5d33011 	ldrb	r3, [r3, #17]
    1b08:	e3530000 	cmp	r3, #0
    1b0c:	1a000072 	bne	1cdc <mario_update_location+0x10a4>
    1b10:	e3003254 	movw	r3, #596	; 0x254
    1b14:	e3403018 	movt	r3, #24
    1b18:	e5d33010 	ldrb	r3, [r3, #16]
    1b1c:	e3530000 	cmp	r3, #0
    1b20:	1a00006d 	bne	1cdc <mario_update_location+0x10a4>
        //whether Mario picks moneys
        for (int i = 0; i < 3; i++)
        {
            if (mario_x + MARIO_MID >= money_x[i] && mario_x + MARIO_MID <= money_x[i] + 16 && money_y[i] + 19 >= mario_y && mario_y + 25 >= money_y[i]){
    1b24:	e30363d0 	movw	r6, #13264	; 0x33d0
    1b28:	e3406000 	movt	r6, #0
    1b2c:	e5960004 	ldr	r0, [r6, #4]
    1b30:	eb00033f 	bl	2834 <__aeabi_i2d>
    1b34:	e3a02000 	mov	r2, #0
    1b38:	e3a03000 	mov	r3, #0
    1b3c:	e3443029 	movt	r3, #16425	; 0x4029
    1b40:	eb00026e 	bl	2500 <__adddf3>
    1b44:	e1a04000 	mov	r4, r0
    1b48:	e1a05001 	mov	r5, r1
    1b4c:	e596b008 	ldr	r11, [r6, #8]
    1b50:	e28b2019 	add	r2, r11, #25
    1b54:	e58d2004 	str	r2, [sp, #4]
    1b58:	e3a06000 	mov	r6, #0
    1b5c:	e1a08006 	mov	r8, r6
    1b60:	e303a3d0 	movw	r10, #13264	; 0x33d0
    1b64:	e340a000 	movt	r10, #0
                isMoney[i] = false;
    1b68:	e3009254 	movw	r9, #596	; 0x254
    1b6c:	e3409018 	movt	r9, #24
    
    if (!isGameOver && !isWin){
        //whether Mario picks moneys
        for (int i = 0; i < 3; i++)
        {
            if (mario_x + MARIO_MID >= money_x[i] && mario_x + MARIO_MID <= money_x[i] + 16 && money_y[i] + 19 >= mario_y && mario_y + 25 >= money_y[i]){
    1b70:	e28a3028 	add	r3, r10, #40	; 0x28
    1b74:	e7967003 	ldr	r7, [r6, r3]
    1b78:	e1a00007 	mov	r0, r7
    1b7c:	eb00032c 	bl	2834 <__aeabi_i2d>
    1b80:	e1a02000 	mov	r2, r0
    1b84:	e1a03001 	mov	r3, r1
    1b88:	e1a00004 	mov	r0, r4
    1b8c:	e1a01005 	mov	r1, r5
    1b90:	eb0004ca 	bl	2ec0 <__aeabi_dcmpge>
    1b94:	e3500000 	cmp	r0, #0
    1b98:	0a000018 	beq	1c00 <mario_update_location+0xfc8>
    1b9c:	e2870010 	add	r0, r7, #16
    1ba0:	eb000323 	bl	2834 <__aeabi_i2d>
    1ba4:	e1a02000 	mov	r2, r0
    1ba8:	e1a03001 	mov	r3, r1
    1bac:	e1a00004 	mov	r0, r4
    1bb0:	e1a01005 	mov	r1, r5
    1bb4:	eb0004bb 	bl	2ea8 <__aeabi_dcmple>
    1bb8:	e3500000 	cmp	r0, #0
    1bbc:	0a00000f 	beq	1c00 <mario_update_location+0xfc8>
    1bc0:	e28a3034 	add	r3, r10, #52	; 0x34
    1bc4:	e7963003 	ldr	r3, [r6, r3]
    1bc8:	e2832013 	add	r2, r3, #19
    1bcc:	e152000b 	cmp	r2, r11
    1bd0:	ba00000a 	blt	1c00 <mario_update_location+0xfc8>
    1bd4:	e59d2004 	ldr	r2, [sp, #4]
    1bd8:	e1530002 	cmp	r3, r2
    1bdc:	ca000007 	bgt	1c00 <mario_update_location+0xfc8>
                isMoney[i] = false;
    1be0:	e2893008 	add	r3, r9, #8
    1be4:	e3a02000 	mov	r2, #0
    1be8:	e7c82003 	strb	r2, [r8, r3]
                money_x[i] = OUT_SCREEN;
    1bec:	e28a3028 	add	r3, r10, #40	; 0x28
    1bf0:	e3e02031 	mvn	r2, #49	; 0x31
    1bf4:	e7862003 	str	r2, [r6, r3]
                money_y[i] = OUT_SCREEN;
    1bf8:	e28a3034 	add	r3, r10, #52	; 0x34
    1bfc:	e7862003 	str	r2, [r6, r3]
        } 
    }
    
    if (!isGameOver && !isWin){
        //whether Mario picks moneys
        for (int i = 0; i < 3; i++)
    1c00:	e2888001 	add	r8, r8, #1
    1c04:	e2866004 	add	r6, r6, #4
    1c08:	e356000c 	cmp	r6, #12
    1c0c:	1affffd7 	bne	1b70 <mario_update_location+0xf38>
                money_x[i] = OUT_SCREEN;
                money_y[i] = OUT_SCREEN;
            }
        }
        //whether Mario picks Good Mushroom
        if (mario_x + MARIO_MID >= goodMushroom_x && mario_x + MARIO_MID <= goodMushroom_x + 19 && goodMushroom_y + 19 >= mario_y && mario_y + 25 >= goodMushroom_y){
    1c10:	e30363d0 	movw	r6, #13264	; 0x33d0
    1c14:	e3406000 	movt	r6, #0
    1c18:	e5960004 	ldr	r0, [r6, #4]
    1c1c:	eb000304 	bl	2834 <__aeabi_i2d>
    1c20:	e3a02000 	mov	r2, #0
    1c24:	e3a03000 	mov	r3, #0
    1c28:	e3443029 	movt	r3, #16425	; 0x4029
    1c2c:	eb000233 	bl	2500 <__adddf3>
    1c30:	e1a04000 	mov	r4, r0
    1c34:	e1a05001 	mov	r5, r1
    1c38:	e5966040 	ldr	r6, [r6, #64]	; 0x40
    1c3c:	e1a00006 	mov	r0, r6
    1c40:	eb0002fb 	bl	2834 <__aeabi_i2d>
    1c44:	e1a02000 	mov	r2, r0
    1c48:	e1a03001 	mov	r3, r1
    1c4c:	e1a00004 	mov	r0, r4
    1c50:	e1a01005 	mov	r1, r5
    1c54:	eb000499 	bl	2ec0 <__aeabi_dcmpge>
    1c58:	e3500000 	cmp	r0, #0
    1c5c:	0a00001e 	beq	1cdc <mario_update_location+0x10a4>
    1c60:	e2860013 	add	r0, r6, #19
    1c64:	eb0002f2 	bl	2834 <__aeabi_i2d>
    1c68:	e1a02000 	mov	r2, r0
    1c6c:	e1a03001 	mov	r3, r1
    1c70:	e1a00004 	mov	r0, r4
    1c74:	e1a01005 	mov	r1, r5
    1c78:	eb00048a 	bl	2ea8 <__aeabi_dcmple>
    1c7c:	e3500000 	cmp	r0, #0
    1c80:	0a000015 	beq	1cdc <mario_update_location+0x10a4>
    1c84:	e30333d0 	movw	r3, #13264	; 0x33d0
    1c88:	e3403000 	movt	r3, #0
    1c8c:	e5932044 	ldr	r2, [r3, #68]	; 0x44
    1c90:	e5933008 	ldr	r3, [r3, #8]
    1c94:	e2821013 	add	r1, r2, #19
    1c98:	e1510003 	cmp	r1, r3
    1c9c:	ba00000e 	blt	1cdc <mario_update_location+0x10a4>
    1ca0:	e2833019 	add	r3, r3, #25
    1ca4:	e1520003 	cmp	r2, r3
    1ca8:	ca00000b 	bgt	1cdc <mario_update_location+0x10a4>
            isGoodMushroom = false;
    1cac:	e3003254 	movw	r3, #596	; 0x254
    1cb0:	e3403018 	movt	r3, #24
    1cb4:	e3a02000 	mov	r2, #0
    1cb8:	e5c3200b 	strb	r2, [r3, #11]
            goodMushroom_x = OUT_SCREEN;
    1cbc:	e30333d0 	movw	r3, #13264	; 0x33d0
    1cc0:	e3403000 	movt	r3, #0
    1cc4:	e3e02031 	mvn	r2, #49	; 0x31
    1cc8:	e5832040 	str	r2, [r3, #64]	; 0x40
            goodMushroom_y = OUT_SCREEN;
    1ccc:	e5832044 	str	r2, [r3, #68]	; 0x44
            lives++;
    1cd0:	e5932060 	ldr	r2, [r3, #96]	; 0x60
    1cd4:	e2822001 	add	r2, r2, #1
    1cd8:	e5832060 	str	r2, [r3, #96]	; 0x60
        }
    }
    

    //whether Mario go to next map
    if (map_num != 3 && mario_x + MARIO_MID >= SCREEN_WIDTH){
    1cdc:	e30333d0 	movw	r3, #13264	; 0x33d0
    1ce0:	e3403000 	movt	r3, #0
    1ce4:	e5934000 	ldr	r4, [r3]
    1ce8:	e3540003 	cmp	r4, #3
    1cec:	0a000017 	beq	1d50 <mario_update_location+0x1118>
    1cf0:	e30333d0 	movw	r3, #13264	; 0x33d0
    1cf4:	e3403000 	movt	r3, #0
    1cf8:	e5930004 	ldr	r0, [r3, #4]
    1cfc:	eb0002cc 	bl	2834 <__aeabi_i2d>
    1d00:	e3a02000 	mov	r2, #0
    1d04:	e3a03000 	mov	r3, #0
    1d08:	e3443029 	movt	r3, #16425	; 0x4029
    1d0c:	eb0001fb 	bl	2500 <__adddf3>
    1d10:	e3a02000 	mov	r2, #0
    1d14:	e3a03000 	mov	r3, #0
    1d18:	e3443074 	movt	r3, #16500	; 0x4074
    1d1c:	eb000467 	bl	2ec0 <__aeabi_dcmpge>
    1d20:	e3500000 	cmp	r0, #0
    1d24:	0a00001a 	beq	1d94 <mario_update_location+0x115c>
        map_num++;
    1d28:	e30353d0 	movw	r5, #13264	; 0x33d0
    1d2c:	e3405000 	movt	r5, #0
    1d30:	e2844001 	add	r4, r4, #1
    1d34:	e5854000 	str	r4, [r5]
        reset_characters();
    1d38:	ebfffa34 	bl	610 <reset_characters>
        //reset Mario's position
        mario_x = 10;
    1d3c:	e3a0300a 	mov	r3, #10
    1d40:	e5853004 	str	r3, [r5, #4]
        mario_y = LOWEST_Y - 25;
    1d44:	e3a030b1 	mov	r3, #177	; 0xb1
    1d48:	e5853008 	str	r3, [r5, #8]
    1d4c:	ea000010 	b	1d94 <mario_update_location+0x115c>
    } else if (map_num == 3 && mario_x + MARIO_MID >= ENDING){
    1d50:	e30333d0 	movw	r3, #13264	; 0x33d0
    1d54:	e3403000 	movt	r3, #0
    1d58:	e5930004 	ldr	r0, [r3, #4]
    1d5c:	eb0002b4 	bl	2834 <__aeabi_i2d>
    1d60:	e3a02000 	mov	r2, #0
    1d64:	e3a03000 	mov	r3, #0
    1d68:	e3443029 	movt	r3, #16425	; 0x4029
    1d6c:	eb0001e3 	bl	2500 <__adddf3>
    1d70:	e3a02000 	mov	r2, #0
    1d74:	e3a03903 	mov	r3, #49152	; 0xc000
    1d78:	e344306f 	movt	r3, #16495	; 0x406f
    1d7c:	eb00044f 	bl	2ec0 <__aeabi_dcmpge>
    1d80:	e3500000 	cmp	r0, #0
        isWin = true;
    1d84:	13003254 	movwne	r3, #596	; 0x254
    1d88:	13403018 	movtne	r3, #24
    1d8c:	13a02001 	movne	r2, #1
    1d90:	15c32010 	strbne	r2, [r3, #16]
    }
}
    1d94:	e28dd00c 	add	sp, sp, #12
    1d98:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
    1d9c:	000033f4 	.word	0x000033f4

00001da0 <update_location>:
        pixel_buffer_start = *(pixel_ctrl_ptr + 1); // new back buffer
    }
}

//update locations for all characters
void update_location(){
    1da0:	e92d4008 	push	{r3, lr}
    mario_update_location();
    1da4:	ebfffba3 	bl	c38 <mario_update_location>
    bad_mushroom_update_location();
    1da8:	ebfffac8 	bl	8d0 <bad_mushroom_update_location>
    turtle_update_location();
    1dac:	ebfffa4d 	bl	6e8 <turtle_update_location>
    //check whether the game is over
    if (lives <= 0){
    1db0:	e30333d0 	movw	r3, #13264	; 0x33d0
    1db4:	e3403000 	movt	r3, #0
    1db8:	e5933060 	ldr	r3, [r3, #96]	; 0x60
    1dbc:	e3530000 	cmp	r3, #0
        isGameOver = true;
    1dc0:	d3003254 	movwle	r3, #596	; 0x254
    1dc4:	d3403018 	movtle	r3, #24
    1dc8:	d3a02001 	movle	r2, #1
    1dcc:	d5c32011 	strble	r2, [r3, #17]
    1dd0:	e8bd8008 	pop	{r3, pc}

00001dd4 <plot_pixel>:
}

// code for subroutines (not shown)
void plot_pixel(int x, int y, short int line_color)
{
    *(short int *)(pixel_buffer_start + (y << 10) + (x << 1)) = line_color;
    1dd4:	e3003254 	movw	r3, #596	; 0x254
    1dd8:	e3403018 	movt	r3, #24
    1ddc:	e5933018 	ldr	r3, [r3, #24]
    1de0:	e1a00080 	lsl	r0, r0, #1
    1de4:	e0831501 	add	r1, r3, r1, lsl #10
    1de8:	e18120b0 	strh	r2, [r1, r0]
    1dec:	e12fff1e 	bx	lr

00001df0 <draw_image>:
    }
}

//helper function to draw any image
//x,y as the coordinate of right top conor
void draw_image(int x, int y, int color[], int width, int height){
    1df0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    1df4:	e24dd014 	sub	sp, sp, #20
    1df8:	e58d100c 	str	r1, [sp, #12]
    for (int i = 0; i < width; i++)
    1dfc:	e3530000 	cmp	r3, #0
    1e00:	e58d3008 	str	r3, [sp, #8]
    1e04:	da00002b 	ble	1eb8 <draw_image+0xc8>
    1e08:	e1a06000 	mov	r6, r0
    1e0c:	e1a07002 	mov	r7, r2
    }
}

//helper function to draw any image
//x,y as the coordinate of right top conor
void draw_image(int x, int y, int color[], int width, int height){
    1e10:	e1a09103 	lsl	r9, r3, #2
    for (int i = 0; i < width; i++)
    1e14:	e3a01000 	mov	r1, #0
    1e18:	e58d1004 	str	r1, [sp, #4]
    }
}

//helper function to draw any image
//x,y as the coordinate of right top conor
void draw_image(int x, int y, int color[], int width, int height){
    1e1c:	e59d200c 	ldr	r2, [sp, #12]
    1e20:	e59d3038 	ldr	r3, [sp, #56]	; 0x38
    1e24:	e082a003 	add	r10, r2, r3
            //location of the image drew on the screen
            int plot_x = x + i;
            int plot_y = y + j;

            //filter the transparent color and do not draw when out of screen
            if (color[j * width + i] == 0xf81f || plot_x >= SCREEN_WIDTH || plot_y >= SCREEN_HEIGHT || plot_x < 0 || plot_y < 0){
    1e28:	e30f881f 	movw	r8, #63519	; 0xf81f
    1e2c:	e300b13f 	movw	r11, #319	; 0x13f
    1e30:	ea000018 	b	1e98 <draw_image+0xa8>
    1e34:	e7972005 	ldr	r2, [r7, r5]
    1e38:	e1520008 	cmp	r2, r8
    1e3c:	0a000009 	beq	1e68 <draw_image+0x78>
    for (int i = 0; i < width; i++)
    {
        for (int j = 0; j < height; j++)
        {
            //location of the image drew on the screen
            int plot_x = x + i;
    1e40:	e1a00006 	mov	r0, r6
            int plot_y = y + j;
    1e44:	e1a01004 	mov	r1, r4

            //filter the transparent color and do not draw when out of screen
            if (color[j * width + i] == 0xf81f || plot_x >= SCREEN_WIDTH || plot_y >= SCREEN_HEIGHT || plot_x < 0 || plot_y < 0){
    1e48:	e156000b 	cmp	r6, r11
    1e4c:	d35400ef 	cmple	r4, #239	; 0xef
    1e50:	ca000004 	bgt	1e68 <draw_image+0x78>
    1e54:	e59d3000 	ldr	r3, [sp]
    1e58:	e1933fa4 	orrs	r3, r3, r4, lsr #31
    1e5c:	1a000001 	bne	1e68 <draw_image+0x78>
                continue;
            }

            plot_pixel(plot_x, plot_y, color[j * width + i]);
    1e60:	e6bf2072 	sxth	r2, r2
    1e64:	ebffffda 	bl	1dd4 <plot_pixel>
    1e68:	e0855009 	add	r5, r5, r9
    1e6c:	e2844001 	add	r4, r4, #1
//helper function to draw any image
//x,y as the coordinate of right top conor
void draw_image(int x, int y, int color[], int width, int height){
    for (int i = 0; i < width; i++)
    {
        for (int j = 0; j < height; j++)
    1e70:	e154000a 	cmp	r4, r10
    1e74:	1affffee 	bne	1e34 <draw_image+0x44>
}

//helper function to draw any image
//x,y as the coordinate of right top conor
void draw_image(int x, int y, int color[], int width, int height){
    for (int i = 0; i < width; i++)
    1e78:	e59d1004 	ldr	r1, [sp, #4]
    1e7c:	e2811001 	add	r1, r1, #1
    1e80:	e58d1004 	str	r1, [sp, #4]
    1e84:	e2866001 	add	r6, r6, #1
    1e88:	e2877004 	add	r7, r7, #4
    1e8c:	e59d2008 	ldr	r2, [sp, #8]
    1e90:	e1510002 	cmp	r1, r2
    1e94:	0a000007 	beq	1eb8 <draw_image+0xc8>
    {
        for (int j = 0; j < height; j++)
    1e98:	e59d3038 	ldr	r3, [sp, #56]	; 0x38
    1e9c:	e3530000 	cmp	r3, #0
    1ea0:	dafffff4 	ble	1e78 <draw_image+0x88>
    1ea4:	e59d400c 	ldr	r4, [sp, #12]
    }
}

//helper function to draw any image
//x,y as the coordinate of right top conor
void draw_image(int x, int y, int color[], int width, int height){
    1ea8:	e3a05000 	mov	r5, #0
            //location of the image drew on the screen
            int plot_x = x + i;
            int plot_y = y + j;

            //filter the transparent color and do not draw when out of screen
            if (color[j * width + i] == 0xf81f || plot_x >= SCREEN_WIDTH || plot_y >= SCREEN_HEIGHT || plot_x < 0 || plot_y < 0){
    1eac:	e1a01fa6 	lsr	r1, r6, #31
    1eb0:	e58d1000 	str	r1, [sp]
    1eb4:	eaffffde 	b	1e34 <draw_image+0x44>
            plot_pixel(plot_x, plot_y, color[j * width + i]);
        }
        
    }
    
}
    1eb8:	e28dd014 	add	sp, sp, #20
    1ebc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

00001ec0 <draw_background>:
    }
    return;
}

//helper function to draw any background
void draw_background(){
    1ec0:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, lr}
    1ec4:	e3a08000 	mov	r8, #0
    for (int x = 0; x < SCREEN_WIDTH; ++x)
    1ec8:	e1a07008 	mov	r7, r8
    }
    return;
}

//helper function to draw any background
void draw_background(){
    1ecc:	e59f9108 	ldr	r9, [pc, #264]	; 1fdc <draw_background+0x11c>
    1ed0:	e59fb108 	ldr	r11, [pc, #264]	; 1fe0 <draw_background+0x120>
    for (int x = 0; x < SCREEN_WIDTH; ++x)
    {
        for (int y = 0; y <= SCREEN_HEIGHT; ++y)
        {
            if (isGameOver){ //check whether the game is over
    1ed4:	e3006254 	movw	r6, #596	; 0x254
    1ed8:	e3406018 	movt	r6, #24
    1edc:	ea00003a 	b	1fcc <draw_background+0x10c>
    1ee0:	e5d63011 	ldrb	r3, [r6, #17]
    1ee4:	e3530000 	cmp	r3, #0
    1ee8:	0a000006 	beq	1f08 <draw_background+0x48>
    }
    return;
}

//helper function to draw any background
void draw_background(){
    1eec:	e59f30f0 	ldr	r3, [pc, #240]	; 1fe4 <draw_background+0x124>
    1ef0:	e0883003 	add	r3, r8, r3
    for (int x = 0; x < SCREEN_WIDTH; ++x)
    {
        for (int y = 0; y <= SCREEN_HEIGHT; ++y)
        {
            if (isGameOver){ //check whether the game is over
                plot_pixel(x, y, game_over[y * SCREEN_WIDTH + x]);
    1ef4:	e1a00007 	mov	r0, r7
    1ef8:	e1a01004 	mov	r1, r4
    1efc:	e19320f5 	ldrsh	r2, [r3, r5]
    1f00:	ebffffb3 	bl	1dd4 <plot_pixel>
    1f04:	ea000028 	b	1fac <draw_background+0xec>
            } else if (isWin){
    1f08:	e5d63010 	ldrb	r3, [r6, #16]
    1f0c:	e3530000 	cmp	r3, #0
    1f10:	0a000006 	beq	1f30 <draw_background+0x70>
    }
    return;
}

//helper function to draw any background
void draw_background(){
    1f14:	e59f30cc 	ldr	r3, [pc, #204]	; 1fe8 <draw_background+0x128>
    1f18:	e0883003 	add	r3, r8, r3
        for (int y = 0; y <= SCREEN_HEIGHT; ++y)
        {
            if (isGameOver){ //check whether the game is over
                plot_pixel(x, y, game_over[y * SCREEN_WIDTH + x]);
            } else if (isWin){
                plot_pixel(x, y, win[y * SCREEN_WIDTH + x]);
    1f1c:	e1a00007 	mov	r0, r7
    1f20:	e1a01004 	mov	r1, r4
    1f24:	e19320f5 	ldrsh	r2, [r3, r5]
    1f28:	ebffffa9 	bl	1dd4 <plot_pixel>
    1f2c:	ea00001e 	b	1fac <draw_background+0xec>
            } else{    
                if (map_num != 1 && y >= 203){ //to speed up drawing
    1f30:	e30333d0 	movw	r3, #13264	; 0x33d0
    1f34:	e3403000 	movt	r3, #0
    1f38:	e5933000 	ldr	r3, [r3]
    1f3c:	e3530001 	cmp	r3, #1
    1f40:	0a000002 	beq	1f50 <draw_background+0x90>
    1f44:	e35400ca 	cmp	r4, #202	; 0xca
    1f48:	da000006 	ble	1f68 <draw_background+0xa8>
    1f4c:	ea00001a 	b	1fbc <draw_background+0xfc>
    }
    return;
}

//helper function to draw any background
void draw_background(){
    1f50:	e0883009 	add	r3, r8, r9
            } else{    
                if (map_num != 1 && y >= 203){ //to speed up drawing
                    break;
                }           
                if (map_num == 1)
                    plot_pixel(x, y, background[y * SCREEN_WIDTH + x]);
    1f54:	e1a00007 	mov	r0, r7
    1f58:	e1a01004 	mov	r1, r4
    1f5c:	e19320f5 	ldrsh	r2, [r3, r5]
    1f60:	ebffff9b 	bl	1dd4 <plot_pixel>
    1f64:	ea000010 	b	1fac <draw_background+0xec>
                else if (map_num == 2)
    1f68:	e3530002 	cmp	r3, #2
    1f6c:	1a000004 	bne	1f84 <draw_background+0xc4>
                    plot_pixel(x, y, background2[y * SCREEN_WIDTH + x]);
    1f70:	e1a00007 	mov	r0, r7
    1f74:	e1a01004 	mov	r1, r4
    1f78:	e19a20f5 	ldrsh	r2, [r10, r5]
    1f7c:	ebffff94 	bl	1dd4 <plot_pixel>
    1f80:	ea000009 	b	1fac <draw_background+0xec>
                else if (map_num == 3)
    1f84:	e3530003 	cmp	r3, #3
    }
    return;
}

//helper function to draw any background
void draw_background(){
    1f88:	059f305c 	ldreq	r3, [pc, #92]	; 1fec <draw_background+0x12c>
    1f8c:	00883003 	addeq	r3, r8, r3
                if (map_num == 1)
                    plot_pixel(x, y, background[y * SCREEN_WIDTH + x]);
                else if (map_num == 2)
                    plot_pixel(x, y, background2[y * SCREEN_WIDTH + x]);
                else if (map_num == 3)
                    plot_pixel(x, y, end[y * SCREEN_WIDTH + x]);
    1f90:	01a00007 	moveq	r0, r7
    1f94:	01a01004 	moveq	r1, r4
    1f98:	019320f5 	ldrsheq	r2, [r3, r5]
                else
                    plot_pixel(x, y, 0);
    1f9c:	11a00007 	movne	r0, r7
    1fa0:	11a01004 	movne	r1, r4
    1fa4:	13a02000 	movne	r2, #0
    1fa8:	ebffff89 	bl	1dd4 <plot_pixel>

//helper function to draw any background
void draw_background(){
    for (int x = 0; x < SCREEN_WIDTH; ++x)
    {
        for (int y = 0; y <= SCREEN_HEIGHT; ++y)
    1fac:	e2844001 	add	r4, r4, #1
    1fb0:	e2855c05 	add	r5, r5, #1280	; 0x500
    1fb4:	e35400f1 	cmp	r4, #241	; 0xf1
    1fb8:	1affffc8 	bne	1ee0 <draw_background+0x20>
    return;
}

//helper function to draw any background
void draw_background(){
    for (int x = 0; x < SCREEN_WIDTH; ++x)
    1fbc:	e2877001 	add	r7, r7, #1
    1fc0:	e2888004 	add	r8, r8, #4
    1fc4:	e3570d05 	cmp	r7, #320	; 0x140
    1fc8:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
    }
    return;
}

//helper function to draw any background
void draw_background(){
    1fcc:	e3a05000 	mov	r5, #0
    1fd0:	e1a04005 	mov	r4, r5
    1fd4:	e088a00b 	add	r10, r8, r11
    1fd8:	eaffffc0 	b	1ee0 <draw_background+0x20>
    1fdc:	00099480 	.word	0x00099480
    1fe0:	000e4480 	.word	0x000e4480
    1fe4:	00003480 	.word	0x00003480
    1fe8:	0004e480 	.word	0x0004e480
    1fec:	0012f480 	.word	0x0012f480

00001ff0 <plot_digit>:
{
    *(short int *)(pixel_buffer_start + (y << 10) + (x << 1)) = line_color;
}

void plot_digit(int x, int y, int ascii){
    *(short int *)(character_buffer_start + (y << 7) + x) = ascii;
    1ff0:	e3003254 	movw	r3, #596	; 0x254
    1ff4:	e3403018 	movt	r3, #24
    1ff8:	e593301c 	ldr	r3, [r3, #28]
    1ffc:	e0801381 	add	r1, r0, r1, lsl #7
    2000:	e18120b3 	strh	r2, [r1, r3]
    2004:	e12fff1e 	bx	lr

00002008 <clear_screen>:
}

//function to clear whole screen
void clear_screen(){
    2008:	e92d4070 	push	{r4, r5, r6, lr}
    //set color for every pixel to black
    for (int x = 0; x <= 319; ++x){
    200c:	e3a05000 	mov	r5, #0
void plot_digit(int x, int y, int ascii){
    *(short int *)(character_buffer_start + (y << 7) + x) = ascii;
}

//function to clear whole screen
void clear_screen(){
    2010:	e1a06005 	mov	r6, r5
    2014:	ea000009 	b	2040 <clear_screen+0x38>
    //set color for every pixel to black
    for (int x = 0; x <= 319; ++x){
        for (int y = 0; y <= 239; ++y){
            plot_pixel(x, y, 0x0);
    2018:	e1a00005 	mov	r0, r5
    201c:	e1a01004 	mov	r1, r4
    2020:	e1a02006 	mov	r2, r6
    2024:	ebffff6a 	bl	1dd4 <plot_pixel>

//function to clear whole screen
void clear_screen(){
    //set color for every pixel to black
    for (int x = 0; x <= 319; ++x){
        for (int y = 0; y <= 239; ++y){
    2028:	e2844001 	add	r4, r4, #1
    202c:	e35400f0 	cmp	r4, #240	; 0xf0
    2030:	1afffff8 	bne	2018 <clear_screen+0x10>
}

//function to clear whole screen
void clear_screen(){
    //set color for every pixel to black
    for (int x = 0; x <= 319; ++x){
    2034:	e2855001 	add	r5, r5, #1
    2038:	e3550d05 	cmp	r5, #320	; 0x140
    203c:	08bd8070 	popeq	{r4, r5, r6, pc}
void plot_digit(int x, int y, int ascii){
    *(short int *)(character_buffer_start + (y << 7) + x) = ascii;
}

//function to clear whole screen
void clear_screen(){
    2040:	e1a04006 	mov	r4, r6
    2044:	eafffff3 	b	2018 <clear_screen+0x10>

00002048 <swap>:
    }
}

//function to swap two values
void swap(int* a, int* b){
    int temp = *a;
    2048:	e5903000 	ldr	r3, [r0]
    *a = *b;
    204c:	e5912000 	ldr	r2, [r1]
    2050:	e5802000 	str	r2, [r0]
    *b = temp;
    2054:	e5813000 	str	r3, [r1]
    2058:	e12fff1e 	bx	lr

0000205c <draw_line>:
        }
    }
}

//function to draw a line
void draw_line(int x0, int y0, int x1, int y1, short int line_color){
    205c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    2060:	e24dd01c 	sub	sp, sp, #28
    2064:	e58d0014 	str	r0, [sp, #20]
    2068:	e58d1010 	str	r1, [sp, #16]
    206c:	e58d200c 	str	r2, [sp, #12]
    2070:	e58d3008 	str	r3, [sp, #8]
    2074:	e1dda4f0 	ldrsh	r10, [sp, #64]	; 0x40
    bool isSteep = abs(y1 - y0) > abs(x1 - x0);
    2078:	e0613003 	rsb	r3, r1, r3
    207c:	e3530000 	cmp	r3, #0
    2080:	b2633000 	rsblt	r3, r3, #0
    2084:	e0602002 	rsb	r2, r0, r2
    2088:	e0228fc2 	eor	r8, r2, r2, asr #31
    208c:	e0488fc2 	sub	r8, r8, r2, asr #31
    2090:	e1530008 	cmp	r3, r8
    2094:	d3a08000 	movle	r8, #0
    2098:	c3a08001 	movgt	r8, #1
    if (isSteep){
    209c:	e3580000 	cmp	r8, #0
    20a0:	0a000005 	beq	20bc <draw_line+0x60>
        swap(&x0, &y0);
    20a4:	e28d0014 	add	r0, sp, #20
    20a8:	e28d1010 	add	r1, sp, #16
    20ac:	ebffffe5 	bl	2048 <swap>
        swap(&x1, &y1);
    20b0:	e28d000c 	add	r0, sp, #12
    20b4:	e28d1008 	add	r1, sp, #8
    20b8:	ebffffe2 	bl	2048 <swap>
    }
    if (x0 > x1){
    20bc:	e59d300c 	ldr	r3, [sp, #12]
    20c0:	e59d2014 	ldr	r2, [sp, #20]
    20c4:	e1520003 	cmp	r2, r3
    20c8:	da000005 	ble	20e4 <draw_line+0x88>
        swap(&x0, &x1);
    20cc:	e28d0014 	add	r0, sp, #20
    20d0:	e28d100c 	add	r1, sp, #12
    20d4:	ebffffdb 	bl	2048 <swap>
        swap(&y0, &y1);
    20d8:	e28d0010 	add	r0, sp, #16
    20dc:	e28d1008 	add	r1, sp, #8
    20e0:	ebffffd8 	bl	2048 <swap>
    }

    int deltax = x1 - x0;
    20e4:	e59d300c 	ldr	r3, [sp, #12]
    20e8:	e58d3004 	str	r3, [sp, #4]
    20ec:	e59d5014 	ldr	r5, [sp, #20]
    20f0:	e0659003 	rsb	r9, r5, r3
    int deltay = abs(y1 - y0);
    20f4:	e59db008 	ldr	r11, [sp, #8]
    20f8:	e59d6010 	ldr	r6, [sp, #16]
    20fc:	e066700b 	rsb	r7, r6, r11
    2100:	e3570000 	cmp	r7, #0
    2104:	b2677000 	rsblt	r7, r7, #0
    int error = -1 * (deltax * 0.5);
    2108:	e1a00009 	mov	r0, r9
    210c:	eb0001c8 	bl	2834 <__aeabi_i2d>
    2110:	e3a02000 	mov	r2, #0
    2114:	e3a03000 	mov	r3, #0
    2118:	e3433fe0 	movt	r3, #16352	; 0x3fe0
    211c:	eb0001fb 	bl	2910 <__aeabi_dmul>
    2120:	e2813102 	add	r3, r1, #-2147483648	; 0x80000000
    2124:	e1a01003 	mov	r1, r3
    2128:	eb000370 	bl	2ef0 <__aeabi_d2iz>
    212c:	e1a04000 	mov	r4, r0
    int y = y0;
    int y_step;
    if (y0 < y1){
        y_step = 1;
    2130:	e15b0006 	cmp	r11, r6
    2134:	d3e0b000 	mvnle	r11, #0
    2138:	c3a0b001 	movgt	r11, #1
    } else{
        y_step = -1;
    }

    for (int x = x0; x <= x1; ++x){
    213c:	e59d3004 	ldr	r3, [sp, #4]
    2140:	e1530005 	cmp	r3, r5
    2144:	ba00000d 	blt	2180 <draw_line+0x124>
        if (isSteep){
    2148:	e3580000 	cmp	r8, #0
            plot_pixel(y, x, line_color);
    214c:	11a00006 	movne	r0, r6
    2150:	11a01005 	movne	r1, r5
        } else{
            plot_pixel(x, y, line_color);
    2154:	01a00005 	moveq	r0, r5
    2158:	01a01006 	moveq	r1, r6
    215c:	e1a0200a 	mov	r2, r10
    2160:	ebffff1b 	bl	1dd4 <plot_pixel>
        }
        error = error + deltay;
        if (error >= 0){
    2164:	e0944007 	adds	r4, r4, r7
            y = y + y_step;
    2168:	5086600b 	addpl	r6, r6, r11
            error = error - deltax;
    216c:	50694004 	rsbpl	r4, r9, r4
        y_step = 1;
    } else{
        y_step = -1;
    }

    for (int x = x0; x <= x1; ++x){
    2170:	e2855001 	add	r5, r5, #1
    2174:	e59d300c 	ldr	r3, [sp, #12]
    2178:	e1530005 	cmp	r3, r5
    217c:	aafffff1 	bge	2148 <draw_line+0xec>
        if (error >= 0){
            y = y + y_step;
            error = error - deltax;
        }
    }
}
    2180:	e28dd01c 	add	sp, sp, #28
    2184:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

00002188 <wait_for_vsync>:
//function to wait for Vsync
void wait_for_vsync(){
     volatile int *pixel_ctrl_ptr = (int *)0xFF203020;
     register int status;

     *pixel_ctrl_ptr = 1;
    2188:	e3033fff 	movw	r3, #16383	; 0x3fff
    218c:	e34f3f20 	movt	r3, #65312	; 0xff20
    2190:	e3a02001 	mov	r2, #1
    2194:	e5032fdf 	str	r2, [r3, #-4063]	; 0xfffff021

     status = *(pixel_ctrl_ptr + 3);
    2198:	e5133fd3 	ldr	r3, [r3, #-4051]	; 0xfffff02d
     while ((status & 0x01) != 0){
    219c:	e3130001 	tst	r3, #1
    21a0:	012fff1e 	bxeq	lr
         status = *(pixel_ctrl_ptr + 3);
    21a4:	e3032fff 	movw	r2, #16383	; 0x3fff
    21a8:	e34f2f20 	movt	r2, #65312	; 0xff20
    21ac:	e5123fd3 	ldr	r3, [r2, #-4051]	; 0xfffff02d
     register int status;

     *pixel_ctrl_ptr = 1;

     status = *(pixel_ctrl_ptr + 3);
     while ((status & 0x01) != 0){
    21b0:	e3130001 	tst	r3, #1
    21b4:	1afffffc 	bne	21ac <wait_for_vsync+0x24>
    21b8:	e12fff1e 	bx	lr

000021bc <draw_main_canvas>:

    //draw things
    draw_main_canvas();
}

void draw_main_canvas(){
    21bc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    21c0:	e24dd01c 	sub	sp, sp, #28
    volatile int * character_ctrl_ptr = (int *)0xFF203030;
    // declare other variables(not shown)
    // initialize location and direction of rectangles(not shown)

    /* set front pixel buffer to start of FPGA On-chip memory */
    *(pixel_ctrl_ptr + 1) = 0xC8000000; // first store the address in the 
    21c4:	e3035fff 	movw	r5, #16383	; 0x3fff
    21c8:	e34f5f20 	movt	r5, #65312	; 0xff20
    21cc:	e3a03332 	mov	r3, #-939524096	; 0xc8000000
    21d0:	e5053fdb 	str	r3, [r5, #-4059]	; 0xfffff025
                                        // back buffer
    //*(character_ctrl_ptr + 1) = 0xC9000000;                                    
    /* now, swap the front/back buffers, to set the front buffer location */
    wait_for_vsync();
    21d4:	ebffffeb 	bl	2188 <wait_for_vsync>
    /* initialize a pointer to the pixel buffer, used by drawing functions */
    pixel_buffer_start = *pixel_ctrl_ptr;
    21d8:	e5153fdf 	ldr	r3, [r5, #-4063]	; 0xfffff021
    21dc:	e3004254 	movw	r4, #596	; 0x254
    21e0:	e3404018 	movt	r4, #24
    21e4:	e5843018 	str	r3, [r4, #24]
    character_buffer_start = *character_ctrl_ptr;
    21e8:	e5153fcf 	ldr	r3, [r5, #-4047]	; 0xfffff031
    21ec:	e584301c 	str	r3, [r4, #28]

    clear_screen(); // pixel_buffer_start points to the pixel buffer
    21f0:	ebffff84 	bl	2008 <clear_screen>
    /* set back pixel buffer to start of SDRAM memory */
    *(pixel_ctrl_ptr + 1) = 0xC0000000;
    21f4:	e3a03103 	mov	r3, #-1073741824	; 0xc0000000
    21f8:	e5053fdb 	str	r3, [r5, #-4059]	; 0xfffff025
    //*(character_ctrl_ptr + 1) = 0xC9000000; 

    pixel_buffer_start = *(pixel_ctrl_ptr + 1); // we draw on the back buffer
    21fc:	e5153fdb 	ldr	r3, [r5, #-4059]	; 0xfffff025
    2200:	e5843018 	str	r3, [r4, #24]
    //character_buffer_start = *(character_ctrl_ptr + 1);
	character_buffer_start = 0xC9000000; 
    2204:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
    2208:	e584301c 	str	r3, [r4, #28]
		plot_digit(70, 2, 0x3A); // :
        plot_digit(72, 2, 0x30); //0
		plot_digit(74, 2, 0x30); //0
		
        //check whether the game is over
        if (!isGameOver && !isWin){
    220c:	e3004254 	movw	r4, #596	; 0x254
    2210:	e3404018 	movt	r4, #24
            } else if (mario_jump && !is_mario_moving_forward){
                draw_image(mario_x, mario_y, Mario_jump_back, 26, 25);
            } else if (is_mario_moving_forward){
                draw_image(mario_x, mario_y, Mario_run, 25, 25);
            } else if (!is_mario_moving_forward){
                draw_image(mario_x, mario_y, Mario_run_back, 25, 25);
    2214:	e30cbde8 	movw	r11, #52712	; 0xcde8
    2218:	e340b017 	movt	r11, #23
    221c:	e24b3eb5 	sub	r3, r11, #2896	; 0xb50
    2220:	e2433004 	sub	r3, r3, #4
    2224:	e58d3014 	str	r3, [sp, #20]
            if (mario_jump && is_mario_moving_forward){
                draw_image(mario_x, mario_y, Mario_jump, 26, 25);
            } else if (mario_jump && !is_mario_moving_forward){
                draw_image(mario_x, mario_y, Mario_jump_back, 26, 25);
            } else if (is_mario_moving_forward){
                draw_image(mario_x, mario_y, Mario_run, 25, 25);
    2228:	e30a3df0 	movw	r3, #44528	; 0xadf0
    222c:	e3403017 	movt	r3, #23
    2230:	e58d300c 	str	r3, [sp, #12]
    2234:	e2833eae 	add	r3, r3, #2784	; 0xae0
    2238:	e58d3010 	str	r3, [sp, #16]
	
    while (1)
    {

        // code for drawing the boxes and lines 
        draw_background();
    223c:	ebffff1f 	bl	1ec0 <draw_background>
		
		plot_digit(60, 2, 0x53); //S
    2240:	e3a0003c 	mov	r0, #60	; 0x3c
    2244:	e3a01002 	mov	r1, #2
    2248:	e3a02053 	mov	r2, #83	; 0x53
    224c:	ebffff67 	bl	1ff0 <plot_digit>
        plot_digit(62, 2, 0x43); //C
    2250:	e3a0003e 	mov	r0, #62	; 0x3e
    2254:	e3a01002 	mov	r1, #2
    2258:	e3a02043 	mov	r2, #67	; 0x43
    225c:	ebffff63 	bl	1ff0 <plot_digit>
		plot_digit(64, 2, 0x4F); //O	
    2260:	e3a00040 	mov	r0, #64	; 0x40
    2264:	e3a01002 	mov	r1, #2
    2268:	e3a0204f 	mov	r2, #79	; 0x4f
    226c:	ebffff5f 	bl	1ff0 <plot_digit>
		plot_digit(66, 2, 0x52); //R
    2270:	e3a00042 	mov	r0, #66	; 0x42
    2274:	e3a01002 	mov	r1, #2
    2278:	e3a02052 	mov	r2, #82	; 0x52
    227c:	ebffff5b 	bl	1ff0 <plot_digit>
		plot_digit(68, 2, 0x45); //E
    2280:	e3a00044 	mov	r0, #68	; 0x44
    2284:	e3a01002 	mov	r1, #2
    2288:	e3a02045 	mov	r2, #69	; 0x45
    228c:	ebffff57 	bl	1ff0 <plot_digit>
		plot_digit(70, 2, 0x3A); // :
    2290:	e3a00046 	mov	r0, #70	; 0x46
    2294:	e3a01002 	mov	r1, #2
    2298:	e3a0203a 	mov	r2, #58	; 0x3a
    229c:	ebffff53 	bl	1ff0 <plot_digit>
        plot_digit(72, 2, 0x30); //0
    22a0:	e3a00048 	mov	r0, #72	; 0x48
    22a4:	e3a01002 	mov	r1, #2
    22a8:	e3a02030 	mov	r2, #48	; 0x30
    22ac:	ebffff4f 	bl	1ff0 <plot_digit>
		plot_digit(74, 2, 0x30); //0
    22b0:	e3a0004a 	mov	r0, #74	; 0x4a
    22b4:	e3a01002 	mov	r1, #2
    22b8:	e3a02030 	mov	r2, #48	; 0x30
    22bc:	ebffff4b 	bl	1ff0 <plot_digit>
		
        //check whether the game is over
        if (!isGameOver && !isWin){
    22c0:	e5d43011 	ldrb	r3, [r4, #17]
    22c4:	e3530000 	cmp	r3, #0
    22c8:	1a000062 	bne	2458 <draw_main_canvas+0x29c>
    22cc:	e5d43010 	ldrb	r3, [r4, #16]
    22d0:	e3530000 	cmp	r3, #0
    22d4:	1a00005f 	bne	2458 <draw_main_canvas+0x29c>
            //draw Mario depends on different movements
            if (mario_jump && is_mario_moving_forward){
    22d8:	e5d43002 	ldrb	r3, [r4, #2]
    22dc:	e3530000 	cmp	r3, #0
    22e0:	0a00006a 	beq	2490 <draw_main_canvas+0x2d4>
    22e4:	e30333d0 	movw	r3, #13264	; 0x33d0
    22e8:	e3403000 	movt	r3, #0
    22ec:	e5d3307c 	ldrb	r3, [r3, #124]	; 0x7c
    22f0:	e3530000 	cmp	r3, #0
                draw_image(mario_x, mario_y, Mario_jump, 26, 25);
    22f4:	e30333d0 	movw	r3, #13264	; 0x33d0
    22f8:	e3403000 	movt	r3, #0
    22fc:	e5930004 	ldr	r0, [r3, #4]
    2300:	e5931008 	ldr	r1, [r3, #8]
    2304:	e3a03019 	mov	r3, #25
    2308:	e58d3000 	str	r3, [sp]
    230c:	e59d300c 	ldr	r3, [sp, #12]
    2310:	12432e97 	subne	r2, r3, #2416	; 0x970
            } else if (mario_jump && !is_mario_moving_forward){
                draw_image(mario_x, mario_y, Mario_jump_back, 26, 25);
    2314:	028320b8 	addeq	r2, r3, #184	; 0xb8
    2318:	e3a0301a 	mov	r3, #26
    231c:	ebfffeb3 	bl	1df0 <draw_image>
    2320:	ea000053 	b	2474 <draw_main_canvas+0x2b8>
            } else if (is_mario_moving_forward){
                draw_image(mario_x, mario_y, Mario_run, 25, 25);
    2324:	e30333d0 	movw	r3, #13264	; 0x33d0
    2328:	e3403000 	movt	r3, #0
    232c:	e5930004 	ldr	r0, [r3, #4]
    2330:	e5931008 	ldr	r1, [r3, #8]
    2334:	e3a03019 	mov	r3, #25
    2338:	e58d3000 	str	r3, [sp]
    233c:	e59d2010 	ldr	r2, [sp, #16]
    2340:	ebfffeaa 	bl	1df0 <draw_image>
    2344:	ea00004a 	b	2474 <draw_main_canvas+0x2b8>
            } else if (!is_mario_moving_forward){
                draw_image(mario_x, mario_y, Mario_run_back, 25, 25);
    2348:	e30333d0 	movw	r3, #13264	; 0x33d0
    234c:	e3403000 	movt	r3, #0
    2350:	e5930004 	ldr	r0, [r3, #4]
    2354:	e5931008 	ldr	r1, [r3, #8]
    2358:	e3a03019 	mov	r3, #25
    235c:	e58d3000 	str	r3, [sp]
    2360:	e59d2014 	ldr	r2, [sp, #20]
    2364:	ebfffea1 	bl	1df0 <draw_image>
    2368:	ea000041 	b	2474 <draw_main_canvas+0x2b8>
            } 
            
            //draw bad mushrooms
            for (int i = 0; i < 3; i++)
            {
                if (isBadMushroom[i]){
    236c:	e5f63001 	ldrb	r3, [r6, #1]!
    2370:	e3530000 	cmp	r3, #0
    2374:	0a000007 	beq	2398 <draw_main_canvas+0x1dc>
                    draw_image(badMushroom_x[i], badMushroom_y[i], bad_mushroom, 19, 19);
    2378:	e2873010 	add	r3, r7, #16
    237c:	e7950003 	ldr	r0, [r5, r3]
    2380:	e287301c 	add	r3, r7, #28
    2384:	e7951003 	ldr	r1, [r5, r3]
    2388:	e58d8000 	str	r8, [sp]
    238c:	e1a0200a 	mov	r2, r10
    2390:	e1a03008 	mov	r3, r8
    2394:	ebfffe95 	bl	1df0 <draw_image>
    2398:	e2855004 	add	r5, r5, #4
            } else if (!is_mario_moving_forward){
                draw_image(mario_x, mario_y, Mario_run_back, 25, 25);
            } 
            
            //draw bad mushrooms
            for (int i = 0; i < 3; i++)
    239c:	e355000c 	cmp	r5, #12
    23a0:	1afffff1 	bne	236c <draw_main_canvas+0x1b0>
                if (isBadMushroom[i]){
                    draw_image(badMushroom_x[i], badMushroom_y[i], bad_mushroom, 19, 19);
                } 
            }
            
            if (isGoodMushroom){
    23a4:	e5d4300b 	ldrb	r3, [r4, #11]
    23a8:	e3530000 	cmp	r3, #0
    23ac:	0a000008 	beq	23d4 <draw_main_canvas+0x218>
                draw_image(goodMushroom_x, goodMushroom_y, good_mushroom, 19, 19);
    23b0:	e30333d0 	movw	r3, #13264	; 0x33d0
    23b4:	e3403000 	movt	r3, #0
    23b8:	e5930040 	ldr	r0, [r3, #64]	; 0x40
    23bc:	e5931044 	ldr	r1, [r3, #68]	; 0x44
    23c0:	e3a03013 	mov	r3, #19
    23c4:	e58d3000 	str	r3, [sp]
    23c8:	e28b2e41 	add	r2, r11, #1040	; 0x410
    23cc:	e2822004 	add	r2, r2, #4
    23d0:	ebfffe86 	bl	1df0 <draw_image>
            }

            if (isTurtle){
    23d4:	e5d4300c 	ldrb	r3, [r4, #12]
    23d8:	e3530000 	cmp	r3, #0
    23dc:	0a000031 	beq	24a8 <draw_main_canvas+0x2ec>
                if (isTurtleMovingRight){
    23e0:	e30333d0 	movw	r3, #13264	; 0x33d0
    23e4:	e3403000 	movt	r3, #0
    23e8:	e5d33048 	ldrb	r3, [r3, #72]	; 0x48
    23ec:	e3530000 	cmp	r3, #0
                    draw_image(turtle_x, turtle_y, turtle_right, 19, 28);
    23f0:	e30333d0 	movw	r3, #13264	; 0x33d0
    23f4:	e3403000 	movt	r3, #0
    23f8:	e593004c 	ldr	r0, [r3, #76]	; 0x4c
    23fc:	e5931050 	ldr	r1, [r3, #80]	; 0x50
    2400:	e3a0301c 	mov	r3, #28
    2404:	e58d3000 	str	r3, [sp]
    2408:	128b2e9b 	addne	r2, r11, #2480	; 0x9b0
    240c:	12822008 	addne	r2, r2, #8
                }else{
                    draw_image(turtle_x, turtle_y, turtle, 19, 28);
    2410:	059f20b0 	ldreq	r2, [pc, #176]	; 24c8 <draw_main_canvas+0x30c>
    2414:	e3a03013 	mov	r3, #19
    2418:	ebfffe74 	bl	1df0 <draw_image>
    241c:	ea000021 	b	24a8 <draw_main_canvas+0x2ec>
            }

            //draw moneys
            for (int i = 0; i < 3; i++)
            {   
                if (isMoney[i]){
    2420:	e5f63001 	ldrb	r3, [r6, #1]!
    2424:	e3530000 	cmp	r3, #0
    2428:	0a000007 	beq	244c <draw_main_canvas+0x290>
                    draw_image(money_x[i], money_y[i], money, 16, 19);
    242c:	e2873028 	add	r3, r7, #40	; 0x28
    2430:	e7950003 	ldr	r0, [r5, r3]
    2434:	e2873034 	add	r3, r7, #52	; 0x34
    2438:	e7951003 	ldr	r1, [r5, r3]
    243c:	e58da000 	str	r10, [sp]
    2440:	e1a02009 	mov	r2, r9
    2444:	e1a03008 	mov	r3, r8
    2448:	ebfffe68 	bl	1df0 <draw_image>
    244c:	e2855004 	add	r5, r5, #4
                    draw_image(turtle_x, turtle_y, turtle, 19, 28);
                }
            }

            //draw moneys
            for (int i = 0; i < 3; i++)
    2450:	e355000c 	cmp	r5, #12
    2454:	1afffff1 	bne	2420 <draw_main_canvas+0x264>
        }

        
        // code for updating the locations of boxes
        //update_location();
        update_location();
    2458:	ebfffe50 	bl	1da0 <update_location>
        wait_for_vsync(); // swap front and back buffers on VGA vertical sync
    245c:	ebffff49 	bl	2188 <wait_for_vsync>
        pixel_buffer_start = *(pixel_ctrl_ptr + 1); // new back buffer
    2460:	e3033fff 	movw	r3, #16383	; 0x3fff
    2464:	e34f3f20 	movt	r3, #65312	; 0xff20
    2468:	e5133fdb 	ldr	r3, [r3, #-4059]	; 0xfffff025
    246c:	e5843018 	str	r3, [r4, #24]
    }
    2470:	eaffff71 	b	223c <draw_main_canvas+0x80>

    //draw things
    draw_main_canvas();
}

void draw_main_canvas(){
    2474:	e59f6050 	ldr	r6, [pc, #80]	; 24cc <draw_main_canvas+0x310>
    2478:	e3a05000 	mov	r5, #0
            
            //draw bad mushrooms
            for (int i = 0; i < 3; i++)
            {
                if (isBadMushroom[i]){
                    draw_image(badMushroom_x[i], badMushroom_y[i], bad_mushroom, 19, 19);
    247c:	e30373d0 	movw	r7, #13264	; 0x33d0
    2480:	e3407000 	movt	r7, #0
    2484:	e24bae19 	sub	r10, r11, #400	; 0x190
    2488:	e3a08013 	mov	r8, #19
    248c:	eaffffb6 	b	236c <draw_main_canvas+0x1b0>
            //draw Mario depends on different movements
            if (mario_jump && is_mario_moving_forward){
                draw_image(mario_x, mario_y, Mario_jump, 26, 25);
            } else if (mario_jump && !is_mario_moving_forward){
                draw_image(mario_x, mario_y, Mario_jump_back, 26, 25);
            } else if (is_mario_moving_forward){
    2490:	e30333d0 	movw	r3, #13264	; 0x33d0
    2494:	e3403000 	movt	r3, #0
    2498:	e5d3307c 	ldrb	r3, [r3, #124]	; 0x7c
    249c:	e3530000 	cmp	r3, #0
    24a0:	0affffa8 	beq	2348 <draw_main_canvas+0x18c>
    24a4:	eaffff9e 	b	2324 <draw_main_canvas+0x168>

    //draw things
    draw_main_canvas();
}

void draw_main_canvas(){
    24a8:	e2846007 	add	r6, r4, #7
    24ac:	e3a05000 	mov	r5, #0

            //draw moneys
            for (int i = 0; i < 3; i++)
            {   
                if (isMoney[i]){
                    draw_image(money_x[i], money_y[i], money, 16, 19);
    24b0:	e30373d0 	movw	r7, #13264	; 0x33d0
    24b4:	e3407000 	movt	r7, #0
    24b8:	e59f9010 	ldr	r9, [pc, #16]	; 24d0 <draw_main_canvas+0x314>
    24bc:	e3a0a013 	mov	r10, #19
    24c0:	e3a08010 	mov	r8, #16
    24c4:	eaffffd5 	b	2420 <draw_main_canvas+0x264>
    24c8:	0017dff0 	.word	0x0017dff0
    24cc:	000033db 	.word	0x000033db
    24d0:	0017e840 	.word	0x0017e840

000024d4 <main>:
void beat_mushroom();
void reset_characters();
void turtle_update_location();
void beat_turtle();

int main(void){
    24d4:	e92d4008 	push	{r3, lr}
    disable_A9_interrupts ();	// disable interrupts in the A9 processor
    24d8:	ebfff765 	bl	274 <disable_A9_interrupts>
	set_A9_IRQ_stack ();			// initialize the stack pointer for IRQ mode
    24dc:	ebfff767 	bl	280 <set_A9_IRQ_stack>
	config_GIC ();					// configure the general interrupt controller
    24e0:	ebfff77d 	bl	2dc <config_GIC>
	config_KEYs ();				// configure pushbutton KEYs to generate interrupts
    24e4:	ebfff78b 	bl	318 <config_KEYs>
    config_PS2();  // configure PS/2 port to generate interrupts
    24e8:	ebfff78f 	bl	32c <config_PS2>

	enable_A9_interrupts ();	// enable interrupts in the A9 processor
    24ec:	ebfff76a 	bl	29c <enable_A9_interrupts>

    //draw things
    draw_main_canvas();
    24f0:	ebffff31 	bl	21bc <draw_main_canvas>

000024f4 <__aeabi_drsub>:
    24f4:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000
    24f8:	ea000000 	b	2500 <__adddf3>

000024fc <__aeabi_dsub>:
    24fc:	e2233102 	eor	r3, r3, #-2147483648	; 0x80000000

00002500 <__adddf3>:
    2500:	e92d4030 	push	{r4, r5, lr}
    2504:	e1a04081 	lsl	r4, r1, #1
    2508:	e1a05083 	lsl	r5, r3, #1
    250c:	e1340005 	teq	r4, r5
    2510:	01300002 	teqeq	r0, r2
    2514:	1194c000 	orrsne	r12, r4, r0
    2518:	1195c002 	orrsne	r12, r5, r2
    251c:	11f0cac4 	mvnsne	r12, r4, asr #21
    2520:	11f0cac5 	mvnsne	r12, r5, asr #21
    2524:	0a00008c 	beq	275c <__adddf3+0x25c>
    2528:	e1a04aa4 	lsr	r4, r4, #21
    252c:	e0745aa5 	rsbs	r5, r4, r5, lsr #21
    2530:	b2655000 	rsblt	r5, r5, #0
    2534:	da000006 	ble	2554 <__adddf3+0x54>
    2538:	e0844005 	add	r4, r4, r5
    253c:	e0202002 	eor	r2, r0, r2
    2540:	e0213003 	eor	r3, r1, r3
    2544:	e0220000 	eor	r0, r2, r0
    2548:	e0231001 	eor	r1, r3, r1
    254c:	e0202002 	eor	r2, r0, r2
    2550:	e0213003 	eor	r3, r1, r3
    2554:	e3550036 	cmp	r5, #54	; 0x36
    2558:	88bd4030 	pophi	{r4, r5, lr}
    255c:	812fff1e 	bxhi	lr
    2560:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    2564:	e1a01601 	lsl	r1, r1, #12
    2568:	e3a0c601 	mov	r12, #1048576	; 0x100000
    256c:	e18c1621 	orr	r1, r12, r1, lsr #12
    2570:	0a000001 	beq	257c <__adddf3+0x7c>
    2574:	e2700000 	rsbs	r0, r0, #0
    2578:	e2e11000 	rsc	r1, r1, #0
    257c:	e3130102 	tst	r3, #-2147483648	; 0x80000000
    2580:	e1a03603 	lsl	r3, r3, #12
    2584:	e18c3623 	orr	r3, r12, r3, lsr #12
    2588:	0a000001 	beq	2594 <__adddf3+0x94>
    258c:	e2722000 	rsbs	r2, r2, #0
    2590:	e2e33000 	rsc	r3, r3, #0
    2594:	e1340005 	teq	r4, r5
    2598:	0a000069 	beq	2744 <__adddf3+0x244>
    259c:	e2444001 	sub	r4, r4, #1
    25a0:	e275e020 	rsbs	lr, r5, #32
    25a4:	ba000005 	blt	25c0 <__adddf3+0xc0>
    25a8:	e1a0ce12 	lsl	r12, r2, lr
    25ac:	e0900532 	adds	r0, r0, r2, lsr r5
    25b0:	e2a11000 	adc	r1, r1, #0
    25b4:	e0900e13 	adds	r0, r0, r3, lsl lr
    25b8:	e0b11553 	adcs	r1, r1, r3, asr r5
    25bc:	ea000006 	b	25dc <__adddf3+0xdc>
    25c0:	e2455020 	sub	r5, r5, #32
    25c4:	e28ee020 	add	lr, lr, #32
    25c8:	e3520001 	cmp	r2, #1
    25cc:	e1a0ce13 	lsl	r12, r3, lr
    25d0:	238cc002 	orrcs	r12, r12, #2
    25d4:	e0900553 	adds	r0, r0, r3, asr r5
    25d8:	e0b11fc3 	adcs	r1, r1, r3, asr #31
    25dc:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    25e0:	5a000002 	bpl	25f0 <__adddf3+0xf0>
    25e4:	e27cc000 	rsbs	r12, r12, #0
    25e8:	e2f00000 	rscs	r0, r0, #0
    25ec:	e2e11000 	rsc	r1, r1, #0
    25f0:	e3510601 	cmp	r1, #1048576	; 0x100000
    25f4:	3a00000f 	bcc	2638 <__adddf3+0x138>
    25f8:	e3510602 	cmp	r1, #2097152	; 0x200000
    25fc:	3a000006 	bcc	261c <__adddf3+0x11c>
    2600:	e1b010a1 	lsrs	r1, r1, #1
    2604:	e1b00060 	rrxs	r0, r0
    2608:	e1a0c06c 	rrx	r12, r12
    260c:	e2844001 	add	r4, r4, #1
    2610:	e1a02a84 	lsl	r2, r4, #21
    2614:	e3720501 	cmn	r2, #4194304	; 0x400000
    2618:	2a00006b 	bcs	27cc <__adddf3+0x2cc>
    261c:	e35c0102 	cmp	r12, #-2147483648	; 0x80000000
    2620:	01b0c0a0 	lsrseq	r12, r0, #1
    2624:	e2b00000 	adcs	r0, r0, #0
    2628:	e0a11a04 	adc	r1, r1, r4, lsl #20
    262c:	e1811005 	orr	r1, r1, r5
    2630:	e8bd4030 	pop	{r4, r5, lr}
    2634:	e12fff1e 	bx	lr
    2638:	e1b0c08c 	lsls	r12, r12, #1
    263c:	e0b00000 	adcs	r0, r0, r0
    2640:	e0a11001 	adc	r1, r1, r1
    2644:	e3110601 	tst	r1, #1048576	; 0x100000
    2648:	e2444001 	sub	r4, r4, #1
    264c:	1afffff2 	bne	261c <__adddf3+0x11c>
    2650:	e3310000 	teq	r1, #0
    2654:	13a03014 	movne	r3, #20
    2658:	03a03034 	moveq	r3, #52	; 0x34
    265c:	01a01000 	moveq	r1, r0
    2660:	03a00000 	moveq	r0, #0
    2664:	e1a02001 	mov	r2, r1
    2668:	e3520801 	cmp	r2, #65536	; 0x10000
    266c:	21a02822 	lsrcs	r2, r2, #16
    2670:	22433010 	subcs	r3, r3, #16
    2674:	e3520c01 	cmp	r2, #256	; 0x100
    2678:	21a02422 	lsrcs	r2, r2, #8
    267c:	22433008 	subcs	r3, r3, #8
    2680:	e3520010 	cmp	r2, #16
    2684:	21a02222 	lsrcs	r2, r2, #4
    2688:	22433004 	subcs	r3, r3, #4
    268c:	e3520004 	cmp	r2, #4
    2690:	22433002 	subcs	r3, r3, #2
    2694:	304330a2 	subcc	r3, r3, r2, lsr #1
    2698:	e04331a2 	sub	r3, r3, r2, lsr #3
    269c:	e2532020 	subs	r2, r3, #32
    26a0:	aa000007 	bge	26c4 <__adddf3+0x1c4>
    26a4:	e292200c 	adds	r2, r2, #12
    26a8:	da000004 	ble	26c0 <__adddf3+0x1c0>
    26ac:	e282c014 	add	r12, r2, #20
    26b0:	e262200c 	rsb	r2, r2, #12
    26b4:	e1a00c11 	lsl	r0, r1, r12
    26b8:	e1a01231 	lsr	r1, r1, r2
    26bc:	ea000004 	b	26d4 <__adddf3+0x1d4>
    26c0:	e2822014 	add	r2, r2, #20
    26c4:	d262c020 	rsble	r12, r2, #32
    26c8:	e1a01211 	lsl	r1, r1, r2
    26cc:	d1811c30 	orrle	r1, r1, r0, lsr r12
    26d0:	d1a00210 	lslle	r0, r0, r2
    26d4:	e0544003 	subs	r4, r4, r3
    26d8:	a0811a04 	addge	r1, r1, r4, lsl #20
    26dc:	a1811005 	orrge	r1, r1, r5
    26e0:	a8bd4030 	popge	{r4, r5, lr}
    26e4:	a12fff1e 	bxge	lr
    26e8:	e1e04004 	mvn	r4, r4
    26ec:	e254401f 	subs	r4, r4, #31
    26f0:	aa00000f 	bge	2734 <__adddf3+0x234>
    26f4:	e294400c 	adds	r4, r4, #12
    26f8:	ca000006 	bgt	2718 <__adddf3+0x218>
    26fc:	e2844014 	add	r4, r4, #20
    2700:	e2642020 	rsb	r2, r4, #32
    2704:	e1a00430 	lsr	r0, r0, r4
    2708:	e1800211 	orr	r0, r0, r1, lsl r2
    270c:	e1851431 	orr	r1, r5, r1, lsr r4
    2710:	e8bd4030 	pop	{r4, r5, lr}
    2714:	e12fff1e 	bx	lr
    2718:	e264400c 	rsb	r4, r4, #12
    271c:	e2642020 	rsb	r2, r4, #32
    2720:	e1a00230 	lsr	r0, r0, r2
    2724:	e1800411 	orr	r0, r0, r1, lsl r4
    2728:	e1a01005 	mov	r1, r5
    272c:	e8bd4030 	pop	{r4, r5, lr}
    2730:	e12fff1e 	bx	lr
    2734:	e1a00431 	lsr	r0, r1, r4
    2738:	e1a01005 	mov	r1, r5
    273c:	e8bd4030 	pop	{r4, r5, lr}
    2740:	e12fff1e 	bx	lr
    2744:	e3340000 	teq	r4, #0
    2748:	e2233601 	eor	r3, r3, #1048576	; 0x100000
    274c:	02211601 	eoreq	r1, r1, #1048576	; 0x100000
    2750:	02844001 	addeq	r4, r4, #1
    2754:	12455001 	subne	r5, r5, #1
    2758:	eaffff8f 	b	259c <__adddf3+0x9c>
    275c:	e1f0cac4 	mvns	r12, r4, asr #21
    2760:	11f0cac5 	mvnsne	r12, r5, asr #21
    2764:	0a00001d 	beq	27e0 <__adddf3+0x2e0>
    2768:	e1340005 	teq	r4, r5
    276c:	01300002 	teqeq	r0, r2
    2770:	0a000004 	beq	2788 <__adddf3+0x288>
    2774:	e194c000 	orrs	r12, r4, r0
    2778:	01a01003 	moveq	r1, r3
    277c:	01a00002 	moveq	r0, r2
    2780:	e8bd4030 	pop	{r4, r5, lr}
    2784:	e12fff1e 	bx	lr
    2788:	e1310003 	teq	r1, r3
    278c:	13a01000 	movne	r1, #0
    2790:	13a00000 	movne	r0, #0
    2794:	18bd4030 	popne	{r4, r5, lr}
    2798:	112fff1e 	bxne	lr
    279c:	e1b0caa4 	lsrs	r12, r4, #21
    27a0:	1a000004 	bne	27b8 <__adddf3+0x2b8>
    27a4:	e1b00080 	lsls	r0, r0, #1
    27a8:	e0b11001 	adcs	r1, r1, r1
    27ac:	23811102 	orrcs	r1, r1, #-2147483648	; 0x80000000
    27b0:	e8bd4030 	pop	{r4, r5, lr}
    27b4:	e12fff1e 	bx	lr
    27b8:	e2944501 	adds	r4, r4, #4194304	; 0x400000
    27bc:	32811601 	addcc	r1, r1, #1048576	; 0x100000
    27c0:	38bd4030 	popcc	{r4, r5, lr}
    27c4:	312fff1e 	bxcc	lr
    27c8:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    27cc:	e385147f 	orr	r1, r5, #2130706432	; 0x7f000000
    27d0:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    27d4:	e3a00000 	mov	r0, #0
    27d8:	e8bd4030 	pop	{r4, r5, lr}
    27dc:	e12fff1e 	bx	lr
    27e0:	e1f0cac4 	mvns	r12, r4, asr #21
    27e4:	11a01003 	movne	r1, r3
    27e8:	11a00002 	movne	r0, r2
    27ec:	01f0cac5 	mvnseq	r12, r5, asr #21
    27f0:	11a03001 	movne	r3, r1
    27f4:	11a02000 	movne	r2, r0
    27f8:	e1904601 	orrs	r4, r0, r1, lsl #12
    27fc:	01925603 	orrseq	r5, r2, r3, lsl #12
    2800:	01310003 	teqeq	r1, r3
    2804:	13811702 	orrne	r1, r1, #524288	; 0x80000
    2808:	e8bd4030 	pop	{r4, r5, lr}
    280c:	e12fff1e 	bx	lr

00002810 <__aeabi_ui2d>:
    2810:	e3300000 	teq	r0, #0
    2814:	03a01000 	moveq	r1, #0
    2818:	012fff1e 	bxeq	lr
    281c:	e92d4030 	push	{r4, r5, lr}
    2820:	e3a04b01 	mov	r4, #1024	; 0x400
    2824:	e2844032 	add	r4, r4, #50	; 0x32
    2828:	e3a05000 	mov	r5, #0
    282c:	e3a01000 	mov	r1, #0
    2830:	eaffff86 	b	2650 <__adddf3+0x150>

00002834 <__aeabi_i2d>:
    2834:	e3300000 	teq	r0, #0
    2838:	03a01000 	moveq	r1, #0
    283c:	012fff1e 	bxeq	lr
    2840:	e92d4030 	push	{r4, r5, lr}
    2844:	e3a04b01 	mov	r4, #1024	; 0x400
    2848:	e2844032 	add	r4, r4, #50	; 0x32
    284c:	e2105102 	ands	r5, r0, #-2147483648	; 0x80000000
    2850:	42600000 	rsbmi	r0, r0, #0
    2854:	e3a01000 	mov	r1, #0
    2858:	eaffff7c 	b	2650 <__adddf3+0x150>

0000285c <__aeabi_f2d>:
    285c:	e1b02080 	lsls	r2, r0, #1
    2860:	e1a011c2 	asr	r1, r2, #3
    2864:	e1a01061 	rrx	r1, r1
    2868:	e1a00e02 	lsl	r0, r2, #28
    286c:	121234ff 	andsne	r3, r2, #-16777216	; 0xff000000
    2870:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    2874:	1221130e 	eorne	r1, r1, #939524096	; 0x38000000
    2878:	112fff1e 	bxne	lr
    287c:	e3320000 	teq	r2, #0
    2880:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    2884:	012fff1e 	bxeq	lr
    2888:	e92d4030 	push	{r4, r5, lr}
    288c:	e3a04d0e 	mov	r4, #896	; 0x380
    2890:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    2894:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    2898:	eaffff6c 	b	2650 <__adddf3+0x150>

0000289c <__aeabi_ul2d>:
    289c:	e1902001 	orrs	r2, r0, r1
    28a0:	012fff1e 	bxeq	lr
    28a4:	e92d4030 	push	{r4, r5, lr}
    28a8:	e3a05000 	mov	r5, #0
    28ac:	ea000006 	b	28cc <__aeabi_l2d+0x1c>

000028b0 <__aeabi_l2d>:
    28b0:	e1902001 	orrs	r2, r0, r1
    28b4:	012fff1e 	bxeq	lr
    28b8:	e92d4030 	push	{r4, r5, lr}
    28bc:	e2115102 	ands	r5, r1, #-2147483648	; 0x80000000
    28c0:	5a000001 	bpl	28cc <__aeabi_l2d+0x1c>
    28c4:	e2700000 	rsbs	r0, r0, #0
    28c8:	e2e11000 	rsc	r1, r1, #0
    28cc:	e3a04b01 	mov	r4, #1024	; 0x400
    28d0:	e2844032 	add	r4, r4, #50	; 0x32
    28d4:	e1b0cb21 	lsrs	r12, r1, #22
    28d8:	0affff44 	beq	25f0 <__adddf3+0xf0>
    28dc:	e3a02003 	mov	r2, #3
    28e0:	e1b0c1ac 	lsrs	r12, r12, #3
    28e4:	12822003 	addne	r2, r2, #3
    28e8:	e1b0c1ac 	lsrs	r12, r12, #3
    28ec:	12822003 	addne	r2, r2, #3
    28f0:	e08221ac 	add	r2, r2, r12, lsr #3
    28f4:	e2623020 	rsb	r3, r2, #32
    28f8:	e1a0c310 	lsl	r12, r0, r3
    28fc:	e1a00230 	lsr	r0, r0, r2
    2900:	e1800311 	orr	r0, r0, r1, lsl r3
    2904:	e1a01231 	lsr	r1, r1, r2
    2908:	e0844002 	add	r4, r4, r2
    290c:	eaffff37 	b	25f0 <__adddf3+0xf0>

00002910 <__aeabi_dmul>:
    2910:	e92d4070 	push	{r4, r5, r6, lr}
    2914:	e3a0c0ff 	mov	r12, #255	; 0xff
    2918:	e38ccc07 	orr	r12, r12, #1792	; 0x700
    291c:	e01c4a21 	ands	r4, r12, r1, lsr #20
    2920:	101c5a23 	andsne	r5, r12, r3, lsr #20
    2924:	1134000c 	teqne	r4, r12
    2928:	1135000c 	teqne	r5, r12
    292c:	0b000075 	bleq	2b08 <__aeabi_dmul+0x1f8>
    2930:	e0844005 	add	r4, r4, r5
    2934:	e0216003 	eor	r6, r1, r3
    2938:	e1c11a8c 	bic	r1, r1, r12, lsl #21
    293c:	e1c33a8c 	bic	r3, r3, r12, lsl #21
    2940:	e1905601 	orrs	r5, r0, r1, lsl #12
    2944:	11925603 	orrsne	r5, r2, r3, lsl #12
    2948:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    294c:	e3833601 	orr	r3, r3, #1048576	; 0x100000
    2950:	0a00001d 	beq	29cc <__aeabi_dmul+0xbc>
    2954:	e08ec290 	umull	r12, lr, r0, r2
    2958:	e3a05000 	mov	r5, #0
    295c:	e0a5e291 	umlal	lr, r5, r1, r2
    2960:	e2062102 	and	r2, r6, #-2147483648	; 0x80000000
    2964:	e0a5e390 	umlal	lr, r5, r0, r3
    2968:	e3a06000 	mov	r6, #0
    296c:	e0a65391 	umlal	r5, r6, r1, r3
    2970:	e33c0000 	teq	r12, #0
    2974:	138ee001 	orrne	lr, lr, #1
    2978:	e24440ff 	sub	r4, r4, #255	; 0xff
    297c:	e3560c02 	cmp	r6, #512	; 0x200
    2980:	e2c44c03 	sbc	r4, r4, #768	; 0x300
    2984:	2a000002 	bcs	2994 <__aeabi_dmul+0x84>
    2988:	e1b0e08e 	lsls	lr, lr, #1
    298c:	e0b55005 	adcs	r5, r5, r5
    2990:	e0a66006 	adc	r6, r6, r6
    2994:	e1821586 	orr	r1, r2, r6, lsl #11
    2998:	e1811aa5 	orr	r1, r1, r5, lsr #21
    299c:	e1a00585 	lsl	r0, r5, #11
    29a0:	e1800aae 	orr	r0, r0, lr, lsr #21
    29a4:	e1a0e58e 	lsl	lr, lr, #11
    29a8:	e254c0fd 	subs	r12, r4, #253	; 0xfd
    29ac:	835c0c07 	cmphi	r12, #1792	; 0x700
    29b0:	8a000011 	bhi	29fc <__aeabi_dmul+0xec>
    29b4:	e35e0102 	cmp	lr, #-2147483648	; 0x80000000
    29b8:	01b0e0a0 	lsrseq	lr, r0, #1
    29bc:	e2b00000 	adcs	r0, r0, #0
    29c0:	e0a11a04 	adc	r1, r1, r4, lsl #20
    29c4:	e8bd4070 	pop	{r4, r5, r6, lr}
    29c8:	e12fff1e 	bx	lr
    29cc:	e2066102 	and	r6, r6, #-2147483648	; 0x80000000
    29d0:	e1861001 	orr	r1, r6, r1
    29d4:	e1800002 	orr	r0, r0, r2
    29d8:	e0211003 	eor	r1, r1, r3
    29dc:	e05440ac 	subs	r4, r4, r12, lsr #1
    29e0:	c074500c 	rsbsgt	r5, r4, r12
    29e4:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    29e8:	c8bd4070 	popgt	{r4, r5, r6, lr}
    29ec:	c12fff1e 	bxgt	lr
    29f0:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    29f4:	e3a0e000 	mov	lr, #0
    29f8:	e2544001 	subs	r4, r4, #1
    29fc:	ca00005d 	bgt	2b78 <__aeabi_dmul+0x268>
    2a00:	e3740036 	cmn	r4, #54	; 0x36
    2a04:	d3a00000 	movle	r0, #0
    2a08:	d2011102 	andle	r1, r1, #-2147483648	; 0x80000000
    2a0c:	d8bd4070 	pople	{r4, r5, r6, lr}
    2a10:	d12fff1e 	bxle	lr
    2a14:	e2644000 	rsb	r4, r4, #0
    2a18:	e2544020 	subs	r4, r4, #32
    2a1c:	aa00001a 	bge	2a8c <__aeabi_dmul+0x17c>
    2a20:	e294400c 	adds	r4, r4, #12
    2a24:	ca00000c 	bgt	2a5c <__aeabi_dmul+0x14c>
    2a28:	e2844014 	add	r4, r4, #20
    2a2c:	e2645020 	rsb	r5, r4, #32
    2a30:	e1a03510 	lsl	r3, r0, r5
    2a34:	e1a00430 	lsr	r0, r0, r4
    2a38:	e1800511 	orr	r0, r0, r1, lsl r5
    2a3c:	e2012102 	and	r2, r1, #-2147483648	; 0x80000000
    2a40:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    2a44:	e0900fa3 	adds	r0, r0, r3, lsr #31
    2a48:	e0a21431 	adc	r1, r2, r1, lsr r4
    2a4c:	e19ee083 	orrs	lr, lr, r3, lsl #1
    2a50:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    2a54:	e8bd4070 	pop	{r4, r5, r6, lr}
    2a58:	e12fff1e 	bx	lr
    2a5c:	e264400c 	rsb	r4, r4, #12
    2a60:	e2645020 	rsb	r5, r4, #32
    2a64:	e1a03410 	lsl	r3, r0, r4
    2a68:	e1a00530 	lsr	r0, r0, r5
    2a6c:	e1800411 	orr	r0, r0, r1, lsl r4
    2a70:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    2a74:	e0900fa3 	adds	r0, r0, r3, lsr #31
    2a78:	e2a11000 	adc	r1, r1, #0
    2a7c:	e19ee083 	orrs	lr, lr, r3, lsl #1
    2a80:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    2a84:	e8bd4070 	pop	{r4, r5, r6, lr}
    2a88:	e12fff1e 	bx	lr
    2a8c:	e2645020 	rsb	r5, r4, #32
    2a90:	e18ee510 	orr	lr, lr, r0, lsl r5
    2a94:	e1a03430 	lsr	r3, r0, r4
    2a98:	e1833511 	orr	r3, r3, r1, lsl r5
    2a9c:	e1a00431 	lsr	r0, r1, r4
    2aa0:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    2aa4:	e1c00431 	bic	r0, r0, r1, lsr r4
    2aa8:	e0800fa3 	add	r0, r0, r3, lsr #31
    2aac:	e19ee083 	orrs	lr, lr, r3, lsl #1
    2ab0:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    2ab4:	e8bd4070 	pop	{r4, r5, r6, lr}
    2ab8:	e12fff1e 	bx	lr
    2abc:	e3340000 	teq	r4, #0
    2ac0:	1a000008 	bne	2ae8 <__aeabi_dmul+0x1d8>
    2ac4:	e2016102 	and	r6, r1, #-2147483648	; 0x80000000
    2ac8:	e1b00080 	lsls	r0, r0, #1
    2acc:	e0a11001 	adc	r1, r1, r1
    2ad0:	e3110601 	tst	r1, #1048576	; 0x100000
    2ad4:	02444001 	subeq	r4, r4, #1
    2ad8:	0afffffa 	beq	2ac8 <__aeabi_dmul+0x1b8>
    2adc:	e1811006 	orr	r1, r1, r6
    2ae0:	e3350000 	teq	r5, #0
    2ae4:	112fff1e 	bxne	lr
    2ae8:	e2036102 	and	r6, r3, #-2147483648	; 0x80000000
    2aec:	e1b02082 	lsls	r2, r2, #1
    2af0:	e0a33003 	adc	r3, r3, r3
    2af4:	e3130601 	tst	r3, #1048576	; 0x100000
    2af8:	02455001 	subeq	r5, r5, #1
    2afc:	0afffffa 	beq	2aec <__aeabi_dmul+0x1dc>
    2b00:	e1833006 	orr	r3, r3, r6
    2b04:	e12fff1e 	bx	lr
    2b08:	e134000c 	teq	r4, r12
    2b0c:	e00c5a23 	and	r5, r12, r3, lsr #20
    2b10:	1135000c 	teqne	r5, r12
    2b14:	0a000007 	beq	2b38 <__aeabi_dmul+0x228>
    2b18:	e1906081 	orrs	r6, r0, r1, lsl #1
    2b1c:	11926083 	orrsne	r6, r2, r3, lsl #1
    2b20:	1affffe5 	bne	2abc <__aeabi_dmul+0x1ac>
    2b24:	e0211003 	eor	r1, r1, r3
    2b28:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    2b2c:	e3a00000 	mov	r0, #0
    2b30:	e8bd4070 	pop	{r4, r5, r6, lr}
    2b34:	e12fff1e 	bx	lr
    2b38:	e1906081 	orrs	r6, r0, r1, lsl #1
    2b3c:	01a00002 	moveq	r0, r2
    2b40:	01a01003 	moveq	r1, r3
    2b44:	11926083 	orrsne	r6, r2, r3, lsl #1
    2b48:	0a000010 	beq	2b90 <__aeabi_dmul+0x280>
    2b4c:	e134000c 	teq	r4, r12
    2b50:	1a000001 	bne	2b5c <__aeabi_dmul+0x24c>
    2b54:	e1906601 	orrs	r6, r0, r1, lsl #12
    2b58:	1a00000c 	bne	2b90 <__aeabi_dmul+0x280>
    2b5c:	e135000c 	teq	r5, r12
    2b60:	1a000003 	bne	2b74 <__aeabi_dmul+0x264>
    2b64:	e1926603 	orrs	r6, r2, r3, lsl #12
    2b68:	11a00002 	movne	r0, r2
    2b6c:	11a01003 	movne	r1, r3
    2b70:	1a000006 	bne	2b90 <__aeabi_dmul+0x280>
    2b74:	e0211003 	eor	r1, r1, r3
    2b78:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    2b7c:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    2b80:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    2b84:	e3a00000 	mov	r0, #0
    2b88:	e8bd4070 	pop	{r4, r5, r6, lr}
    2b8c:	e12fff1e 	bx	lr
    2b90:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    2b94:	e381173e 	orr	r1, r1, #16252928	; 0xf80000
    2b98:	e8bd4070 	pop	{r4, r5, r6, lr}
    2b9c:	e12fff1e 	bx	lr

00002ba0 <__aeabi_ddiv>:
    2ba0:	e92d4070 	push	{r4, r5, r6, lr}
    2ba4:	e3a0c0ff 	mov	r12, #255	; 0xff
    2ba8:	e38ccc07 	orr	r12, r12, #1792	; 0x700
    2bac:	e01c4a21 	ands	r4, r12, r1, lsr #20
    2bb0:	101c5a23 	andsne	r5, r12, r3, lsr #20
    2bb4:	1134000c 	teqne	r4, r12
    2bb8:	1135000c 	teqne	r5, r12
    2bbc:	0b00005e 	bleq	2d3c <__aeabi_ddiv+0x19c>
    2bc0:	e0444005 	sub	r4, r4, r5
    2bc4:	e021e003 	eor	lr, r1, r3
    2bc8:	e1925603 	orrs	r5, r2, r3, lsl #12
    2bcc:	e1a01601 	lsl	r1, r1, #12
    2bd0:	0a00004c 	beq	2d08 <__aeabi_ddiv+0x168>
    2bd4:	e1a03603 	lsl	r3, r3, #12
    2bd8:	e3a05201 	mov	r5, #268435456	; 0x10000000
    2bdc:	e1853223 	orr	r3, r5, r3, lsr #4
    2be0:	e1833c22 	orr	r3, r3, r2, lsr #24
    2be4:	e1a02402 	lsl	r2, r2, #8
    2be8:	e1855221 	orr	r5, r5, r1, lsr #4
    2bec:	e1855c20 	orr	r5, r5, r0, lsr #24
    2bf0:	e1a06400 	lsl	r6, r0, #8
    2bf4:	e20e1102 	and	r1, lr, #-2147483648	; 0x80000000
    2bf8:	e1550003 	cmp	r5, r3
    2bfc:	01560002 	cmpeq	r6, r2
    2c00:	e2a440fd 	adc	r4, r4, #253	; 0xfd
    2c04:	e2844c03 	add	r4, r4, #768	; 0x300
    2c08:	2a000001 	bcs	2c14 <__aeabi_ddiv+0x74>
    2c0c:	e1b030a3 	lsrs	r3, r3, #1
    2c10:	e1a02062 	rrx	r2, r2
    2c14:	e0566002 	subs	r6, r6, r2
    2c18:	e0c55003 	sbc	r5, r5, r3
    2c1c:	e1b030a3 	lsrs	r3, r3, #1
    2c20:	e1a02062 	rrx	r2, r2
    2c24:	e3a00601 	mov	r0, #1048576	; 0x100000
    2c28:	e3a0c702 	mov	r12, #524288	; 0x80000
    2c2c:	e056e002 	subs	lr, r6, r2
    2c30:	e0d5e003 	sbcs	lr, r5, r3
    2c34:	20466002 	subcs	r6, r6, r2
    2c38:	21a0500e 	movcs	r5, lr
    2c3c:	2180000c 	orrcs	r0, r0, r12
    2c40:	e1b030a3 	lsrs	r3, r3, #1
    2c44:	e1a02062 	rrx	r2, r2
    2c48:	e056e002 	subs	lr, r6, r2
    2c4c:	e0d5e003 	sbcs	lr, r5, r3
    2c50:	20466002 	subcs	r6, r6, r2
    2c54:	21a0500e 	movcs	r5, lr
    2c58:	218000ac 	orrcs	r0, r0, r12, lsr #1
    2c5c:	e1b030a3 	lsrs	r3, r3, #1
    2c60:	e1a02062 	rrx	r2, r2
    2c64:	e056e002 	subs	lr, r6, r2
    2c68:	e0d5e003 	sbcs	lr, r5, r3
    2c6c:	20466002 	subcs	r6, r6, r2
    2c70:	21a0500e 	movcs	r5, lr
    2c74:	2180012c 	orrcs	r0, r0, r12, lsr #2
    2c78:	e1b030a3 	lsrs	r3, r3, #1
    2c7c:	e1a02062 	rrx	r2, r2
    2c80:	e056e002 	subs	lr, r6, r2
    2c84:	e0d5e003 	sbcs	lr, r5, r3
    2c88:	20466002 	subcs	r6, r6, r2
    2c8c:	21a0500e 	movcs	r5, lr
    2c90:	218001ac 	orrcs	r0, r0, r12, lsr #3
    2c94:	e195e006 	orrs	lr, r5, r6
    2c98:	0a00000d 	beq	2cd4 <__aeabi_ddiv+0x134>
    2c9c:	e1a05205 	lsl	r5, r5, #4
    2ca0:	e1855e26 	orr	r5, r5, r6, lsr #28
    2ca4:	e1a06206 	lsl	r6, r6, #4
    2ca8:	e1a03183 	lsl	r3, r3, #3
    2cac:	e1833ea2 	orr	r3, r3, r2, lsr #29
    2cb0:	e1a02182 	lsl	r2, r2, #3
    2cb4:	e1b0c22c 	lsrs	r12, r12, #4
    2cb8:	1affffdb 	bne	2c2c <__aeabi_ddiv+0x8c>
    2cbc:	e3110601 	tst	r1, #1048576	; 0x100000
    2cc0:	1a000006 	bne	2ce0 <__aeabi_ddiv+0x140>
    2cc4:	e1811000 	orr	r1, r1, r0
    2cc8:	e3a00000 	mov	r0, #0
    2ccc:	e3a0c102 	mov	r12, #-2147483648	; 0x80000000
    2cd0:	eaffffd5 	b	2c2c <__aeabi_ddiv+0x8c>
    2cd4:	e3110601 	tst	r1, #1048576	; 0x100000
    2cd8:	01811000 	orreq	r1, r1, r0
    2cdc:	03a00000 	moveq	r0, #0
    2ce0:	e254c0fd 	subs	r12, r4, #253	; 0xfd
    2ce4:	835c0c07 	cmphi	r12, #1792	; 0x700
    2ce8:	8affff43 	bhi	29fc <__aeabi_dmul+0xec>
    2cec:	e055c003 	subs	r12, r5, r3
    2cf0:	0056c002 	subseq	r12, r6, r2
    2cf4:	01b0c0a0 	lsrseq	r12, r0, #1
    2cf8:	e2b00000 	adcs	r0, r0, #0
    2cfc:	e0a11a04 	adc	r1, r1, r4, lsl #20
    2d00:	e8bd4070 	pop	{r4, r5, r6, lr}
    2d04:	e12fff1e 	bx	lr
    2d08:	e20ee102 	and	lr, lr, #-2147483648	; 0x80000000
    2d0c:	e18e1621 	orr	r1, lr, r1, lsr #12
    2d10:	e09440ac 	adds	r4, r4, r12, lsr #1
    2d14:	c074500c 	rsbsgt	r5, r4, r12
    2d18:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    2d1c:	c8bd4070 	popgt	{r4, r5, r6, lr}
    2d20:	c12fff1e 	bxgt	lr
    2d24:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    2d28:	e3a0e000 	mov	lr, #0
    2d2c:	e2544001 	subs	r4, r4, #1
    2d30:	eaffff31 	b	29fc <__aeabi_dmul+0xec>
    2d34:	e185e006 	orr	lr, r5, r6
    2d38:	eaffff2f 	b	29fc <__aeabi_dmul+0xec>
    2d3c:	e00c5a23 	and	r5, r12, r3, lsr #20
    2d40:	e134000c 	teq	r4, r12
    2d44:	0135000c 	teqeq	r5, r12
    2d48:	0affff90 	beq	2b90 <__aeabi_dmul+0x280>
    2d4c:	e134000c 	teq	r4, r12
    2d50:	1a000006 	bne	2d70 <__aeabi_ddiv+0x1d0>
    2d54:	e1904601 	orrs	r4, r0, r1, lsl #12
    2d58:	1affff8c 	bne	2b90 <__aeabi_dmul+0x280>
    2d5c:	e135000c 	teq	r5, r12
    2d60:	1affff83 	bne	2b74 <__aeabi_dmul+0x264>
    2d64:	e1a00002 	mov	r0, r2
    2d68:	e1a01003 	mov	r1, r3
    2d6c:	eaffff87 	b	2b90 <__aeabi_dmul+0x280>
    2d70:	e135000c 	teq	r5, r12
    2d74:	1a000004 	bne	2d8c <__aeabi_ddiv+0x1ec>
    2d78:	e1925603 	orrs	r5, r2, r3, lsl #12
    2d7c:	0affff68 	beq	2b24 <__aeabi_dmul+0x214>
    2d80:	e1a00002 	mov	r0, r2
    2d84:	e1a01003 	mov	r1, r3
    2d88:	eaffff80 	b	2b90 <__aeabi_dmul+0x280>
    2d8c:	e1906081 	orrs	r6, r0, r1, lsl #1
    2d90:	11926083 	orrsne	r6, r2, r3, lsl #1
    2d94:	1affff48 	bne	2abc <__aeabi_dmul+0x1ac>
    2d98:	e1904081 	orrs	r4, r0, r1, lsl #1
    2d9c:	1affff74 	bne	2b74 <__aeabi_dmul+0x264>
    2da0:	e1925083 	orrs	r5, r2, r3, lsl #1
    2da4:	1affff5e 	bne	2b24 <__aeabi_dmul+0x214>
    2da8:	eaffff78 	b	2b90 <__aeabi_dmul+0x280>

00002dac <__gedf2>:
    2dac:	e3e0c000 	mvn	r12, #0
    2db0:	ea000002 	b	2dc0 <__cmpdf2+0x4>

00002db4 <__ledf2>:
    2db4:	e3a0c001 	mov	r12, #1
    2db8:	ea000000 	b	2dc0 <__cmpdf2+0x4>

00002dbc <__cmpdf2>:
    2dbc:	e3a0c001 	mov	r12, #1
    2dc0:	e52dc004 	push	{r12}		; (str r12, [sp, #-4]!)
    2dc4:	e1a0c081 	lsl	r12, r1, #1
    2dc8:	e1f0cacc 	mvns	r12, r12, asr #21
    2dcc:	e1a0c083 	lsl	r12, r3, #1
    2dd0:	11f0cacc 	mvnsne	r12, r12, asr #21
    2dd4:	0a00000e 	beq	2e14 <__cmpdf2+0x58>
    2dd8:	e28dd004 	add	sp, sp, #4
    2ddc:	e190c081 	orrs	r12, r0, r1, lsl #1
    2de0:	0192c083 	orrseq	r12, r2, r3, lsl #1
    2de4:	11310003 	teqne	r1, r3
    2de8:	01300002 	teqeq	r0, r2
    2dec:	03a00000 	moveq	r0, #0
    2df0:	012fff1e 	bxeq	lr
    2df4:	e3700000 	cmn	r0, #0
    2df8:	e1310003 	teq	r1, r3
    2dfc:	51510003 	cmppl	r1, r3
    2e00:	01500002 	cmpeq	r0, r2
    2e04:	21a00fc3 	asrcs	r0, r3, #31
    2e08:	31e00fc3 	mvncc	r0, r3, asr #31
    2e0c:	e3800001 	orr	r0, r0, #1
    2e10:	e12fff1e 	bx	lr
    2e14:	e1a0c081 	lsl	r12, r1, #1
    2e18:	e1f0cacc 	mvns	r12, r12, asr #21
    2e1c:	1a000001 	bne	2e28 <__cmpdf2+0x6c>
    2e20:	e190c601 	orrs	r12, r0, r1, lsl #12
    2e24:	1a000004 	bne	2e3c <__cmpdf2+0x80>
    2e28:	e1a0c083 	lsl	r12, r3, #1
    2e2c:	e1f0cacc 	mvns	r12, r12, asr #21
    2e30:	1affffe8 	bne	2dd8 <__cmpdf2+0x1c>
    2e34:	e192c603 	orrs	r12, r2, r3, lsl #12
    2e38:	0affffe6 	beq	2dd8 <__cmpdf2+0x1c>
    2e3c:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    2e40:	e12fff1e 	bx	lr

00002e44 <__aeabi_cdrcmple>:
    2e44:	e1a0c000 	mov	r12, r0
    2e48:	e1a00002 	mov	r0, r2
    2e4c:	e1a0200c 	mov	r2, r12
    2e50:	e1a0c001 	mov	r12, r1
    2e54:	e1a01003 	mov	r1, r3
    2e58:	e1a0300c 	mov	r3, r12
    2e5c:	eaffffff 	b	2e60 <__aeabi_cdcmpeq>

00002e60 <__aeabi_cdcmpeq>:
    2e60:	e92d4001 	push	{r0, lr}
    2e64:	ebffffd4 	bl	2dbc <__cmpdf2>
    2e68:	e3500000 	cmp	r0, #0
    2e6c:	43700000 	cmnmi	r0, #0
    2e70:	e8bd4001 	pop	{r0, lr}
    2e74:	e12fff1e 	bx	lr

00002e78 <__aeabi_dcmpeq>:
    2e78:	e52de008 	str	lr, [sp, #-8]!
    2e7c:	ebfffff7 	bl	2e60 <__aeabi_cdcmpeq>
    2e80:	03a00001 	moveq	r0, #1
    2e84:	13a00000 	movne	r0, #0
    2e88:	e49de008 	ldr	lr, [sp], #8
    2e8c:	e12fff1e 	bx	lr

00002e90 <__aeabi_dcmplt>:
    2e90:	e52de008 	str	lr, [sp, #-8]!
    2e94:	ebfffff1 	bl	2e60 <__aeabi_cdcmpeq>
    2e98:	33a00001 	movcc	r0, #1
    2e9c:	23a00000 	movcs	r0, #0
    2ea0:	e49de008 	ldr	lr, [sp], #8
    2ea4:	e12fff1e 	bx	lr

00002ea8 <__aeabi_dcmple>:
    2ea8:	e52de008 	str	lr, [sp, #-8]!
    2eac:	ebffffeb 	bl	2e60 <__aeabi_cdcmpeq>
    2eb0:	93a00001 	movls	r0, #1
    2eb4:	83a00000 	movhi	r0, #0
    2eb8:	e49de008 	ldr	lr, [sp], #8
    2ebc:	e12fff1e 	bx	lr

00002ec0 <__aeabi_dcmpge>:
    2ec0:	e52de008 	str	lr, [sp, #-8]!
    2ec4:	ebffffde 	bl	2e44 <__aeabi_cdrcmple>
    2ec8:	93a00001 	movls	r0, #1
    2ecc:	83a00000 	movhi	r0, #0
    2ed0:	e49de008 	ldr	lr, [sp], #8
    2ed4:	e12fff1e 	bx	lr

00002ed8 <__aeabi_dcmpgt>:
    2ed8:	e52de008 	str	lr, [sp, #-8]!
    2edc:	ebffffd8 	bl	2e44 <__aeabi_cdrcmple>
    2ee0:	33a00001 	movcc	r0, #1
    2ee4:	23a00000 	movcs	r0, #0
    2ee8:	e49de008 	ldr	lr, [sp], #8
    2eec:	e12fff1e 	bx	lr

00002ef0 <__aeabi_d2iz>:
    2ef0:	e1a02081 	lsl	r2, r1, #1
    2ef4:	e2922602 	adds	r2, r2, #2097152	; 0x200000
    2ef8:	2a00000c 	bcs	2f30 <__aeabi_d2iz+0x40>
    2efc:	5a000009 	bpl	2f28 <__aeabi_d2iz+0x38>
    2f00:	e3e03e3e 	mvn	r3, #992	; 0x3e0
    2f04:	e0532ac2 	subs	r2, r3, r2, asr #21
    2f08:	9a00000a 	bls	2f38 <__aeabi_d2iz+0x48>
    2f0c:	e1a03581 	lsl	r3, r1, #11
    2f10:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
    2f14:	e1833aa0 	orr	r3, r3, r0, lsr #21
    2f18:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    2f1c:	e1a00233 	lsr	r0, r3, r2
    2f20:	12600000 	rsbne	r0, r0, #0
    2f24:	e12fff1e 	bx	lr
    2f28:	e3a00000 	mov	r0, #0
    2f2c:	e12fff1e 	bx	lr
    2f30:	e1900601 	orrs	r0, r0, r1, lsl #12
    2f34:	1a000002 	bne	2f44 <__aeabi_d2iz+0x54>
    2f38:	e2110102 	ands	r0, r1, #-2147483648	; 0x80000000
    2f3c:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
    2f40:	e12fff1e 	bx	lr
    2f44:	e3a00000 	mov	r0, #0
    2f48:	e12fff1e 	bx	lr

00002f4c <atexit>:
    2f4c:	e1a01000 	mov	r1, r0
    2f50:	e3a00000 	mov	r0, #0
    2f54:	e92d4008 	push	{r3, lr}
    2f58:	e1a02000 	mov	r2, r0
    2f5c:	e1a03000 	mov	r3, r0
    2f60:	eb00000e 	bl	2fa0 <__register_exitproc>
    2f64:	e8bd4008 	pop	{r3, lr}
    2f68:	e12fff1e 	bx	lr

00002f6c <exit>:
    2f6c:	e92d4008 	push	{r3, lr}
    2f70:	e3a01000 	mov	r1, #0
    2f74:	e1a04000 	mov	r4, r0
    2f78:	eb000045 	bl	3094 <__call_exitprocs>
    2f7c:	e59f3018 	ldr	r3, [pc, #24]	; 2f9c <exit+0x30>
    2f80:	e5930000 	ldr	r0, [r3]
    2f84:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    2f88:	e3530000 	cmp	r3, #0
    2f8c:	11a0e00f 	movne	lr, pc
    2f90:	112fff13 	bxne	r3
    2f94:	e1a00004 	mov	r0, r4
    2f98:	eb0000c9 	bl	32c4 <_exit>
    2f9c:	0000336c 	.word	0x0000336c

00002fa0 <__register_exitproc>:
    2fa0:	e59fc0e4 	ldr	r12, [pc, #228]	; 308c <__register_exitproc+0xec>
    2fa4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    2fa8:	e59c4000 	ldr	r4, [r12]
    2fac:	e594c148 	ldr	r12, [r4, #328]	; 0x148
    2fb0:	e35c0000 	cmp	r12, #0
    2fb4:	0284cf53 	addeq	r12, r4, #332	; 0x14c
    2fb8:	e59c5004 	ldr	r5, [r12, #4]
    2fbc:	0584c148 	streq	r12, [r4, #328]	; 0x148
    2fc0:	e355001f 	cmp	r5, #31
    2fc4:	e24dd010 	sub	sp, sp, #16
    2fc8:	e1a06000 	mov	r6, r0
    2fcc:	da000015 	ble	3028 <__register_exitproc+0x88>
    2fd0:	e59f00b8 	ldr	r0, [pc, #184]	; 3090 <__register_exitproc+0xf0>
    2fd4:	e3500000 	cmp	r0, #0
    2fd8:	1a000001 	bne	2fe4 <__register_exitproc+0x44>
    2fdc:	e3e00000 	mvn	r0, #0
    2fe0:	ea000018 	b	3048 <__register_exitproc+0xa8>
    2fe4:	e3a00e19 	mov	r0, #400	; 0x190
    2fe8:	e58d100c 	str	r1, [sp, #12]
    2fec:	e58d2008 	str	r2, [sp, #8]
    2ff0:	e58d3004 	str	r3, [sp, #4]
    2ff4:	e320f000 	nop	{0}
    2ff8:	e250c000 	subs	r12, r0, #0
    2ffc:	e59d100c 	ldr	r1, [sp, #12]
    3000:	e59d2008 	ldr	r2, [sp, #8]
    3004:	e59d3004 	ldr	r3, [sp, #4]
    3008:	0afffff3 	beq	2fdc <__register_exitproc+0x3c>
    300c:	e5945148 	ldr	r5, [r4, #328]	; 0x148
    3010:	e3a00000 	mov	r0, #0
    3014:	e58c0004 	str	r0, [r12, #4]
    3018:	e58c5000 	str	r5, [r12]
    301c:	e584c148 	str	r12, [r4, #328]	; 0x148
    3020:	e58c0188 	str	r0, [r12, #392]	; 0x188
    3024:	e58c018c 	str	r0, [r12, #396]	; 0x18c
    3028:	e3560000 	cmp	r6, #0
    302c:	e59c4004 	ldr	r4, [r12, #4]
    3030:	1a000007 	bne	3054 <__register_exitproc+0xb4>
    3034:	e2843002 	add	r3, r4, #2
    3038:	e2844001 	add	r4, r4, #1
    303c:	e78c1103 	str	r1, [r12, r3, lsl #2]
    3040:	e58c4004 	str	r4, [r12, #4]
    3044:	e3a00000 	mov	r0, #0
    3048:	e28dd010 	add	sp, sp, #16
    304c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    3050:	e12fff1e 	bx	lr
    3054:	e3a00001 	mov	r0, #1
    3058:	e1a00410 	lsl	r0, r0, r4
    305c:	e08c8104 	add	r8, r12, r4, lsl #2
    3060:	e3560002 	cmp	r6, #2
    3064:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
    3068:	e5883108 	str	r3, [r8, #264]	; 0x108
    306c:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
    3070:	e1877000 	orr	r7, r7, r0
    3074:	01830000 	orreq	r0, r3, r0
    3078:	e1a05008 	mov	r5, r8
    307c:	e5882088 	str	r2, [r8, #136]	; 0x88
    3080:	e58c7188 	str	r7, [r12, #392]	; 0x188
    3084:	058c018c 	streq	r0, [r12, #396]	; 0x18c
    3088:	eaffffe9 	b	3034 <__register_exitproc+0x94>
    308c:	0000336c 	.word	0x0000336c
    3090:	00000000 	.word	0x00000000

00003094 <__call_exitprocs>:
    3094:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    3098:	e59f3168 	ldr	r3, [pc, #360]	; 3208 <__call_exitprocs+0x174>
    309c:	e5933000 	ldr	r3, [r3]
    30a0:	e24dd014 	sub	sp, sp, #20
    30a4:	e58d3004 	str	r3, [sp, #4]
    30a8:	e2833f52 	add	r3, r3, #328	; 0x148
    30ac:	e58d0008 	str	r0, [sp, #8]
    30b0:	e58d300c 	str	r3, [sp, #12]
    30b4:	e1a07001 	mov	r7, r1
    30b8:	e3a08001 	mov	r8, #1
    30bc:	e59d3004 	ldr	r3, [sp, #4]
    30c0:	e5936148 	ldr	r6, [r3, #328]	; 0x148
    30c4:	e3560000 	cmp	r6, #0
    30c8:	e59db00c 	ldr	r11, [sp, #12]
    30cc:	0a000033 	beq	31a0 <__call_exitprocs+0x10c>
    30d0:	e5965004 	ldr	r5, [r6, #4]
    30d4:	e2554001 	subs	r4, r5, #1
    30d8:	5286a088 	addpl	r10, r6, #136	; 0x88
    30dc:	5285501f 	addpl	r5, r5, #31
    30e0:	508a5105 	addpl	r5, r10, r5, lsl #2
    30e4:	5a000007 	bpl	3108 <__call_exitprocs+0x74>
    30e8:	ea000029 	b	3194 <__call_exitprocs+0x100>
    30ec:	e5953000 	ldr	r3, [r5]
    30f0:	e1530007 	cmp	r3, r7
    30f4:	0a000005 	beq	3110 <__call_exitprocs+0x7c>
    30f8:	e2444001 	sub	r4, r4, #1
    30fc:	e3740001 	cmn	r4, #1
    3100:	e2455004 	sub	r5, r5, #4
    3104:	0a000022 	beq	3194 <__call_exitprocs+0x100>
    3108:	e3570000 	cmp	r7, #0
    310c:	1afffff6 	bne	30ec <__call_exitprocs+0x58>
    3110:	e5963004 	ldr	r3, [r6, #4]
    3114:	e06a2005 	rsb	r2, r10, r5
    3118:	e2433001 	sub	r3, r3, #1
    311c:	e0862002 	add	r2, r6, r2
    3120:	e1530004 	cmp	r3, r4
    3124:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
    3128:	13a01000 	movne	r1, #0
    312c:	05864004 	streq	r4, [r6, #4]
    3130:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
    3134:	e3530000 	cmp	r3, #0
    3138:	0affffee 	beq	30f8 <__call_exitprocs+0x64>
    313c:	e1a02418 	lsl	r2, r8, r4
    3140:	e5961188 	ldr	r1, [r6, #392]	; 0x188
    3144:	e1120001 	tst	r2, r1
    3148:	e5969004 	ldr	r9, [r6, #4]
    314c:	0a000016 	beq	31ac <__call_exitprocs+0x118>
    3150:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
    3154:	e1120001 	tst	r2, r1
    3158:	1a000016 	bne	31b8 <__call_exitprocs+0x124>
    315c:	e59d0008 	ldr	r0, [sp, #8]
    3160:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
    3164:	e1a0e00f 	mov	lr, pc
    3168:	e12fff13 	bx	r3
    316c:	e5963004 	ldr	r3, [r6, #4]
    3170:	e1530009 	cmp	r3, r9
    3174:	1affffd0 	bne	30bc <__call_exitprocs+0x28>
    3178:	e59b3000 	ldr	r3, [r11]
    317c:	e1530006 	cmp	r3, r6
    3180:	1affffcd 	bne	30bc <__call_exitprocs+0x28>
    3184:	e2444001 	sub	r4, r4, #1
    3188:	e3740001 	cmn	r4, #1
    318c:	e2455004 	sub	r5, r5, #4
    3190:	1affffdc 	bne	3108 <__call_exitprocs+0x74>
    3194:	e59f1070 	ldr	r1, [pc, #112]	; 320c <__call_exitprocs+0x178>
    3198:	e3510000 	cmp	r1, #0
    319c:	1a000009 	bne	31c8 <__call_exitprocs+0x134>
    31a0:	e28dd014 	add	sp, sp, #20
    31a4:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    31a8:	e12fff1e 	bx	lr
    31ac:	e1a0e00f 	mov	lr, pc
    31b0:	e12fff13 	bx	r3
    31b4:	eaffffec 	b	316c <__call_exitprocs+0xd8>
    31b8:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
    31bc:	e1a0e00f 	mov	lr, pc
    31c0:	e12fff13 	bx	r3
    31c4:	eaffffe8 	b	316c <__call_exitprocs+0xd8>
    31c8:	e5963004 	ldr	r3, [r6, #4]
    31cc:	e3530000 	cmp	r3, #0
    31d0:	e5963000 	ldr	r3, [r6]
    31d4:	1a000008 	bne	31fc <__call_exitprocs+0x168>
    31d8:	e3530000 	cmp	r3, #0
    31dc:	0a000006 	beq	31fc <__call_exitprocs+0x168>
    31e0:	e1a00006 	mov	r0, r6
    31e4:	e58b3000 	str	r3, [r11]
    31e8:	e320f000 	nop	{0}
    31ec:	e59b6000 	ldr	r6, [r11]
    31f0:	e3560000 	cmp	r6, #0
    31f4:	1affffb5 	bne	30d0 <__call_exitprocs+0x3c>
    31f8:	eaffffe8 	b	31a0 <__call_exitprocs+0x10c>
    31fc:	e1a0b006 	mov	r11, r6
    3200:	e1a06003 	mov	r6, r3
    3204:	eafffff9 	b	31f0 <__call_exitprocs+0x15c>
    3208:	0000336c 	.word	0x0000336c
    320c:	00000000 	.word	0x00000000

00003210 <register_fini>:
    3210:	e92d4008 	push	{r3, lr}
    3214:	e59f3010 	ldr	r3, [pc, #16]	; 322c <register_fini+0x1c>
    3218:	e3530000 	cmp	r3, #0
    321c:	159f000c 	ldrne	r0, [pc, #12]	; 3230 <register_fini+0x20>
    3220:	1bffff49 	blne	2f4c <atexit>
    3224:	e8bd4008 	pop	{r3, lr}
    3228:	e12fff1e 	bx	lr
    322c:	00003394 	.word	0x00003394
    3230:	00003234 	.word	0x00003234

00003234 <__libc_fini_array>:
    3234:	e92d4038 	push	{r3, r4, r5, lr}
    3238:	e59f5030 	ldr	r5, [pc, #48]	; 3270 <__libc_fini_array+0x3c>
    323c:	e59f4030 	ldr	r4, [pc, #48]	; 3274 <__libc_fini_array+0x40>
    3240:	e0654004 	rsb	r4, r5, r4
    3244:	e1b04144 	asrs	r4, r4, #2
    3248:	10855104 	addne	r5, r5, r4, lsl #2
    324c:	0a000004 	beq	3264 <__libc_fini_array+0x30>
    3250:	e5353004 	ldr	r3, [r5, #-4]!
    3254:	e1a0e00f 	mov	lr, pc
    3258:	e12fff13 	bx	r3
    325c:	e2544001 	subs	r4, r4, #1
    3260:	1afffffa 	bne	3250 <__libc_fini_array+0x1c>
    3264:	eb00004a 	bl	3394 <__libc_fini>
    3268:	e8bd4038 	pop	{r3, r4, r5, lr}
    326c:	e12fff1e 	bx	lr
    3270:	000033ac 	.word	0x000033ac
    3274:	000033b0 	.word	0x000033b0

00003278 <__cs3_premain>:
    3278:	e92d4008 	push	{r3, lr}
    327c:	eb000017 	bl	32e0 <__libc_init_array>
    3280:	e59f3030 	ldr	r3, [pc, #48]	; 32b8 <__cs3_premain+0x40>
    3284:	e3530000 	cmp	r3, #0
    3288:	15930000 	ldrne	r0, [r3]
    328c:	01a00003 	moveq	r0, r3
    3290:	e59f3024 	ldr	r3, [pc, #36]	; 32bc <__cs3_premain+0x44>
    3294:	e3530000 	cmp	r3, #0
    3298:	15931000 	ldrne	r1, [r3]
    329c:	01a01003 	moveq	r1, r3
    32a0:	e3a02000 	mov	r2, #0
    32a4:	ebfffc8a 	bl	24d4 <main>
    32a8:	e59f3010 	ldr	r3, [pc, #16]	; 32c0 <__cs3_premain+0x48>
    32ac:	e3530000 	cmp	r3, #0
    32b0:	1bffff2d 	blne	2f6c <exit>
    32b4:	eafffffe 	b	32b4 <__cs3_premain+0x3c>
	...
    32c0:	00002f6c 	.word	0x00002f6c

000032c4 <_exit>:
    32c4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    32c8:	e3a00018 	mov	r0, #24
    32cc:	e59f1004 	ldr	r1, [pc, #4]	; 32d8 <_exit+0x14>
    32d0:	ef123456 	svc	0x00123456
    32d4:	eafffffe 	b	32d4 <_exit+0x10>
    32d8:	00020026 	.word	0x00020026

000032dc <__cs3_isr_interrupt>:
    32dc:	eafffffe 	b	32dc <__cs3_isr_interrupt>

000032e0 <__libc_init_array>:
    32e0:	e92d4070 	push	{r4, r5, r6, lr}
    32e4:	e59f506c 	ldr	r5, [pc, #108]	; 3358 <__libc_init_array+0x78>
    32e8:	e59f606c 	ldr	r6, [pc, #108]	; 335c <__libc_init_array+0x7c>
    32ec:	e0656006 	rsb	r6, r5, r6
    32f0:	e1b06146 	asrs	r6, r6, #2
    32f4:	12455004 	subne	r5, r5, #4
    32f8:	13a04000 	movne	r4, #0
    32fc:	0a000005 	beq	3318 <__libc_init_array+0x38>
    3300:	e5b53004 	ldr	r3, [r5, #4]!
    3304:	e2844001 	add	r4, r4, #1
    3308:	e1a0e00f 	mov	lr, pc
    330c:	e12fff13 	bx	r3
    3310:	e1560004 	cmp	r6, r4
    3314:	1afffff9 	bne	3300 <__libc_init_array+0x20>
    3318:	e59f5040 	ldr	r5, [pc, #64]	; 3360 <__libc_init_array+0x80>
    331c:	e59f6040 	ldr	r6, [pc, #64]	; 3364 <__libc_init_array+0x84>
    3320:	e0656006 	rsb	r6, r5, r6
    3324:	eb000012 	bl	3374 <_init>
    3328:	e1b06146 	asrs	r6, r6, #2
    332c:	12455004 	subne	r5, r5, #4
    3330:	13a04000 	movne	r4, #0
    3334:	0a000005 	beq	3350 <__libc_init_array+0x70>
    3338:	e5b53004 	ldr	r3, [r5, #4]!
    333c:	e2844001 	add	r4, r4, #1
    3340:	e1a0e00f 	mov	lr, pc
    3344:	e12fff13 	bx	r3
    3348:	e1560004 	cmp	r6, r4
    334c:	1afffff9 	bne	3338 <__libc_init_array+0x58>
    3350:	e8bd4070 	pop	{r4, r5, r6, lr}
    3354:	e12fff1e 	bx	lr
    3358:	0000338c 	.word	0x0000338c
    335c:	0000338c 	.word	0x0000338c
    3360:	0000338c 	.word	0x0000338c
    3364:	00003394 	.word	0x00003394

Disassembly of section .rodata:

0000336c <_global_impure_ptr>:
    336c:	0017fe08 00000043                       ....C...

00003374 <_init>:
    3374:	e1a0c00d 	mov	r12, sp
    3378:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    337c:	e24cb004 	sub	r11, r12, #4
    3380:	e24bd028 	sub	sp, r11, #40	; 0x28
    3384:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    3388:	e12fff1e 	bx	lr

0000338c <__init_array_start>:
    338c:	00003210 	.word	0x00003210

00003390 <__frame_dummy_init_array_entry>:
    3390:	00000208                                ....

00003394 <__libc_fini>:
    3394:	e1a0c00d 	mov	r12, sp
    3398:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    339c:	e24cb004 	sub	r11, r12, #4
    33a0:	e24bd028 	sub	sp, r11, #40	; 0x28
    33a4:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    33a8:	e12fff1e 	bx	lr

000033ac <__fini_array_start>:
    33ac:	000001c4 	.word	0x000001c4

000033b0 <__cs3_regions>:
    33b0:	00000000 	.word	0x00000000
    33b4:	00000040 	.word	0x00000040
    33b8:	00000040 	.word	0x00000040
    33bc:	001801f8 	.word	0x001801f8
    33c0:	00000040 	.word	0x00000040

000033c4 <__cs3_regions_end>:
    33c4:	00000000 	.word	0x00000000
