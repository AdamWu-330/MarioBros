
D:/ECE243_Labs/Mario_Bro/MarioBros/main.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	5c 02 00 00 60 02 00 00 64 02 00 00 68 02 00 00     \...`...d...h...
  30:	6c 02 00 00 38 3d 00 00 cc 06 00 00 70 02 00 00     l...8=......p...

Disassembly of section .text:

00000040 <__cs3_reset_generic>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_region_zero_size_ram+0x90>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_region_zero_size_ram+0x8c>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_region_zero_size_ram+0x94>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_region_zero_size_ram+0x5c>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_region_zero_size_ram+0x5c>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <__cs3_region_zero_size_ram+0x44>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_region_zero_size_ram+0x7c>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <__cs3_region_zero_size_ram+0x6c>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_region_zero_size_ram+0x1c>
      d4:	eb000efe 	bl	3cd4 <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	00003e48 	.word	0x00003e48

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
     120:	001ce160 	.word	0x001ce160

00000124 <__cs3_heap_start_ptr>:
     124:	001ce1b0 	.word	0x001ce1b0

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
     16c:	001ce168 	.word	0x001ce168
     170:	001ce16b 	.word	0x001ce16b
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
     1b8:	001ce168 	.word	0x001ce168
     1bc:	001ce168 	.word	0x001ce168
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	001ce168 	.word	0x001ce168
     200:	00000000 	.word	0x00000000
     204:	00003dc4 	.word	0x00003dc4

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	00003dc4 	.word	0x00003dc4
     250:	001ce16c 	.word	0x001ce16c
     254:	00003e48 	.word	0x00003e48
     258:	00000000 	.word	0x00000000

0000025c <__cs3_reset>:
	return;
} 

// Define the remaining exception handlers
void __attribute__ ((interrupt)) __cs3_reset (void)
{
     25c:	eafffffe 	b	25c <__cs3_reset>

00000260 <__cs3_isr_undef>:
    while(1);
}

void __attribute__ ((interrupt)) __cs3_isr_undef (void)
{
     260:	eafffffe 	b	260 <__cs3_isr_undef>

00000264 <__cs3_isr_swi>:
    while(1);
}

void __attribute__ ((interrupt)) __cs3_isr_swi (void)
{
     264:	eafffffe 	b	264 <__cs3_isr_swi>

00000268 <__cs3_isr_pabort>:
    while(1);
}

void __attribute__ ((interrupt)) __cs3_isr_pabort (void)
{
     268:	eafffffe 	b	268 <__cs3_isr_pabort>

0000026c <__cs3_isr_dabort>:
    while(1);
}

void __attribute__ ((interrupt)) __cs3_isr_dabort (void)
{
     26c:	eafffffe 	b	26c <__cs3_isr_dabort>

00000270 <__cs3_isr_fiq>:
    while(1);
}

void __attribute__ ((interrupt)) __cs3_isr_fiq (void)
{
     270:	eafffffe 	b	270 <__cs3_isr_fiq>

00000274 <disable_A9_interrupts>:
 * Turn off interrupts in the ARM processor
*/
void disable_A9_interrupts(void)
{
	int status = 0b11010011;
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
     274:	e3a030d3 	mov	r3, #211	; 0xd3
     278:	e129f003 	msr	CPSR_fc, r3
     27c:	e12fff1e 	bx	lr

00000280 <set_A9_IRQ_stack>:
{
	int stack, mode;
	stack = A9_ONCHIP_END - 7;		// top of A9 onchip memory, aligned to 8 bytes
	/* change processor to IRQ mode with interrupts disabled */
	mode = INT_DISABLE | IRQ_MODE;
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
     280:	e3a030d2 	mov	r3, #210	; 0xd2
     284:	e129f003 	msr	CPSR_fc, r3
	/* set banked stack pointer */
	asm("mov sp, %[ps]" : : [ps] "r" (stack));
     288:	e3e03007 	mvn	r3, #7
     28c:	e1a0d003 	mov	sp, r3

	/* go back to SVC mode before executing subroutine return! */
	mode = INT_DISABLE | SVC_MODE;
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
     290:	e3a030d3 	mov	r3, #211	; 0xd3
     294:	e129f003 	msr	CPSR_fc, r3
     298:	e12fff1e 	bx	lr

0000029c <enable_A9_interrupts>:
 * Turn on interrupts in the ARM processor
*/
void enable_A9_interrupts(void)
{
	int status = SVC_MODE | INT_ENABLE;
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
     29c:	e3a03053 	mov	r3, #83	; 0x53
     2a0:	e129f003 	msr	CPSR_fc, r3
     2a4:	e12fff1e 	bx	lr

000002a8 <config_interrupt>:
 * We configure only the Interrupt Set Enable Registers (ICDISERn) and Interrupt 
 * Processor Target Registers (ICDIPTRn). The default (reset) values are used for 
 * other registers in the GIC
*/
void config_interrupt (int N, int CPU_target)
{
     2a8:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
	int reg_offset, index, value, address;
    
	/* Configure the Interrupt Set-Enable Registers (ICDISERn). 
	 * reg_offset = (integer_div(N / 32) * 4
	 * value = 1 << (N mod 32) */
	reg_offset = (N >> 3) & 0xFFFFFFFC; 
     2ac:	e1a031c0 	asr	r3, r0, #3
     2b0:	e3c33003 	bic	r3, r3, #3
	index = N & 0x1F;
	value = 0x1 << index;
	address = MPCORE_GIC_DIST + ICDISER + reg_offset;
     2b4:	e2433b4b 	sub	r3, r3, #76800	; 0x12c00
    
	/* Configure the Interrupt Set-Enable Registers (ICDISERn). 
	 * reg_offset = (integer_div(N / 32) * 4
	 * value = 1 << (N mod 32) */
	reg_offset = (N >> 3) & 0xFFFFFFFC; 
	index = N & 0x1F;
     2b8:	e200201f 	and	r2, r0, #31
	value = 0x1 << index;
	address = MPCORE_GIC_DIST + ICDISER + reg_offset;
	/* Now that we know the register address and value, set the appropriate bit */
   *(int *)address |= value;
     2bc:	e513c300 	ldr	r12, [r3, #-768]	; 0xfffffd00
     2c0:	e3a04001 	mov	r4, #1
     2c4:	e18c2214 	orr	r2, r12, r4, lsl r2
     2c8:	e5032300 	str	r2, [r3, #-768]	; 0xfffffd00
	 * index = N mod 4 */
	reg_offset = (N & 0xFFFFFFFC);
	index = N & 0x3;
	address = MPCORE_GIC_DIST + ICDIPTR + reg_offset + index;
	/* Now that we know the register address and value, write to (only) the appropriate byte */
	*(char *)address = (char) CPU_target;
     2cc:	e2400b4a 	sub	r0, r0, #75776	; 0x12800
     2d0:	e5c01000 	strb	r1, [r0]
}
     2d4:	e8bd0010 	ldmfd	sp!, {r4}
     2d8:	e12fff1e 	bx	lr

000002dc <config_GIC>:

/* 
 * Configure the Generic Interrupt Controller (GIC)
*/
void config_GIC(void)
{
     2dc:	e92d4010 	push	{r4, lr}
	int address;

	/* configure the FPGA interval timer and KEYs interrupts */
    *((int *)0xFFFED848) = 0x00000101;
     2e0:	e3e04a12 	mvn	r4, #73728	; 0x12000
     2e4:	e3003101 	movw	r3, #257	; 0x101
     2e8:	e50437b7 	str	r3, [r4, #-1975]	; 0xfffff849
    *((int *)0xFFFED108) = 0x00000300;
     2ec:	e3a03c03 	mov	r3, #768	; 0x300
     2f0:	e5043ef7 	str	r3, [r4, #-3831]	; 0xfffff109

  	config_interrupt (KEYS_IRQ, CPU0); 	// configure the FPGA KEYs interrupt
     2f4:	e3a00049 	mov	r0, #73	; 0x49
     2f8:	e3a01001 	mov	r1, #1
     2fc:	ebffffe9 	bl	2a8 <config_interrupt>
	config_interrupt (PS2_IRQ, CPU0);  
     300:	e3a0004f 	mov	r0, #79	; 0x4f
     304:	e3a01001 	mov	r1, #1
     308:	ebffffe6 	bl	2a8 <config_interrupt>
    
  	// Set Interrupt Priority Mask Register (ICCPMR). Enable interrupts of all priorities 
	address = MPCORE_GIC_CPUIF + ICCPMR;
  	*(int *) address = 0xFFFF;       
     30c:	e3e02a13 	mvn	r2, #77824	; 0x13000
     310:	e30f3fff 	movw	r3, #65535	; 0xffff
     314:	e5023efb 	str	r3, [r2, #-3835]	; 0xfffff105

  	// Set CPU Interface Control Register (ICCICR). Enable signaling of interrupts
	address = MPCORE_GIC_CPUIF + ICCICR;
  	*(int *) address = 1;       
     318:	e3a03001 	mov	r3, #1
     31c:	e5023eff 	str	r3, [r2, #-3839]	; 0xfffff101

	// Configure the Distributor Control Register (ICDDCR) to send pending interrupts to CPUs 
	address = MPCORE_GIC_DIST + ICDDCR;
  	*(int *) address = 1;          
     320:	e5043fff 	str	r3, [r4, #-4095]	; 0xfffff001
     324:	e8bd8010 	pop	{r4, pc}

00000328 <config_KEYs>:
/* setup the KEY interrupts in the FPGA */
void config_KEYs()
{
	volatile int * KEY_ptr = (int *) KEY_BASE;	// pushbutton KEY base address

	*(KEY_ptr + 2) = 0xF; 	// enable interrupts for the two KEYs
     328:	e3a03000 	mov	r3, #0
     32c:	e34f3f20 	movt	r3, #65312	; 0xff20
     330:	e3a0200f 	mov	r2, #15
     334:	e5832058 	str	r2, [r3, #88]	; 0x58
     338:	e12fff1e 	bx	lr

0000033c <config_PS2>:

/* setup the PS/2 interrupts */
void config_PS2() {
    volatile int * PS2_ptr = (int *)PS2_BASE; // PS/2 port address

    *(PS2_ptr) = 0xFF; /* reset */
     33c:	e3a03000 	mov	r3, #0
     340:	e34f3f20 	movt	r3, #65312	; 0xff20
     344:	e3a020ff 	mov	r2, #255	; 0xff
     348:	e5832100 	str	r2, [r3, #256]	; 0x100
    *(PS2_ptr + 1) =
     34c:	e3a02001 	mov	r2, #1
     350:	e5832104 	str	r2, [r3, #260]	; 0x104
     354:	e12fff1e 	bx	lr

00000358 <config_interval_timer>:
    volatile int * interval_timer_ptr =
        (int *)TIMER_BASE; // interal timer base address

    /* set the interval timer period for scrolling the HEX displays */
    int counter                 = 1E8; // 1/(100 MHz) x 10 ^ 8 = 1sec
    *(interval_timer_ptr + 0x2) = (counter & 0xFFFF);
     358:	e3a03a02 	mov	r3, #8192	; 0x2000
     35c:	e34f3f20 	movt	r3, #65312	; 0xff20
     360:	e3a02ce1 	mov	r2, #57600	; 0xe100
     364:	e5832008 	str	r2, [r3, #8]
    *(interval_timer_ptr + 0x3) = (counter >> 16) & 0xFFFF;
     368:	e30025f5 	movw	r2, #1525	; 0x5f5
     36c:	e583200c 	str	r2, [r3, #12]

    /* start interval timer, enable its interrupts */
    *(interval_timer_ptr + 1) = 0x7; // STOP = 0, START = 1, CONT = 1, ITO = 1
     370:	e3a02007 	mov	r2, #7
     374:	e5832004 	str	r2, [r3, #4]
     378:	e12fff1e 	bx	lr

0000037c <reset>:
		}
	}
	return;
}

void reset(){
     37c:	e92d0030 	push	{r4, r5}
	//which map 
	map_num = 1;
     380:	e3033e50 	movw	r3, #15952	; 0x3e50
     384:	e3403000 	movt	r3, #0
     388:	e3a0c001 	mov	r12, #1
     38c:	e583c000 	str	r12, [r3]

	lives = 1;
     390:	e583c004 	str	r12, [r3, #4]

	score = 0;
     394:	e30e2184 	movw	r2, #57732	; 0xe184
     398:	e340201c 	movt	r2, #28
     39c:	e3a01000 	mov	r1, #0
     3a0:	e5821000 	str	r1, [r2]

	time_left = 200;
     3a4:	e3a000c8 	mov	r0, #200	; 0xc8
     3a8:	e5830008 	str	r0, [r3, #8]

	//Mario's position
	mario_x = 10;
     3ac:	e3a0000a 	mov	r0, #10
     3b0:	e583000c 	str	r0, [r3, #12]
	mario_y = LOWEST_Y - 25;
     3b4:	e3a000b1 	mov	r0, #177	; 0xb1
     3b8:	e5830010 	str	r0, [r3, #16]

	//up to three bad mushrooms
	isBadMushroom[0] = true;
     3bc:	e5c3c014 	strb	r12, [r3, #20]
	isBadMushroom[1] = true;
     3c0:	e5c3c015 	strb	r12, [r3, #21]
	isBadMushroom[2] = false;
     3c4:	e5c31016 	strb	r1, [r3, #22]
	badMushroom_x[0] = 179;
     3c8:	e3a000b3 	mov	r0, #179	; 0xb3
     3cc:	e5830018 	str	r0, [r3, #24]
	badMushroom_x[1] = 152 - 19;
     3d0:	e3a00085 	mov	r0, #133	; 0x85
     3d4:	e583001c 	str	r0, [r3, #28]
	badMushroom_x[2] = OUT_SCREEN;
     3d8:	e3e00031 	mvn	r0, #49	; 0x31
     3dc:	e5830020 	str	r0, [r3, #32]
	badMushroom_y[0] = LOWEST_Y - 19;
     3e0:	e3a040b7 	mov	r4, #183	; 0xb7
     3e4:	e5834024 	str	r4, [r3, #36]	; 0x24
	badMushroom_y[1] = 131 - 19;
     3e8:	e3a04070 	mov	r4, #112	; 0x70
     3ec:	e5834028 	str	r4, [r3, #40]	; 0x28
	badMushroom_y[2] = OUT_SCREEN;
     3f0:	e583002c 	str	r0, [r3, #44]	; 0x2c
	isBadMushroomMovingRight[0] = false;
     3f4:	e5c21004 	strb	r1, [r2, #4]
	isBadMushroomMovingRight[1] = false;
     3f8:	e5c21005 	strb	r1, [r2, #5]
	isBadMushroomMovingRight[2] = false;
     3fc:	e5c21006 	strb	r1, [r2, #6]

	//up to three moneys
	isMoney[0] = false;
     400:	e5c21008 	strb	r1, [r2, #8]
	isMoney[1] = false;
     404:	e5c21009 	strb	r1, [r2, #9]
	isMoney[2] = false;
     408:	e5c2100a 	strb	r1, [r2, #10]
	money_x[0] = 67;
     40c:	e3a05043 	mov	r5, #67	; 0x43
     410:	e5835030 	str	r5, [r3, #48]	; 0x30
	money_x[1] = OUT_SCREEN;
     414:	e5830034 	str	r0, [r3, #52]	; 0x34
	money_x[2] = OUT_SCREEN;
     418:	e5830038 	str	r0, [r3, #56]	; 0x38
	money_y[0] = 112;
     41c:	e583403c 	str	r4, [r3, #60]	; 0x3c
	money_y[1] = OUT_SCREEN;
     420:	e5830040 	str	r0, [r3, #64]	; 0x40
	money_y[2] = OUT_SCREEN;
     424:	e5830044 	str	r0, [r3, #68]	; 0x44

	//Good mushroom
	isGoodMushroom = false;
     428:	e5c2100b 	strb	r1, [r2, #11]
	goodMushroom_x = 118;
     42c:	e3a00076 	mov	r0, #118	; 0x76
     430:	e5830048 	str	r0, [r3, #72]	; 0x48
	goodMushroom_y = 112;
     434:	e583404c 	str	r4, [r3, #76]	; 0x4c

	//turtle
	isTurtle = false;
     438:	e5c2100c 	strb	r1, [r2, #12]
	isTurtleMovingRight = true;
     43c:	e5c3c050 	strb	r12, [r3, #80]	; 0x50
	turtle_x = 43;
     440:	e3a0002b 	mov	r0, #43	; 0x2b
     444:	e5830054 	str	r0, [r3, #84]	; 0x54
	turtle_y = 93 - 28;
     448:	e3a00041 	mov	r0, #65	; 0x41
     44c:	e5830058 	str	r0, [r3, #88]	; 0x58

	byte1 = 0;
     450:	e5c2100d 	strb	r1, [r2, #13]
	byte2 = 0;
     454:	e5c2100e 	strb	r1, [r2, #14]
	byte3 = 0; // PS/2 variables
     458:	e5c2100f 	strb	r1, [r2, #15]

	isWin = false;
     45c:	e5c21010 	strb	r1, [r2, #16]
	isGameOver = false;
     460:	e5c21011 	strb	r1, [r2, #17]
}
     464:	e8bd0030 	pop	{r4, r5}
     468:	e12fff1e 	bx	lr

0000046c <PS2_ISR>:
	*LED_ptr = LED_bits;
	return;
}

void PS2_ISR( void )
{
     46c:	e92d4008 	push	{r3, lr}
  	volatile int * PS2_ptr = (int *) 0xFF200100;		// PS/2 port address
	int PS2_data, RAVAIL;

	PS2_data = *(PS2_ptr);									// read the Data register in the PS/2 port
     470:	e3a03000 	mov	r3, #0
     474:	e34f3f20 	movt	r3, #65312	; 0xff20
     478:	e5932100 	ldr	r2, [r3, #256]	; 0x100
	RAVAIL = (PS2_data & 0xFFFF0000) >> 16;			// extract the RAVAIL field
	if (RAVAIL > 0)
     47c:	e1b03822 	lsrs	r3, r2, #16
     480:	08bd8008 	popeq	{r3, pc}
	{
		/* always save the last three bytes received */
		byte1 = byte2;
     484:	e30e3184 	movw	r3, #57732	; 0xe184
     488:	e340301c 	movt	r3, #28
     48c:	e5d3100e 	ldrb	r1, [r3, #14]
     490:	e5c3100d 	strb	r1, [r3, #13]
		byte2 = byte3;
     494:	e5d3100f 	ldrb	r1, [r3, #15]
     498:	e5c3100e 	strb	r1, [r3, #14]
		byte3 = PS2_data & 0xFF;
     49c:	e6ef2072 	uxtb	r2, r2
     4a0:	e5c3200f 	strb	r2, [r3, #15]
		if ( (byte2 == (char) 0xE0) && (byte3 == (char) 0x6B) ) //left arrow
     4a4:	e5d3300e 	ldrb	r3, [r3, #14]
     4a8:	e35300e0 	cmp	r3, #224	; 0xe0
     4ac:	1a000009 	bne	4d8 <PS2_ISR+0x6c>
     4b0:	e30e3184 	movw	r3, #57732	; 0xe184
     4b4:	e340301c 	movt	r3, #28
     4b8:	e5d3300f 	ldrb	r3, [r3, #15]
     4bc:	e353006b 	cmp	r3, #107	; 0x6b
     4c0:	1a000004 	bne	4d8 <PS2_ISR+0x6c>
			mario_move_backward = true;
     4c4:	e30e3184 	movw	r3, #57732	; 0xe184
     4c8:	e340301c 	movt	r3, #28
     4cc:	e3a02001 	mov	r2, #1
     4d0:	e5c32012 	strb	r2, [r3, #18]
     4d4:	e8bd8008 	pop	{r3, pc}
		else if ( (byte2 == (char) 0xE0) && (byte3 == (char) 0x74) ) //right arrow
     4d8:	e30e3184 	movw	r3, #57732	; 0xe184
     4dc:	e340301c 	movt	r3, #28
     4e0:	e5d3300e 	ldrb	r3, [r3, #14]
     4e4:	e35300e0 	cmp	r3, #224	; 0xe0
     4e8:	1a000009 	bne	514 <PS2_ISR+0xa8>
     4ec:	e30e3184 	movw	r3, #57732	; 0xe184
     4f0:	e340301c 	movt	r3, #28
     4f4:	e5d3300f 	ldrb	r3, [r3, #15]
     4f8:	e3530074 	cmp	r3, #116	; 0x74
     4fc:	1a000004 	bne	514 <PS2_ISR+0xa8>
			mario_move_forward = true;
     500:	e30e3184 	movw	r3, #57732	; 0xe184
     504:	e340301c 	movt	r3, #28
     508:	e3a02001 	mov	r2, #1
     50c:	e5c32013 	strb	r2, [r3, #19]
     510:	e8bd8008 	pop	{r3, pc}
		else if (byte3 == (char) 0x29) //space bar
     514:	e30e3184 	movw	r3, #57732	; 0xe184
     518:	e340301c 	movt	r3, #28
     51c:	e5d3300f 	ldrb	r3, [r3, #15]
     520:	e3530029 	cmp	r3, #41	; 0x29
     524:	1a000004 	bne	53c <PS2_ISR+0xd0>
			mario_jump = true;
     528:	e30e3184 	movw	r3, #57732	; 0xe184
     52c:	e340301c 	movt	r3, #28
     530:	e3a02001 	mov	r2, #1
     534:	e5c32014 	strb	r2, [r3, #20]
     538:	e8bd8008 	pop	{r3, pc}
		else if (byte3 == (char) 0x5A && (isFirstTime || isWin || isGameOver)){ //enter
     53c:	e30e3184 	movw	r3, #57732	; 0xe184
     540:	e340301c 	movt	r3, #28
     544:	e5d3300f 	ldrb	r3, [r3, #15]
     548:	e353005a 	cmp	r3, #90	; 0x5a
     54c:	18bd8008 	popne	{r3, pc}
     550:	e3033e50 	movw	r3, #15952	; 0x3e50
     554:	e3403000 	movt	r3, #0
     558:	e5d3305c 	ldrb	r3, [r3, #92]	; 0x5c
     55c:	e3530000 	cmp	r3, #0
     560:	1a00000a 	bne	590 <PS2_ISR+0x124>
     564:	e30e3184 	movw	r3, #57732	; 0xe184
     568:	e340301c 	movt	r3, #28
     56c:	e5d33010 	ldrb	r3, [r3, #16]
     570:	e3530000 	cmp	r3, #0
     574:	1a000009 	bne	5a0 <PS2_ISR+0x134>
     578:	e30e3184 	movw	r3, #57732	; 0xe184
     57c:	e340301c 	movt	r3, #28
     580:	e5d33011 	ldrb	r3, [r3, #17]
     584:	e3530000 	cmp	r3, #0
     588:	08bd8008 	popeq	{r3, pc}
     58c:	ea000003 	b	5a0 <PS2_ISR+0x134>
			if (isFirstTime){
				isFirstTime = false;
     590:	e3033e50 	movw	r3, #15952	; 0x3e50
     594:	e3403000 	movt	r3, #0
     598:	e3a02000 	mov	r2, #0
     59c:	e5c3205c 	strb	r2, [r3, #92]	; 0x5c
			}
			reset();
     5a0:	ebffff75 	bl	37c <reset>
     5a4:	e8bd8008 	pop	{r3, pc}

000005a8 <pushbutton_ISR>:
}


//Iterrupt Service Routine
void pushbutton_ISR( void )
{
     5a8:	e92d4008 	push	{r3, lr}
	volatile int * KEY_ptr = (int *) KEY_BASE;
	volatile int * LED_ptr = (int *) LED_BASE;
	int press, LED_bits;

	press = *(KEY_ptr + 3);					// read the pushbutton interrupt register
     5ac:	e3a02000 	mov	r2, #0
     5b0:	e34f2f20 	movt	r2, #65312	; 0xff20
     5b4:	e592305c 	ldr	r3, [r2, #92]	; 0x5c
	*(KEY_ptr + 3) = press;					// Clear the interrupt
     5b8:	e582305c 	str	r3, [r2, #92]	; 0x5c
    
	if (press & 0x1){							// KEY0
     5bc:	e3130001 	tst	r3, #1
     5c0:	0a000004 	beq	5d8 <pushbutton_ISR+0x30>
        mario_move_forward = true;
     5c4:	e30e3184 	movw	r3, #57732	; 0xe184
     5c8:	e340301c 	movt	r3, #28
     5cc:	e3a01001 	mov	r1, #1
     5d0:	e5c31013 	strb	r1, [r3, #19]
     5d4:	ea00001f 	b	658 <pushbutton_ISR+0xb0>
        LED_bits = 0b1;
    }else if (press & 0x2){					// KEY1
     5d8:	e3130002 	tst	r3, #2
     5dc:	0a000005 	beq	5f8 <pushbutton_ISR+0x50>
        mario_move_backward = true;
     5e0:	e30e3184 	movw	r3, #57732	; 0xe184
     5e4:	e340301c 	movt	r3, #28
     5e8:	e3a02001 	mov	r2, #1
     5ec:	e5c32012 	strb	r2, [r3, #18]
        LED_bits = 0b10;
     5f0:	e3a01002 	mov	r1, #2
     5f4:	ea000017 	b	658 <pushbutton_ISR+0xb0>
    }else if (press & 0x4){					// KEY2
     5f8:	e3130004 	tst	r3, #4
     5fc:	0a000005 	beq	618 <pushbutton_ISR+0x70>
		mario_jump = true;
     600:	e30e3184 	movw	r3, #57732	; 0xe184
     604:	e340301c 	movt	r3, #28
     608:	e3a02001 	mov	r2, #1
     60c:	e5c32014 	strb	r2, [r3, #20]
        LED_bits = 0b100;
     610:	e3a01004 	mov	r1, #4
     614:	ea00000f 	b	658 <pushbutton_ISR+0xb0>
    }else if (press & 0x8){					// KEY3
     618:	e3130008 	tst	r3, #8
     61c:	0a00000d 	beq	658 <pushbutton_ISR+0xb0>
        if (isWin || isGameOver){
     620:	e30e3184 	movw	r3, #57732	; 0xe184
     624:	e340301c 	movt	r3, #28
     628:	e5d33010 	ldrb	r3, [r3, #16]
     62c:	e3530000 	cmp	r3, #0
     630:	1a000005 	bne	64c <pushbutton_ISR+0xa4>
     634:	e30e3184 	movw	r3, #57732	; 0xe184
     638:	e340301c 	movt	r3, #28
     63c:	e5d33011 	ldrb	r3, [r3, #17]
     640:	e3530000 	cmp	r3, #0
			reset();
		}
        LED_bits = 0b1000;
     644:	03a01008 	moveq	r1, #8
        LED_bits = 0b10;
    }else if (press & 0x4){					// KEY2
		mario_jump = true;
        LED_bits = 0b100;
    }else if (press & 0x8){					// KEY3
        if (isWin || isGameOver){
     648:	0a000002 	beq	658 <pushbutton_ISR+0xb0>
			reset();
     64c:	ebffff4a 	bl	37c <reset>
		}
        LED_bits = 0b1000;
     650:	e3a01008 	mov	r1, #8
     654:	eaffffff 	b	658 <pushbutton_ISR+0xb0>
    }

	*LED_ptr = LED_bits;
     658:	e3a03000 	mov	r3, #0
     65c:	e34f3f20 	movt	r3, #65312	; 0xff20
     660:	e5831000 	str	r1, [r3]
     664:	e8bd8008 	pop	{r3, pc}

00000668 <interval_timer_ISR>:

void interval_timer_ISR()
{
    volatile int * interval_timer_ptr = (int *)TIMER_BASE;

    *(interval_timer_ptr) = 0; // Clear the interrupt
     668:	e3a03a02 	mov	r3, #8192	; 0x2000
     66c:	e34f3f20 	movt	r3, #65312	; 0xff20
     670:	e3a02000 	mov	r2, #0
     674:	e5832000 	str	r2, [r3]

	if (!isWin && !isGameOver){
     678:	e30e3184 	movw	r3, #57732	; 0xe184
     67c:	e340301c 	movt	r3, #28
     680:	e5d33010 	ldrb	r3, [r3, #16]
     684:	e1530002 	cmp	r3, r2
     688:	112fff1e 	bxne	lr
     68c:	e30e3184 	movw	r3, #57732	; 0xe184
     690:	e340301c 	movt	r3, #28
     694:	e5d33011 	ldrb	r3, [r3, #17]
     698:	e1530002 	cmp	r3, r2
     69c:	112fff1e 	bxne	lr
		time_left--;
     6a0:	e3033e50 	movw	r3, #15952	; 0x3e50
     6a4:	e3403000 	movt	r3, #0
     6a8:	e5932008 	ldr	r2, [r3, #8]
     6ac:	e2422001 	sub	r2, r2, #1
     6b0:	e5832008 	str	r2, [r3, #8]
		if (time_left == 0){
     6b4:	e3520000 	cmp	r2, #0
			isGameOver = true;
     6b8:	030e3184 	movweq	r3, #57732	; 0xe184
     6bc:	0340301c 	movteq	r3, #28
     6c0:	03a02001 	moveq	r2, #1
     6c4:	05c32011 	strbeq	r2, [r3, #17]
     6c8:	e12fff1e 	bx	lr

000006cc <__cs3_isr_irq>:
void interval_timer_ISR();
void reset();

// Define the IRQ exception handler
void __attribute__ ((interrupt)) __cs3_isr_irq (void)
{
     6cc:	e24ee004 	sub	lr, lr, #4
     6d0:	e92d503f 	push	{r0, r1, r2, r3, r4, r5, r12, lr}
	// Read the ICCIAR from the CPU interface in the GIC
	int address;
	int interrupt_ID;
	
	address = MPCORE_GIC_CPUIF + ICCIAR;
	interrupt_ID = *(int *)address;
     6d4:	e3e03a13 	mvn	r3, #77824	; 0x13000
     6d8:	e5134ef3 	ldr	r4, [r3, #-3827]	; 0xfffff10d
   
	if (interrupt_ID == KEYS_IRQ)		// check if interrupt is from the KEYs
     6dc:	e3540049 	cmp	r4, #73	; 0x49
     6e0:	1a000001 	bne	6ec <__cs3_isr_irq+0x20>
		pushbutton_ISR ();
     6e4:	ebffffaf 	bl	5a8 <pushbutton_ISR>
     6e8:	ea000008 	b	710 <__cs3_isr_irq+0x44>
	else if (interrupt_ID == PS2_IRQ)				// check if interrupt is from the PS/2
     6ec:	e354004f 	cmp	r4, #79	; 0x4f
     6f0:	1a000001 	bne	6fc <__cs3_isr_irq+0x30>
		PS2_ISR ();
     6f4:	ebffff5c 	bl	46c <PS2_ISR>
     6f8:	ea000004 	b	710 <__cs3_isr_irq+0x44>
	else if (interrupt_ID ==
     6fc:	e3540048 	cmp	r4, #72	; 0x48
     700:	1a000001 	bne	70c <__cs3_isr_irq+0x40>
             INTERVAL_TIMER_IRQ) // check if interrupt is from the Altera timer
        interval_timer_ISR();
     704:	ebffffd7 	bl	668 <interval_timer_ISR>
     708:	ea000000 	b	710 <__cs3_isr_irq+0x44>
     70c:	eafffffe 	b	70c <__cs3_isr_irq+0x40>
	else
		while (1);							// if unexpected, then stay here

	// Write to the End of Interrupt Register (ICCEOIR)
	address = MPCORE_GIC_CPUIF + ICCEOIR;
	*(int *)address = interrupt_ID;
     710:	e3e03a13 	mvn	r3, #77824	; 0x13000
     714:	e5034eef 	str	r4, [r3, #-3823]	; 0xfffff111
     718:	e8fd903f 	ldm	sp!, {r0, r1, r2, r3, r4, r5, r12, pc}^

0000071c <reset_characters>:
}

void reset_characters(){

    //reset Mario's position
    mario_x = 10;
     71c:	e3033e50 	movw	r3, #15952	; 0x3e50
     720:	e3403000 	movt	r3, #0
     724:	e3a0200a 	mov	r2, #10
     728:	e583200c 	str	r2, [r3, #12]
    mario_y = LOWEST_Y - 25;
     72c:	e3a020b1 	mov	r2, #177	; 0xb1
     730:	e5832010 	str	r2, [r3, #16]

    for (int i = 0; i < 3; i++)
    {
        isMoney[i] = false;
     734:	e30e2184 	movw	r2, #57732	; 0xe184
     738:	e340201c 	movt	r2, #28
     73c:	e3a01000 	mov	r1, #0
     740:	e5c21008 	strb	r1, [r2, #8]
     744:	e5c21009 	strb	r1, [r2, #9]
     748:	e5c2100a 	strb	r1, [r2, #10]
    }

    if (map_num == 2){
     74c:	e5933000 	ldr	r3, [r3]
     750:	e3530002 	cmp	r3, #2
     754:	1a00001e 	bne	7d4 <reset_characters+0xb8>
        for (int i = 0; i < 3; i++)
        {
            isBadMushroom[i] = true;
     758:	e3033e50 	movw	r3, #15952	; 0x3e50
     75c:	e3403000 	movt	r3, #0
     760:	e3a02001 	mov	r2, #1
     764:	e5c32014 	strb	r2, [r3, #20]
            badMushroom_y[i] = LOWEST_Y - 19;            
     768:	e3a010b7 	mov	r1, #183	; 0xb7
     76c:	e5831024 	str	r1, [r3, #36]	; 0x24
    }

    if (map_num == 2){
        for (int i = 0; i < 3; i++)
        {
            isBadMushroom[i] = true;
     770:	e5c32015 	strb	r2, [r3, #21]
            badMushroom_y[i] = LOWEST_Y - 19;            
     774:	e5831028 	str	r1, [r3, #40]	; 0x28
    }

    if (map_num == 2){
        for (int i = 0; i < 3; i++)
        {
            isBadMushroom[i] = true;
     778:	e5c32016 	strb	r2, [r3, #22]
            badMushroom_y[i] = LOWEST_Y - 19;            
     77c:	e583102c 	str	r1, [r3, #44]	; 0x2c
        }
        
        isTurtle = true;
     780:	e30e1184 	movw	r1, #57732	; 0xe184
     784:	e340101c 	movt	r1, #28
     788:	e5c1200c 	strb	r2, [r1, #12]

        badMushroom_x[0] = 196;
     78c:	e3a020c4 	mov	r2, #196	; 0xc4
     790:	e5832018 	str	r2, [r3, #24]
        badMushroom_x[1] = 152;
     794:	e3a02098 	mov	r2, #152	; 0x98
     798:	e583201c 	str	r2, [r3, #28]
        badMushroom_x[2] = 100;
     79c:	e3a02064 	mov	r2, #100	; 0x64
     7a0:	e5832020 	str	r2, [r3, #32]

        goodMushroom_x = OUT_SCREEN;
     7a4:	e3e02031 	mvn	r2, #49	; 0x31
     7a8:	e5832048 	str	r2, [r3, #72]	; 0x48
        goodMushroom_y = OUT_SCREEN;
     7ac:	e583204c 	str	r2, [r3, #76]	; 0x4c

        money_x[0] = steps_2_R_low_x;
     7b0:	e5931060 	ldr	r1, [r3, #96]	; 0x60
     7b4:	e5831030 	str	r1, [r3, #48]	; 0x30
        money_y[0] = 113;
     7b8:	e3a01071 	mov	r1, #113	; 0x71
     7bc:	e583103c 	str	r1, [r3, #60]	; 0x3c
        money_x[1] = money_x[2] = money_y[1] = money_y[2] = OUT_SCREEN;
     7c0:	e5832044 	str	r2, [r3, #68]	; 0x44
     7c4:	e5832040 	str	r2, [r3, #64]	; 0x40
     7c8:	e5832038 	str	r2, [r3, #56]	; 0x38
     7cc:	e5832034 	str	r2, [r3, #52]	; 0x34
     7d0:	e12fff1e 	bx	lr
        
    } else if (map_num == 3){
     7d4:	e3530003 	cmp	r3, #3
     7d8:	112fff1e 	bxne	lr
        isBadMushroom[0] = true;
     7dc:	e3033e50 	movw	r3, #15952	; 0x3e50
     7e0:	e3403000 	movt	r3, #0
     7e4:	e3a02001 	mov	r2, #1
     7e8:	e5c32014 	strb	r2, [r3, #20]
        isBadMushroom[1] = false;
     7ec:	e3a02000 	mov	r2, #0
     7f0:	e5c32015 	strb	r2, [r3, #21]
        isBadMushroom[2] = false;
     7f4:	e5c32016 	strb	r2, [r3, #22]

        badMushroom_x[0] = 96;
     7f8:	e3a02060 	mov	r2, #96	; 0x60
     7fc:	e5832018 	str	r2, [r3, #24]
        badMushroom_y[0] = LOWEST_Y - 19; 
     800:	e3a020b7 	mov	r2, #183	; 0xb7
     804:	e5832024 	str	r2, [r3, #36]	; 0x24
     808:	e12fff1e 	bx	lr

0000080c <turtle_update_location>:
    }
}

void turtle_update_location(){
     80c:	e92d4070 	push	{r4, r5, r6, lr}
    if (isTurtle){
     810:	e30e3184 	movw	r3, #57732	; 0xe184
     814:	e340301c 	movt	r3, #28
     818:	e5d3300c 	ldrb	r3, [r3, #12]
     81c:	e3530000 	cmp	r3, #0
     820:	08bd8070 	popeq	{r4, r5, r6, pc}
        //bouncing 
        if (turtle_x <= steps_2_L_low_x){
     824:	e3033e50 	movw	r3, #15952	; 0x3e50
     828:	e3403000 	movt	r3, #0
     82c:	e5932054 	ldr	r2, [r3, #84]	; 0x54
     830:	e5933064 	ldr	r3, [r3, #100]	; 0x64
     834:	e1520003 	cmp	r2, r3
     838:	ca000004 	bgt	850 <turtle_update_location+0x44>
            isTurtleMovingRight = true;
     83c:	e3033e50 	movw	r3, #15952	; 0x3e50
     840:	e3403000 	movt	r3, #0
     844:	e3a01001 	mov	r1, #1
     848:	e5c31050 	strb	r1, [r3, #80]	; 0x50
     84c:	ea00000f 	b	890 <turtle_update_location+0x84>
        } else if (turtle_x + 19 >= steps_2_L_high_x){
     850:	e2821013 	add	r1, r2, #19
     854:	e3033e50 	movw	r3, #15952	; 0x3e50
     858:	e3403000 	movt	r3, #0
     85c:	e5933068 	ldr	r3, [r3, #104]	; 0x68
     860:	e1510003 	cmp	r1, r3
     864:	ba000004 	blt	87c <turtle_update_location+0x70>
            isTurtleMovingRight = false;
     868:	e3033e50 	movw	r3, #15952	; 0x3e50
     86c:	e3403000 	movt	r3, #0
     870:	e3a01000 	mov	r1, #0
     874:	e5c31050 	strb	r1, [r3, #80]	; 0x50
     878:	ea000009 	b	8a4 <turtle_update_location+0x98>
        }

        if (isTurtleMovingRight){
     87c:	e3033e50 	movw	r3, #15952	; 0x3e50
     880:	e3403000 	movt	r3, #0
     884:	e5d33050 	ldrb	r3, [r3, #80]	; 0x50
     888:	e3530000 	cmp	r3, #0
     88c:	0a000004 	beq	8a4 <turtle_update_location+0x98>
            turtle_x += BAD_MUSHROOM_SPEED;
     890:	e3033e50 	movw	r3, #15952	; 0x3e50
     894:	e3403000 	movt	r3, #0
     898:	e2822001 	add	r2, r2, #1
     89c:	e5832054 	str	r2, [r3, #84]	; 0x54
     8a0:	ea000003 	b	8b4 <turtle_update_location+0xa8>
        } else{
            turtle_x -= BAD_MUSHROOM_SPEED;
     8a4:	e3033e50 	movw	r3, #15952	; 0x3e50
     8a8:	e3403000 	movt	r3, #0
     8ac:	e2422001 	sub	r2, r2, #1
     8b0:	e5832054 	str	r2, [r3, #84]	; 0x54
        }

        //check whether mario dies
        if (turtle_x <= mario_x + MARIO_MID && turtle_x + 19 >= mario_x + MARIO_MID  && turtle_y + 28 >= mario_y && mario_y + 25 >= turtle_y){
     8b4:	e3033e50 	movw	r3, #15952	; 0x3e50
     8b8:	e3403000 	movt	r3, #0
     8bc:	e5936054 	ldr	r6, [r3, #84]	; 0x54
     8c0:	e593000c 	ldr	r0, [r3, #12]
     8c4:	eb000a71 	bl	3290 <__aeabi_i2d>
     8c8:	e3a02000 	mov	r2, #0
     8cc:	e3a03000 	mov	r3, #0
     8d0:	e3443029 	movt	r3, #16425	; 0x4029
     8d4:	eb0009a0 	bl	2f5c <__adddf3>
     8d8:	e1a04000 	mov	r4, r0
     8dc:	e1a05001 	mov	r5, r1
     8e0:	e1a00006 	mov	r0, r6
     8e4:	eb000a69 	bl	3290 <__aeabi_i2d>
     8e8:	e1a02004 	mov	r2, r4
     8ec:	e1a03005 	mov	r3, r5
     8f0:	eb000c03 	bl	3904 <__aeabi_dcmple>
     8f4:	e3500000 	cmp	r0, #0
     8f8:	08bd8070 	popeq	{r4, r5, r6, pc}
     8fc:	e2860013 	add	r0, r6, #19
     900:	eb000a62 	bl	3290 <__aeabi_i2d>
     904:	e1a02000 	mov	r2, r0
     908:	e1a03001 	mov	r3, r1
     90c:	e1a00004 	mov	r0, r4
     910:	e1a01005 	mov	r1, r5
     914:	eb000bfa 	bl	3904 <__aeabi_dcmple>
     918:	e3500000 	cmp	r0, #0
     91c:	08bd8070 	popeq	{r4, r5, r6, pc}
     920:	e3033e50 	movw	r3, #15952	; 0x3e50
     924:	e3403000 	movt	r3, #0
     928:	e5932058 	ldr	r2, [r3, #88]	; 0x58
     92c:	e5933010 	ldr	r3, [r3, #16]
     930:	e282101c 	add	r1, r2, #28
     934:	e1510003 	cmp	r1, r3
     938:	b8bd8070 	poplt	{r4, r5, r6, pc}
     93c:	e2833019 	add	r3, r3, #25
     940:	e1520003 	cmp	r2, r3
     944:	c8bd8070 	popgt	{r4, r5, r6, pc}
            lives--;
     948:	e3033e50 	movw	r3, #15952	; 0x3e50
     94c:	e3403000 	movt	r3, #0
     950:	e5932004 	ldr	r2, [r3, #4]
     954:	e2422001 	sub	r2, r2, #1
     958:	e5832004 	str	r2, [r3, #4]
            //reset Mario's position
            mario_x = 10;
     95c:	e3a0200a 	mov	r2, #10
     960:	e583200c 	str	r2, [r3, #12]
            mario_y = LOWEST_Y - 25;
     964:	e3a020b1 	mov	r2, #177	; 0xb1
     968:	e5832010 	str	r2, [r3, #16]
     96c:	e8bd8070 	pop	{r4, r5, r6, pc}

00000970 <beat_turtle>:
    
}

void beat_turtle(){

    if (isTurtle && mario_x + 25 >= turtle_x && mario_x <= turtle_x + 19 && mario_y + 25 <= turtle_y){
     970:	e30e3184 	movw	r3, #57732	; 0xe184
     974:	e340301c 	movt	r3, #28
     978:	e5d3300c 	ldrb	r3, [r3, #12]
     97c:	e3530000 	cmp	r3, #0
     980:	012fff1e 	bxeq	lr
     984:	e3033e50 	movw	r3, #15952	; 0x3e50
     988:	e3403000 	movt	r3, #0
     98c:	e593200c 	ldr	r2, [r3, #12]
     990:	e5933054 	ldr	r3, [r3, #84]	; 0x54
     994:	e2821019 	add	r1, r2, #25
     998:	e1510003 	cmp	r1, r3
     99c:	b12fff1e 	bxlt	lr
     9a0:	e2833013 	add	r3, r3, #19
     9a4:	e1520003 	cmp	r2, r3
     9a8:	c12fff1e 	bxgt	lr
     9ac:	e3033e50 	movw	r3, #15952	; 0x3e50
     9b0:	e3403000 	movt	r3, #0
     9b4:	e5932010 	ldr	r2, [r3, #16]
     9b8:	e5933058 	ldr	r3, [r3, #88]	; 0x58
     9bc:	e2821019 	add	r1, r2, #25
     9c0:	e1510003 	cmp	r1, r3
     9c4:	c12fff1e 	bxgt	lr
        if (mario_y + 25 + GRAVITY_FALL >= turtle_y){
     9c8:	e2822023 	add	r2, r2, #35	; 0x23
     9cc:	e1530002 	cmp	r3, r2
     9d0:	c12fff1e 	bxgt	lr
            isTurtle = false;
     9d4:	e30e2184 	movw	r2, #57732	; 0xe184
     9d8:	e340201c 	movt	r2, #28
     9dc:	e3a01000 	mov	r1, #0
     9e0:	e5c2100c 	strb	r1, [r2, #12]
            turtle_x = OUT_SCREEN;
     9e4:	e3033e50 	movw	r3, #15952	; 0x3e50
     9e8:	e3403000 	movt	r3, #0
     9ec:	e3e00031 	mvn	r0, #49	; 0x31
     9f0:	e5830054 	str	r0, [r3, #84]	; 0x54
            turtle_y = OUT_SCREEN;
     9f4:	e5830058 	str	r0, [r3, #88]	; 0x58
     9f8:	e5920000 	ldr	r0, [r2]
            for (int i = 0; i < 3; i++)
            {
                isBadMushroom[i] = false;
     9fc:	e5c31014 	strb	r1, [r3, #20]
     a00:	e5c31015 	strb	r1, [r3, #21]
     a04:	e5c31016 	strb	r1, [r3, #22]
     a08:	e2803003 	add	r3, r0, #3
     a0c:	e5823000 	str	r3, [r2]
     a10:	e12fff1e 	bx	lr

00000a14 <bad_mushroom_update_location>:
    }

    return;
}

void bad_mushroom_update_location(){
     a14:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     a18:	e24dd024 	sub	sp, sp, #36	; 0x24
    //bad mushroom move to left automatically
    for (int i = 0; i < 3; i++)
    {
        if (map_num == 1){
     a1c:	e3033e50 	movw	r3, #15952	; 0x3e50
     a20:	e3403000 	movt	r3, #0
     a24:	e593a000 	ldr	r10, [r3]
            if (isBadMushroom[i] && badMushroom_x[i] + 19 >= 0){
                badMushroom_x[i] -= BAD_MUSHROOM_SPEED;
            }

            //gravitational falling of bad mush room
            if (isBadMushroom[i] && badMushroom_x[i] + 19 * 0.5 <= steps_1_low_x && badMushroom_y[i] + 19 < LOWEST_Y){
     a28:	e593106c 	ldr	r1, [r3, #108]	; 0x6c
     a2c:	e58d1018 	str	r1, [sp, #24]
                    badMushroom_y[i] = LOWEST_Y - 19;
                }
            }
        } else if (map_num == 2){
            //bouncing between two pipes
            if (badMushroom_x[i] <= pipe_2_L_high_x){
     a30:	e5932070 	ldr	r2, [r3, #112]	; 0x70
     a34:	e58d2014 	str	r2, [sp, #20]
                isBadMushroomMovingRight[i] = true;
            } else if (badMushroom_x[i] + 19 >= pipe_2_R_low_x){
     a38:	e5931074 	ldr	r1, [r3, #116]	; 0x74
     a3c:	e58d101c 	str	r1, [sp, #28]
                badMushroom_x[i] -= BAD_MUSHROOM_SPEED;
            }

        } else{
            //bouncing 
            if (badMushroom_x[i] <= pipe_3_high_x){
     a40:	e5932078 	ldr	r2, [r3, #120]	; 0x78
     a44:	e58d200c 	str	r2, [sp, #12]
     a48:	e593100c 	ldr	r1, [r3, #12]
     a4c:	e58d1004 	str	r1, [sp, #4]
     a50:	e5932010 	ldr	r2, [r3, #16]
     a54:	e58d2008 	str	r2, [sp, #8]
     a58:	e5933004 	ldr	r3, [r3, #4]
     a5c:	e58d3010 	str	r3, [sp, #16]
     a60:	e3a07000 	mov	r7, #0
    return;
}

void bad_mushroom_update_location(){
    //bad mushroom move to left automatically
    for (int i = 0; i < 3; i++)
     a64:	e1a06007 	mov	r6, r7
                badMushroom_x[i] -= BAD_MUSHROOM_SPEED;
            }

        } else{
            //bouncing 
            if (badMushroom_x[i] <= pipe_3_high_x){
     a68:	e3038e50 	movw	r8, #15952	; 0x3e50
     a6c:	e3408000 	movt	r8, #0
                isBadMushroomMovingRight[i] = true;
            } else if (badMushroom_x[i] + 19 >= 224){
                isBadMushroomMovingRight[i] = false;
            }

            if (isBadMushroomMovingRight[i]){
     a70:	e30e9184 	movw	r9, #57732	; 0xe184
     a74:	e340901c 	movt	r9, #28

void bad_mushroom_update_location(){
    //bad mushroom move to left automatically
    for (int i = 0; i < 3; i++)
    {
        if (map_num == 1){
     a78:	e35a0001 	cmp	r10, #1
     a7c:	1a000018 	bne	ae4 <bad_mushroom_update_location+0xd0>
            if (isBadMushroom[i] && badMushroom_x[i] + 19 >= 0){
     a80:	e2883014 	add	r3, r8, #20
     a84:	e7d63003 	ldrb	r3, [r6, r3]
     a88:	e3530000 	cmp	r3, #0
     a8c:	0a00004a 	beq	bbc <bad_mushroom_update_location+0x1a8>
     a90:	e2883018 	add	r3, r8, #24
     a94:	e7973003 	ldr	r3, [r7, r3]
     a98:	e3730013 	cmn	r3, #19
                badMushroom_x[i] -= BAD_MUSHROOM_SPEED;
     a9c:	52882018 	addpl	r2, r8, #24
     aa0:	52433001 	subpl	r3, r3, #1
     aa4:	57873002 	strpl	r3, [r7, r2]
     aa8:	ea00007e 	b	ca8 <bad_mushroom_update_location+0x294>
            }

            //gravitational falling of bad mush room
            if (isBadMushroom[i] && badMushroom_x[i] + 19 * 0.5 <= steps_1_low_x && badMushroom_y[i] + 19 < LOWEST_Y){
     aac:	e2883024 	add	r3, r8, #36	; 0x24
     ab0:	e7973003 	ldr	r3, [r7, r3]
     ab4:	e2832013 	add	r2, r3, #19
     ab8:	e35200c9 	cmp	r2, #201	; 0xc9
     abc:	ca00003e 	bgt	bbc <bad_mushroom_update_location+0x1a8>
                badMushroom_y[i] += GRAVITY_FALL;
                if (badMushroom_y[i] + GRAVITY_FALL >= LOWEST_Y - 19){
     ac0:	e2832014 	add	r2, r3, #20
     ac4:	e35200b6 	cmp	r2, #182	; 0xb6
                badMushroom_x[i] -= BAD_MUSHROOM_SPEED;
            }

            //gravitational falling of bad mush room
            if (isBadMushroom[i] && badMushroom_x[i] + 19 * 0.5 <= steps_1_low_x && badMushroom_y[i] + 19 < LOWEST_Y){
                badMushroom_y[i] += GRAVITY_FALL;
     ac8:	d2882024 	addle	r2, r8, #36	; 0x24
     acc:	d283300a 	addle	r3, r3, #10
     ad0:	d7873002 	strle	r3, [r7, r2]
                if (badMushroom_y[i] + GRAVITY_FALL >= LOWEST_Y - 19){
                    badMushroom_y[i] = LOWEST_Y - 19;
     ad4:	c2883024 	addgt	r3, r8, #36	; 0x24
     ad8:	c3a010b7 	movgt	r1, #183	; 0xb7
     adc:	c7871003 	strgt	r1, [r7, r3]
     ae0:	ea000035 	b	bbc <bad_mushroom_update_location+0x1a8>
                }
            }
        } else if (map_num == 2){
     ae4:	e35a0002 	cmp	r10, #2
     ae8:	1a00001a 	bne	b58 <bad_mushroom_update_location+0x144>
            //bouncing between two pipes
            if (badMushroom_x[i] <= pipe_2_L_high_x){
     aec:	e2883018 	add	r3, r8, #24
     af0:	e7973003 	ldr	r3, [r7, r3]
     af4:	e59d2014 	ldr	r2, [sp, #20]
     af8:	e1530002 	cmp	r3, r2
                isBadMushroomMovingRight[i] = true;
     afc:	d2892004 	addle	r2, r9, #4
     b00:	d3a01001 	movle	r1, #1
     b04:	d7c61002 	strble	r1, [r6, r2]
     b08:	da00000a 	ble	b38 <bad_mushroom_update_location+0x124>
            } else if (badMushroom_x[i] + 19 >= pipe_2_R_low_x){
     b0c:	e2832013 	add	r2, r3, #19
     b10:	e59d101c 	ldr	r1, [sp, #28]
     b14:	e1520001 	cmp	r2, r1
                isBadMushroomMovingRight[i] = false;
     b18:	a2892004 	addge	r2, r9, #4
     b1c:	a3a01000 	movge	r1, #0
     b20:	a7c61002 	strbge	r1, [r6, r2]
     b24:	aa000007 	bge	b48 <bad_mushroom_update_location+0x134>
            }

            if (isBadMushroomMovingRight[i]){
     b28:	e2892004 	add	r2, r9, #4
     b2c:	e7d62002 	ldrb	r2, [r6, r2]
     b30:	e3520000 	cmp	r2, #0
     b34:	0a000003 	beq	b48 <bad_mushroom_update_location+0x134>
                badMushroom_x[i] += BAD_MUSHROOM_SPEED;
     b38:	e2882018 	add	r2, r8, #24
     b3c:	e2833001 	add	r3, r3, #1
     b40:	e7873002 	str	r3, [r7, r2]
     b44:	ea00001c 	b	bbc <bad_mushroom_update_location+0x1a8>
            } else{
                badMushroom_x[i] -= BAD_MUSHROOM_SPEED;
     b48:	e2882018 	add	r2, r8, #24
     b4c:	e2433001 	sub	r3, r3, #1
     b50:	e7873002 	str	r3, [r7, r2]
     b54:	ea000018 	b	bbc <bad_mushroom_update_location+0x1a8>
            }

        } else{
            //bouncing 
            if (badMushroom_x[i] <= pipe_3_high_x){
     b58:	e2883018 	add	r3, r8, #24
     b5c:	e7973003 	ldr	r3, [r7, r3]
     b60:	e59d200c 	ldr	r2, [sp, #12]
     b64:	e1530002 	cmp	r3, r2
                isBadMushroomMovingRight[i] = true;
     b68:	d2892004 	addle	r2, r9, #4
     b6c:	d3a01001 	movle	r1, #1
     b70:	d7c61002 	strble	r1, [r6, r2]
     b74:	da000009 	ble	ba0 <bad_mushroom_update_location+0x18c>
            } else if (badMushroom_x[i] + 19 >= 224){
     b78:	e2832013 	add	r2, r3, #19
     b7c:	e35200df 	cmp	r2, #223	; 0xdf
                isBadMushroomMovingRight[i] = false;
     b80:	c2892004 	addgt	r2, r9, #4
     b84:	c3a01000 	movgt	r1, #0
     b88:	c7c61002 	strbgt	r1, [r6, r2]
     b8c:	ca000007 	bgt	bb0 <bad_mushroom_update_location+0x19c>
            }

            if (isBadMushroomMovingRight[i]){
     b90:	e2892004 	add	r2, r9, #4
     b94:	e7d62002 	ldrb	r2, [r6, r2]
     b98:	e3520000 	cmp	r2, #0
     b9c:	0a000003 	beq	bb0 <bad_mushroom_update_location+0x19c>
                badMushroom_x[i] += BAD_MUSHROOM_SPEED;
     ba0:	e2882018 	add	r2, r8, #24
     ba4:	e2833001 	add	r3, r3, #1
     ba8:	e7873002 	str	r3, [r7, r2]
     bac:	ea000002 	b	bbc <bad_mushroom_update_location+0x1a8>
            } else{
                badMushroom_x[i] -= BAD_MUSHROOM_SPEED;
     bb0:	e2882018 	add	r2, r8, #24
     bb4:	e2433001 	sub	r3, r3, #1
     bb8:	e7873002 	str	r3, [r7, r2]
            }
        }
        

        //check whether mario dies
        if (isBadMushroom[i] && badMushroom_x[i] <= mario_x + MARIO_MID && badMushroom_x[i] + 19 >= mario_x + MARIO_MID  && badMushroom_y[i] + 19 >= mario_y && mario_y + 25 >= badMushroom_y[i]){
     bbc:	e2883014 	add	r3, r8, #20
     bc0:	e7d63003 	ldrb	r3, [r6, r3]
     bc4:	e3530000 	cmp	r3, #0
     bc8:	0a000029 	beq	c74 <bad_mushroom_update_location+0x260>
     bcc:	e2883018 	add	r3, r8, #24
     bd0:	e797b003 	ldr	r11, [r7, r3]
     bd4:	e59d0004 	ldr	r0, [sp, #4]
     bd8:	eb0009ac 	bl	3290 <__aeabi_i2d>
     bdc:	e3a02000 	mov	r2, #0
     be0:	e3a03000 	mov	r3, #0
     be4:	e3443029 	movt	r3, #16425	; 0x4029
     be8:	eb0008db 	bl	2f5c <__adddf3>
     bec:	e1a04000 	mov	r4, r0
     bf0:	e1a05001 	mov	r5, r1
     bf4:	e1a0000b 	mov	r0, r11
     bf8:	eb0009a4 	bl	3290 <__aeabi_i2d>
     bfc:	e1a02004 	mov	r2, r4
     c00:	e1a03005 	mov	r3, r5
     c04:	eb000b3e 	bl	3904 <__aeabi_dcmple>
     c08:	e3500000 	cmp	r0, #0
     c0c:	0a000018 	beq	c74 <bad_mushroom_update_location+0x260>
     c10:	e28b0013 	add	r0, r11, #19
     c14:	eb00099d 	bl	3290 <__aeabi_i2d>
     c18:	e1a02000 	mov	r2, r0
     c1c:	e1a03001 	mov	r3, r1
     c20:	e1a00004 	mov	r0, r4
     c24:	e1a01005 	mov	r1, r5
     c28:	eb000b35 	bl	3904 <__aeabi_dcmple>
     c2c:	e3500000 	cmp	r0, #0
     c30:	0a00000f 	beq	c74 <bad_mushroom_update_location+0x260>
     c34:	e2883024 	add	r3, r8, #36	; 0x24
     c38:	e7973003 	ldr	r3, [r7, r3]
     c3c:	e2832013 	add	r2, r3, #19
     c40:	e59d1008 	ldr	r1, [sp, #8]
     c44:	e1520001 	cmp	r2, r1
     c48:	ba000009 	blt	c74 <bad_mushroom_update_location+0x260>
     c4c:	e2812019 	add	r2, r1, #25
     c50:	e1530002 	cmp	r3, r2
     c54:	ca000006 	bgt	c74 <bad_mushroom_update_location+0x260>
            lives--;
     c58:	e59d2010 	ldr	r2, [sp, #16]
     c5c:	e2422001 	sub	r2, r2, #1
     c60:	e58d2010 	str	r2, [sp, #16]
            //reset Mario's position
            mario_x = 10;
            mario_y = LOWEST_Y - 25;
     c64:	e3a030b1 	mov	r3, #177	; 0xb1
     c68:	e58d3008 	str	r3, [sp, #8]

        //check whether mario dies
        if (isBadMushroom[i] && badMushroom_x[i] <= mario_x + MARIO_MID && badMushroom_x[i] + 19 >= mario_x + MARIO_MID  && badMushroom_y[i] + 19 >= mario_y && mario_y + 25 >= badMushroom_y[i]){
            lives--;
            //reset Mario's position
            mario_x = 10;
     c6c:	e3a0100a 	mov	r1, #10
     c70:	e58d1004 	str	r1, [sp, #4]
    return;
}

void bad_mushroom_update_location(){
    //bad mushroom move to left automatically
    for (int i = 0; i < 3; i++)
     c74:	e2866001 	add	r6, r6, #1
     c78:	e2877004 	add	r7, r7, #4
     c7c:	e3560003 	cmp	r6, #3
     c80:	1affff7c 	bne	a78 <bad_mushroom_update_location+0x64>
     c84:	e3033e50 	movw	r3, #15952	; 0x3e50
     c88:	e3403000 	movt	r3, #0
     c8c:	e59d2004 	ldr	r2, [sp, #4]
     c90:	e583200c 	str	r2, [r3, #12]
     c94:	e59d1008 	ldr	r1, [sp, #8]
     c98:	e5831010 	str	r1, [r3, #16]
     c9c:	e59d2010 	ldr	r2, [sp, #16]
     ca0:	e5832004 	str	r2, [r3, #4]
     ca4:	ea000012 	b	cf4 <bad_mushroom_update_location+0x2e0>
            if (isBadMushroom[i] && badMushroom_x[i] + 19 >= 0){
                badMushroom_x[i] -= BAD_MUSHROOM_SPEED;
            }

            //gravitational falling of bad mush room
            if (isBadMushroom[i] && badMushroom_x[i] + 19 * 0.5 <= steps_1_low_x && badMushroom_y[i] + 19 < LOWEST_Y){
     ca8:	e2883018 	add	r3, r8, #24
     cac:	e7970003 	ldr	r0, [r7, r3]
     cb0:	eb000976 	bl	3290 <__aeabi_i2d>
     cb4:	e3a02000 	mov	r2, #0
     cb8:	e3a03000 	mov	r3, #0
     cbc:	e3443023 	movt	r3, #16419	; 0x4023
     cc0:	eb0008a5 	bl	2f5c <__adddf3>
     cc4:	e1a04000 	mov	r4, r0
     cc8:	e1a05001 	mov	r5, r1
     ccc:	e59d0018 	ldr	r0, [sp, #24]
     cd0:	eb00096e 	bl	3290 <__aeabi_i2d>
     cd4:	e1a02000 	mov	r2, r0
     cd8:	e1a03001 	mov	r3, r1
     cdc:	e1a00004 	mov	r0, r4
     ce0:	e1a01005 	mov	r1, r5
     ce4:	eb000b06 	bl	3904 <__aeabi_dcmple>
     ce8:	e3500000 	cmp	r0, #0
     cec:	1affff6e 	bne	aac <bad_mushroom_update_location+0x98>
     cf0:	eaffffb1 	b	bbc <bad_mushroom_update_location+0x1a8>
            //reset Mario's position
            mario_x = 10;
            mario_y = LOWEST_Y - 25;
        }
    }
}
     cf4:	e28dd024 	add	sp, sp, #36	; 0x24
     cf8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

00000cfc <beat_mushroom>:

void beat_mushroom(){
     cfc:	e92d05f0 	push	{r4, r5, r6, r7, r8, r10}
    for (int i = 0; i < 3; i++)
    {
        if (isBadMushroom[i] && mario_x + 25 >= badMushroom_x[i] && mario_x <= badMushroom_x[i] + 19 && mario_y + 25 <= badMushroom_y[i]){
     d00:	e3032e50 	movw	r2, #15952	; 0x3e50
     d04:	e3402000 	movt	r2, #0
     d08:	e592c00c 	ldr	r12, [r2, #12]
     d0c:	e28c4019 	add	r4, r12, #25
     d10:	e5923010 	ldr	r3, [r2, #16]
     d14:	e2836019 	add	r6, r3, #25
            if (mario_y + 25 + GRAVITY_FALL >= badMushroom_y[i]){
     d18:	e2837023 	add	r7, r3, #35	; 0x23
     d1c:	e30e3184 	movw	r3, #57732	; 0xe184
     d20:	e340301c 	movt	r3, #28
     d24:	e5935000 	ldr	r5, [r3]
     d28:	e2822014 	add	r2, r2, #20
     d2c:	e3a03000 	mov	r3, #0
}

void beat_mushroom(){
    for (int i = 0; i < 3; i++)
    {
        if (isBadMushroom[i] && mario_x + 25 >= badMushroom_x[i] && mario_x <= badMushroom_x[i] + 19 && mario_y + 25 <= badMushroom_y[i]){
     d30:	e3030e50 	movw	r0, #15952	; 0x3e50
     d34:	e3400000 	movt	r0, #0
            if (mario_y + 25 + GRAVITY_FALL >= badMushroom_y[i]){
                isBadMushroom[i] = false;
     d38:	e1a0a003 	mov	r10, r3
                badMushroom_x[i] = OUT_SCREEN;
     d3c:	e3e08031 	mvn	r8, #49	; 0x31
}

void beat_mushroom(){
    for (int i = 0; i < 3; i++)
    {
        if (isBadMushroom[i] && mario_x + 25 >= badMushroom_x[i] && mario_x <= badMushroom_x[i] + 19 && mario_y + 25 <= badMushroom_y[i]){
     d40:	e4d21001 	ldrb	r1, [r2], #1
     d44:	e3510000 	cmp	r1, #0
     d48:	0a000012 	beq	d98 <beat_mushroom+0x9c>
     d4c:	e2801018 	add	r1, r0, #24
     d50:	e7931001 	ldr	r1, [r3, r1]
     d54:	e1540001 	cmp	r4, r1
     d58:	ba00000e 	blt	d98 <beat_mushroom+0x9c>
     d5c:	e2811013 	add	r1, r1, #19
     d60:	e15c0001 	cmp	r12, r1
     d64:	ca00000b 	bgt	d98 <beat_mushroom+0x9c>
     d68:	e2801024 	add	r1, r0, #36	; 0x24
     d6c:	e7931001 	ldr	r1, [r3, r1]
     d70:	e1560001 	cmp	r6, r1
     d74:	ca000007 	bgt	d98 <beat_mushroom+0x9c>
            if (mario_y + 25 + GRAVITY_FALL >= badMushroom_y[i]){
     d78:	e1510007 	cmp	r1, r7
     d7c:	ca000005 	bgt	d98 <beat_mushroom+0x9c>
                isBadMushroom[i] = false;
     d80:	e542a001 	strb	r10, [r2, #-1]
                badMushroom_x[i] = OUT_SCREEN;
     d84:	e2801018 	add	r1, r0, #24
     d88:	e7838001 	str	r8, [r3, r1]
                badMushroom_y[i] = OUT_SCREEN;
     d8c:	e2801024 	add	r1, r0, #36	; 0x24
     d90:	e7838001 	str	r8, [r3, r1]
                score++;
     d94:	e2855001 	add	r5, r5, #1
     d98:	e2833004 	add	r3, r3, #4
        }
    }
}

void beat_mushroom(){
    for (int i = 0; i < 3; i++)
     d9c:	e353000c 	cmp	r3, #12
     da0:	1affffe6 	bne	d40 <beat_mushroom+0x44>
     da4:	e30e3184 	movw	r3, #57732	; 0xe184
     da8:	e340301c 	movt	r3, #28
     dac:	e5835000 	str	r5, [r3]
                score++;
            }
        }
    }
    return;
}
     db0:	e8bd05f0 	pop	{r4, r5, r6, r7, r8, r10}
     db4:	e12fff1e 	bx	lr

00000db8 <mario_update_location>:
        isGameOver = true;
    }
}


void mario_update_location(){
     db8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     dbc:	e24dd00c 	sub	sp, sp, #12
    if (map_num == 1){       
     dc0:	e3033e50 	movw	r3, #15952	; 0x3e50
     dc4:	e3403000 	movt	r3, #0
     dc8:	e5933000 	ldr	r3, [r3]
     dcc:	e3530001 	cmp	r3, #1
     dd0:	1a000159 	bne	133c <mario_update_location+0x584>
        //control mario depends on different flags
        if (mario_move_forward && (mario_x + 25 <= pipe_1_low_x || mario_x > pipe_1_low_x || mario_y + 25 <= pipe_1_y)){
     dd4:	e30e3184 	movw	r3, #57732	; 0xe184
     dd8:	e340301c 	movt	r3, #28
     ddc:	e5d33013 	ldrb	r3, [r3, #19]
     de0:	e3530000 	cmp	r3, #0
     de4:	0a000015 	beq	e40 <mario_update_location+0x88>
     de8:	e3033e50 	movw	r3, #15952	; 0x3e50
     dec:	e3403000 	movt	r3, #0
     df0:	e593200c 	ldr	r2, [r3, #12]
     df4:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
     df8:	e2821019 	add	r1, r2, #25
     dfc:	e1510003 	cmp	r1, r3
     e00:	da000008 	ble	e28 <mario_update_location+0x70>
     e04:	e1520003 	cmp	r2, r3
     e08:	ca000006 	bgt	e28 <mario_update_location+0x70>
     e0c:	e3033e50 	movw	r3, #15952	; 0x3e50
     e10:	e3403000 	movt	r3, #0
     e14:	e5931010 	ldr	r1, [r3, #16]
     e18:	e2811019 	add	r1, r1, #25
     e1c:	e5933080 	ldr	r3, [r3, #128]	; 0x80
     e20:	e1510003 	cmp	r1, r3
     e24:	ca000005 	bgt	e40 <mario_update_location+0x88>
            mario_x += MARIO_RUN_SPEED;
     e28:	e3033e50 	movw	r3, #15952	; 0x3e50
     e2c:	e3403000 	movt	r3, #0
     e30:	e2822004 	add	r2, r2, #4
     e34:	e583200c 	str	r2, [r3, #12]
            is_mario_moving_forward = true;
     e38:	e3a02001 	mov	r2, #1
     e3c:	e5c32084 	strb	r2, [r3, #132]	; 0x84
        } 
        if (mario_move_backward && (mario_x >= pipe_1_high_x || mario_x < pipe_1_low_x || mario_y + 25 <= pipe_1_y)){
     e40:	e30e3184 	movw	r3, #57732	; 0xe184
     e44:	e340301c 	movt	r3, #28
     e48:	e5d33012 	ldrb	r3, [r3, #18]
     e4c:	e3530000 	cmp	r3, #0
     e50:	0a000017 	beq	eb4 <mario_update_location+0xfc>
     e54:	e3033e50 	movw	r3, #15952	; 0x3e50
     e58:	e3403000 	movt	r3, #0
     e5c:	e593200c 	ldr	r2, [r3, #12]
     e60:	e5933088 	ldr	r3, [r3, #136]	; 0x88
     e64:	e1520003 	cmp	r2, r3
     e68:	aa00000b 	bge	e9c <mario_update_location+0xe4>
     e6c:	e3033e50 	movw	r3, #15952	; 0x3e50
     e70:	e3403000 	movt	r3, #0
     e74:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
     e78:	e1520003 	cmp	r2, r3
     e7c:	ba000006 	blt	e9c <mario_update_location+0xe4>
     e80:	e3033e50 	movw	r3, #15952	; 0x3e50
     e84:	e3403000 	movt	r3, #0
     e88:	e5931010 	ldr	r1, [r3, #16]
     e8c:	e2811019 	add	r1, r1, #25
     e90:	e5933080 	ldr	r3, [r3, #128]	; 0x80
     e94:	e1510003 	cmp	r1, r3
     e98:	ca000005 	bgt	eb4 <mario_update_location+0xfc>
            mario_x -= MARIO_RUN_SPEED;
     e9c:	e3033e50 	movw	r3, #15952	; 0x3e50
     ea0:	e3403000 	movt	r3, #0
     ea4:	e2422004 	sub	r2, r2, #4
     ea8:	e583200c 	str	r2, [r3, #12]
            is_mario_moving_forward = false;
     eac:	e3a02000 	mov	r2, #0
     eb0:	e5c32084 	strb	r2, [r3, #132]	; 0x84
        }
        if (mario_jump){
     eb4:	e30e3184 	movw	r3, #57732	; 0xe184
     eb8:	e340301c 	movt	r3, #28
     ebc:	e5d33014 	ldrb	r3, [r3, #20]
     ec0:	e3530000 	cmp	r3, #0
     ec4:	0a000089 	beq	10f0 <mario_update_location+0x338>
            //if under steps
            if (steps_1_low_x <= mario_x + MARIO_MID && mario_x + MARIO_MID <= steps_1_high_x && mario_y > steps_1_y){
     ec8:	e3036e50 	movw	r6, #15952	; 0x3e50
     ecc:	e3406000 	movt	r6, #0
     ed0:	e596000c 	ldr	r0, [r6, #12]
     ed4:	eb0008ed 	bl	3290 <__aeabi_i2d>
     ed8:	e3a02000 	mov	r2, #0
     edc:	e3a03000 	mov	r3, #0
     ee0:	e3443029 	movt	r3, #16425	; 0x4029
     ee4:	eb00081c 	bl	2f5c <__adddf3>
     ee8:	e1a04000 	mov	r4, r0
     eec:	e1a05001 	mov	r5, r1
     ef0:	e596006c 	ldr	r0, [r6, #108]	; 0x6c
     ef4:	eb0008e5 	bl	3290 <__aeabi_i2d>
     ef8:	e1a02004 	mov	r2, r4
     efc:	e1a03005 	mov	r3, r5
     f00:	eb000a7f 	bl	3904 <__aeabi_dcmple>
     f04:	e3500000 	cmp	r0, #0
     f08:	0a00004f 	beq	104c <mario_update_location+0x294>
     f0c:	e596008c 	ldr	r0, [r6, #140]	; 0x8c
     f10:	eb0008de 	bl	3290 <__aeabi_i2d>
     f14:	e1a02000 	mov	r2, r0
     f18:	e1a03001 	mov	r3, r1
     f1c:	e1a00004 	mov	r0, r4
     f20:	e1a01005 	mov	r1, r5
     f24:	eb000a76 	bl	3904 <__aeabi_dcmple>
     f28:	e3500000 	cmp	r0, #0
     f2c:	0a000046 	beq	104c <mario_update_location+0x294>
     f30:	e5962010 	ldr	r2, [r6, #16]
     f34:	e5963090 	ldr	r3, [r6, #144]	; 0x90
     f38:	e1520003 	cmp	r2, r3
     f3c:	da000042 	ble	104c <mario_update_location+0x294>
                if (!mario_fall && mario_y > steps_1_y + 25){
     f40:	e30e1184 	movw	r1, #57732	; 0xe184
     f44:	e340101c 	movt	r1, #28
     f48:	e5d11015 	ldrb	r1, [r1, #21]
     f4c:	e3510000 	cmp	r1, #0
     f50:	1a000004 	bne	f68 <mario_update_location+0x1b0>
     f54:	e2833019 	add	r3, r3, #25
     f58:	e1520003 	cmp	r2, r3
                    mario_y -= MARIO_JUMP_SPEED;
     f5c:	c2422008 	subgt	r2, r2, #8
     f60:	c5862010 	strgt	r2, [r6, #16]
     f64:	ca000056 	bgt	10c4 <mario_update_location+0x30c>
                } else{
                    mario_fall = true;
     f68:	e30e3184 	movw	r3, #57732	; 0xe184
     f6c:	e340301c 	movt	r3, #28
     f70:	e3a02001 	mov	r2, #1
     f74:	e5c32015 	strb	r2, [r3, #21]
                    mario_jumped = 0;
     f78:	e3a06000 	mov	r6, #0
     f7c:	e5836018 	str	r6, [r3, #24]
        isGameOver = true;
    }
}


void mario_update_location(){
     f80:	e59f8d4c 	ldr	r8, [pc, #3404]	; 1cd4 <mario_update_location+0xf1c>
                    mario_fall = true;
                    mario_jumped = 0;
                    for (int i = 0; i < 3; i++)
                    {
                        if (mario_x + MARIO_MID >= money_x[i] && mario_x + MARIO_MID <= money_x[i] + 16){
                            isMoney[i] = true;
     f84:	e1a0a003 	mov	r10, r3
     f88:	e1a09002 	mov	r9, r2
                } else{
                    mario_fall = true;
                    mario_jumped = 0;
                    for (int i = 0; i < 3; i++)
                    {
                        if (mario_x + MARIO_MID >= money_x[i] && mario_x + MARIO_MID <= money_x[i] + 16){
     f8c:	e5b87004 	ldr	r7, [r8, #4]!
     f90:	e1a00007 	mov	r0, r7
     f94:	eb0008bd 	bl	3290 <__aeabi_i2d>
     f98:	e1a02000 	mov	r2, r0
     f9c:	e1a03001 	mov	r3, r1
     fa0:	e1a00004 	mov	r0, r4
     fa4:	e1a01005 	mov	r1, r5
     fa8:	eb000a5b 	bl	391c <__aeabi_dcmpge>
     fac:	e3500000 	cmp	r0, #0
     fb0:	0a000009 	beq	fdc <mario_update_location+0x224>
     fb4:	e2870010 	add	r0, r7, #16
     fb8:	eb0008b4 	bl	3290 <__aeabi_i2d>
     fbc:	e1a02000 	mov	r2, r0
     fc0:	e1a03001 	mov	r3, r1
     fc4:	e1a00004 	mov	r0, r4
     fc8:	e1a01005 	mov	r1, r5
     fcc:	eb000a4c 	bl	3904 <__aeabi_dcmple>
     fd0:	e3500000 	cmp	r0, #0
                            isMoney[i] = true;
     fd4:	128a3008 	addne	r3, r10, #8
     fd8:	17c69003 	strbne	r9, [r6, r3]
                if (!mario_fall && mario_y > steps_1_y + 25){
                    mario_y -= MARIO_JUMP_SPEED;
                } else{
                    mario_fall = true;
                    mario_jumped = 0;
                    for (int i = 0; i < 3; i++)
     fdc:	e2866001 	add	r6, r6, #1
     fe0:	e3560003 	cmp	r6, #3
     fe4:	1affffe8 	bne	f8c <mario_update_location+0x1d4>
                    {
                        if (mario_x + MARIO_MID >= money_x[i] && mario_x + MARIO_MID <= money_x[i] + 16){
                            isMoney[i] = true;
                        }
                    }
                    if (mario_x + MARIO_MID >= goodMushroom_x && mario_x + MARIO_MID <= goodMushroom_x + 19){
     fe8:	e3033e50 	movw	r3, #15952	; 0x3e50
     fec:	e3403000 	movt	r3, #0
     ff0:	e5936048 	ldr	r6, [r3, #72]	; 0x48
     ff4:	e1a00006 	mov	r0, r6
     ff8:	eb0008a4 	bl	3290 <__aeabi_i2d>
     ffc:	e1a02000 	mov	r2, r0
    1000:	e1a03001 	mov	r3, r1
    1004:	e1a00004 	mov	r0, r4
    1008:	e1a01005 	mov	r1, r5
    100c:	eb000a42 	bl	391c <__aeabi_dcmpge>
    1010:	e3500000 	cmp	r0, #0
    1014:	0a00002a 	beq	10c4 <mario_update_location+0x30c>
    1018:	e2860013 	add	r0, r6, #19
    101c:	eb00089b 	bl	3290 <__aeabi_i2d>
    1020:	e1a02000 	mov	r2, r0
    1024:	e1a03001 	mov	r3, r1
    1028:	e1a00004 	mov	r0, r4
    102c:	e1a01005 	mov	r1, r5
    1030:	eb000a33 	bl	3904 <__aeabi_dcmple>
    1034:	e3500000 	cmp	r0, #0
                        isGoodMushroom = true;
    1038:	130e3184 	movwne	r3, #57732	; 0xe184
    103c:	1340301c 	movtne	r3, #28
    1040:	13a02001 	movne	r2, #1
    1044:	15c3200b 	strbne	r2, [r3, #11]
    1048:	ea00001d 	b	10c4 <mario_update_location+0x30c>
                    }
                    
                }
            }else if (!mario_fall && mario_jumped < MARIO_JUMP_HIGHT && mario_y >= 27){
    104c:	e30e3184 	movw	r3, #57732	; 0xe184
    1050:	e340301c 	movt	r3, #28
    1054:	e5d33015 	ldrb	r3, [r3, #21]
    1058:	e3530000 	cmp	r3, #0
    105c:	1a000012 	bne	10ac <mario_update_location+0x2f4>
    1060:	e30e3184 	movw	r3, #57732	; 0xe184
    1064:	e340301c 	movt	r3, #28
    1068:	e5933018 	ldr	r3, [r3, #24]
    106c:	e353004a 	cmp	r3, #74	; 0x4a
    1070:	ca00000d 	bgt	10ac <mario_update_location+0x2f4>
    1074:	e3032e50 	movw	r2, #15952	; 0x3e50
    1078:	e3402000 	movt	r2, #0
    107c:	e5922010 	ldr	r2, [r2, #16]
    1080:	e352001a 	cmp	r2, #26
    1084:	da000008 	ble	10ac <mario_update_location+0x2f4>
                mario_y -= MARIO_JUMP_SPEED;
    1088:	e3031e50 	movw	r1, #15952	; 0x3e50
    108c:	e3401000 	movt	r1, #0
    1090:	e2422008 	sub	r2, r2, #8
    1094:	e5812010 	str	r2, [r1, #16]
                mario_jumped += MARIO_JUMP_SPEED;
    1098:	e30e2184 	movw	r2, #57732	; 0xe184
    109c:	e340201c 	movt	r2, #28
    10a0:	e2833008 	add	r3, r3, #8
    10a4:	e5823018 	str	r3, [r2, #24]
    10a8:	ea000005 	b	10c4 <mario_update_location+0x30c>
            } else{
                mario_fall = true;
    10ac:	e30e3184 	movw	r3, #57732	; 0xe184
    10b0:	e340301c 	movt	r3, #28
    10b4:	e3a02001 	mov	r2, #1
    10b8:	e5c32015 	strb	r2, [r3, #21]
                mario_jumped = 0;
    10bc:	e3a02000 	mov	r2, #0
    10c0:	e5832018 	str	r2, [r3, #24]
            }

            if (mario_fall){
    10c4:	e30e3184 	movw	r3, #57732	; 0xe184
    10c8:	e340301c 	movt	r3, #28
    10cc:	e5d33015 	ldrb	r3, [r3, #21]
    10d0:	e3530000 	cmp	r3, #0
    10d4:	0a00006c 	beq	128c <mario_update_location+0x4d4>
                beat_mushroom();
    10d8:	ebffff07 	bl	cfc <beat_mushroom>
                mario_y += GRAVITY_FALL;
    10dc:	e3033e50 	movw	r3, #15952	; 0x3e50
    10e0:	e3403000 	movt	r3, #0
    10e4:	e5932010 	ldr	r2, [r3, #16]
    10e8:	e282200a 	add	r2, r2, #10
    10ec:	e5832010 	str	r2, [r3, #16]
            }
        }
        //if not landing, cannot jump again
        //if on steps
        if (mario_fall && steps_1_low_x < mario_x + 20 && mario_x + 5 < steps_1_high_x && mario_y + 25 <= steps_1_y + 20){
    10f0:	e30e3184 	movw	r3, #57732	; 0xe184
    10f4:	e340301c 	movt	r3, #28
    10f8:	e5d33015 	ldrb	r3, [r3, #21]
    10fc:	e3530000 	cmp	r3, #0
    1100:	0a000061 	beq	128c <mario_update_location+0x4d4>
    1104:	e3033e50 	movw	r3, #15952	; 0x3e50
    1108:	e3403000 	movt	r3, #0
    110c:	e593200c 	ldr	r2, [r3, #12]
    1110:	e2821014 	add	r1, r2, #20
    1114:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
    1118:	e1510003 	cmp	r1, r3
    111c:	da000024 	ble	11b4 <mario_update_location+0x3fc>
    1120:	e2820005 	add	r0, r2, #5
    1124:	e3033e50 	movw	r3, #15952	; 0x3e50
    1128:	e3403000 	movt	r3, #0
    112c:	e593308c 	ldr	r3, [r3, #140]	; 0x8c
    1130:	e1500003 	cmp	r0, r3
    1134:	aa00001e 	bge	11b4 <mario_update_location+0x3fc>
    1138:	e3033e50 	movw	r3, #15952	; 0x3e50
    113c:	e3403000 	movt	r3, #0
    1140:	e5930010 	ldr	r0, [r3, #16]
    1144:	e2800019 	add	r0, r0, #25
    1148:	e5933090 	ldr	r3, [r3, #144]	; 0x90
    114c:	e283c014 	add	r12, r3, #20
    1150:	e150000c 	cmp	r0, r12
    1154:	ca000016 	bgt	11b4 <mario_update_location+0x3fc>
            if (mario_y + 25 >= steps_1_y){
    1158:	e1500003 	cmp	r0, r3
    115c:	ba000008 	blt	1184 <mario_update_location+0x3cc>
                mario_y = steps_1_y - 25;
    1160:	e3032e50 	movw	r2, #15952	; 0x3e50
    1164:	e3402000 	movt	r2, #0
    1168:	e2431019 	sub	r1, r3, #25
    116c:	e5821010 	str	r1, [r2, #16]
                mario_jump = false;
    1170:	e30e2184 	movw	r2, #57732	; 0xe184
    1174:	e340201c 	movt	r2, #28
    1178:	e3a01000 	mov	r1, #0
    117c:	e5c21014 	strb	r1, [r2, #20]
                mario_fall = false;
    1180:	e5c21015 	strb	r1, [r2, #21]
            }
            if (mario_y != steps_1_y - 25){
    1184:	e2433019 	sub	r3, r3, #25
    1188:	e3032e50 	movw	r2, #15952	; 0x3e50
    118c:	e3402000 	movt	r2, #0
    1190:	e5922010 	ldr	r2, [r2, #16]
    1194:	e1530002 	cmp	r3, r2
    1198:	0a00003b 	beq	128c <mario_update_location+0x4d4>
                mario_jump = true;
    119c:	e30e3184 	movw	r3, #57732	; 0xe184
    11a0:	e340301c 	movt	r3, #28
    11a4:	e3a02001 	mov	r2, #1
    11a8:	e5c32014 	strb	r2, [r3, #20]
                mario_fall = true;
    11ac:	e5c32015 	strb	r2, [r3, #21]
    11b0:	ea000035 	b	128c <mario_update_location+0x4d4>
            }
        }//if on the pipe 
        else if (mario_fall && pipe_1_low_x < mario_x + 20 && mario_x + 5 < pipe_1_high_x){
    11b4:	e3033e50 	movw	r3, #15952	; 0x3e50
    11b8:	e3403000 	movt	r3, #0
    11bc:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
    11c0:	e1510003 	cmp	r1, r3
    11c4:	da000021 	ble	1250 <mario_update_location+0x498>
    11c8:	e2822005 	add	r2, r2, #5
    11cc:	e3033e50 	movw	r3, #15952	; 0x3e50
    11d0:	e3403000 	movt	r3, #0
    11d4:	e5933088 	ldr	r3, [r3, #136]	; 0x88
    11d8:	e1520003 	cmp	r2, r3
    11dc:	aa00001b 	bge	1250 <mario_update_location+0x498>
            if (mario_y + 25 >= pipe_1_y){
    11e0:	e3033e50 	movw	r3, #15952	; 0x3e50
    11e4:	e3403000 	movt	r3, #0
    11e8:	e5932080 	ldr	r2, [r3, #128]	; 0x80
    11ec:	e5933010 	ldr	r3, [r3, #16]
    11f0:	e2833019 	add	r3, r3, #25
    11f4:	e1530002 	cmp	r3, r2
    11f8:	ba000008 	blt	1220 <mario_update_location+0x468>
                mario_y = pipe_1_y - 25;
    11fc:	e3033e50 	movw	r3, #15952	; 0x3e50
    1200:	e3403000 	movt	r3, #0
    1204:	e2421019 	sub	r1, r2, #25
    1208:	e5831010 	str	r1, [r3, #16]
                mario_jump = false;
    120c:	e30e3184 	movw	r3, #57732	; 0xe184
    1210:	e340301c 	movt	r3, #28
    1214:	e3a01000 	mov	r1, #0
    1218:	e5c31014 	strb	r1, [r3, #20]
                mario_fall = false;
    121c:	e5c31015 	strb	r1, [r3, #21]
            }
            if (mario_y != pipe_1_y - 25){
    1220:	e2422019 	sub	r2, r2, #25
    1224:	e3033e50 	movw	r3, #15952	; 0x3e50
    1228:	e3403000 	movt	r3, #0
    122c:	e5933010 	ldr	r3, [r3, #16]
    1230:	e1520003 	cmp	r2, r3
    1234:	0a000014 	beq	128c <mario_update_location+0x4d4>
                mario_jump = true;
    1238:	e30e3184 	movw	r3, #57732	; 0xe184
    123c:	e340301c 	movt	r3, #28
    1240:	e3a02001 	mov	r2, #1
    1244:	e5c32014 	strb	r2, [r3, #20]
                mario_fall = true;
    1248:	e5c32015 	strb	r2, [r3, #21]
    124c:	ea00000e 	b	128c <mario_update_location+0x4d4>
            }
        } else if (mario_fall){
            if (mario_y + 25 >= LOWEST_Y){
    1250:	e3033e50 	movw	r3, #15952	; 0x3e50
    1254:	e3403000 	movt	r3, #0
    1258:	e5933010 	ldr	r3, [r3, #16]
    125c:	e2833019 	add	r3, r3, #25
    1260:	e35300c9 	cmp	r3, #201	; 0xc9
    1264:	da000008 	ble	128c <mario_update_location+0x4d4>
                mario_y = LOWEST_Y - 25;
    1268:	e3033e50 	movw	r3, #15952	; 0x3e50
    126c:	e3403000 	movt	r3, #0
    1270:	e3a020b1 	mov	r2, #177	; 0xb1
    1274:	e5832010 	str	r2, [r3, #16]
                mario_jump = false;
    1278:	e30e3184 	movw	r3, #57732	; 0xe184
    127c:	e340301c 	movt	r3, #28
    1280:	e3a02000 	mov	r2, #0
    1284:	e5c32014 	strb	r2, [r3, #20]
                mario_fall = false;
    1288:	e5c32015 	strb	r2, [r3, #21]
            }
        }
        mario_move_backward = false;
    128c:	e30e3184 	movw	r3, #57732	; 0xe184
    1290:	e340301c 	movt	r3, #28
    1294:	e3a02000 	mov	r2, #0
    1298:	e5c32012 	strb	r2, [r3, #18]
        mario_move_forward = false;
    129c:	e5c32013 	strb	r2, [r3, #19]

        //gravitational falling of Mario
        if (!mario_jump && (mario_x + 20 < steps_1_low_x || mario_x + 5 > steps_1_high_x) && (mario_x + 20 < pipe_1_low_x || mario_x + 5 > pipe_1_high_x) && mario_y + 25 < LOWEST_Y){
    12a0:	e5d33014 	ldrb	r3, [r3, #20]
    12a4:	e1530002 	cmp	r3, r2
    12a8:	1a0002b8 	bne	1d90 <mario_update_location+0xfd8>
    12ac:	e3033e50 	movw	r3, #15952	; 0x3e50
    12b0:	e3403000 	movt	r3, #0
    12b4:	e593200c 	ldr	r2, [r3, #12]
    12b8:	e2821014 	add	r1, r2, #20
    12bc:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
    12c0:	e1510003 	cmp	r1, r3
    12c4:	ba000005 	blt	12e0 <mario_update_location+0x528>
    12c8:	e2820005 	add	r0, r2, #5
    12cc:	e3033e50 	movw	r3, #15952	; 0x3e50
    12d0:	e3403000 	movt	r3, #0
    12d4:	e593308c 	ldr	r3, [r3, #140]	; 0x8c
    12d8:	e1500003 	cmp	r0, r3
    12dc:	da0002ab 	ble	1d90 <mario_update_location+0xfd8>
    12e0:	e3033e50 	movw	r3, #15952	; 0x3e50
    12e4:	e3403000 	movt	r3, #0
    12e8:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
    12ec:	e1510003 	cmp	r1, r3
    12f0:	ba000005 	blt	130c <mario_update_location+0x554>
    12f4:	e2822005 	add	r2, r2, #5
    12f8:	e3033e50 	movw	r3, #15952	; 0x3e50
    12fc:	e3403000 	movt	r3, #0
    1300:	e5933088 	ldr	r3, [r3, #136]	; 0x88
    1304:	e1520003 	cmp	r2, r3
    1308:	da0002a0 	ble	1d90 <mario_update_location+0xfd8>
    130c:	e3033e50 	movw	r3, #15952	; 0x3e50
    1310:	e3403000 	movt	r3, #0
    1314:	e5933010 	ldr	r3, [r3, #16]
    1318:	e2833019 	add	r3, r3, #25
    131c:	e35300c9 	cmp	r3, #201	; 0xc9
    1320:	ca00029a 	bgt	1d90 <mario_update_location+0xfd8>
            mario_fall = true;
    1324:	e30e3184 	movw	r3, #57732	; 0xe184
    1328:	e340301c 	movt	r3, #28
    132c:	e3a02001 	mov	r2, #1
    1330:	e5c32015 	strb	r2, [r3, #21]
            mario_jump = true;
    1334:	e5c32014 	strb	r2, [r3, #20]
    1338:	ea000294 	b	1d90 <mario_update_location+0xfd8>
        } 
    } else if (map_num == 2){
    133c:	e3530002 	cmp	r3, #2
    1340:	1a0001de 	bne	1ac0 <mario_update_location+0xd08>
        //control mario depends on different flags
        if (mario_move_forward && (mario_x + 25 <= pipe_2_L_low_x || mario_x > pipe_2_L_low_x || mario_y + 25 <= pipe_2_L_y)
    1344:	e30e3184 	movw	r3, #57732	; 0xe184
    1348:	e340301c 	movt	r3, #28
    134c:	e5d33013 	ldrb	r3, [r3, #19]
    1350:	e3530000 	cmp	r3, #0
    1354:	0a000023 	beq	13e8 <mario_update_location+0x630>
    1358:	e3033e50 	movw	r3, #15952	; 0x3e50
    135c:	e3403000 	movt	r3, #0
    1360:	e593200c 	ldr	r2, [r3, #12]
    1364:	e2821019 	add	r1, r2, #25
    1368:	e5933094 	ldr	r3, [r3, #148]	; 0x94
    136c:	e1510003 	cmp	r1, r3
    1370:	da000008 	ble	1398 <mario_update_location+0x5e0>
    1374:	e1520003 	cmp	r2, r3
    1378:	ca000006 	bgt	1398 <mario_update_location+0x5e0>
    137c:	e3033e50 	movw	r3, #15952	; 0x3e50
    1380:	e3403000 	movt	r3, #0
    1384:	e5930010 	ldr	r0, [r3, #16]
    1388:	e2800019 	add	r0, r0, #25
    138c:	e5933098 	ldr	r3, [r3, #152]	; 0x98
    1390:	e1500003 	cmp	r0, r3
    1394:	ca000013 	bgt	13e8 <mario_update_location+0x630>
                               && (mario_x + 25 <= pipe_2_R_low_x || mario_x > pipe_2_R_low_x || mario_y + 25 <= pipe_2_R_y)){
    1398:	e3033e50 	movw	r3, #15952	; 0x3e50
    139c:	e3403000 	movt	r3, #0
    13a0:	e5933074 	ldr	r3, [r3, #116]	; 0x74
    13a4:	e1510003 	cmp	r1, r3
    13a8:	da000008 	ble	13d0 <mario_update_location+0x618>
    13ac:	e1520003 	cmp	r2, r3
    13b0:	ca000006 	bgt	13d0 <mario_update_location+0x618>
    13b4:	e3033e50 	movw	r3, #15952	; 0x3e50
    13b8:	e3403000 	movt	r3, #0
    13bc:	e5931010 	ldr	r1, [r3, #16]
    13c0:	e2811019 	add	r1, r1, #25
    13c4:	e593309c 	ldr	r3, [r3, #156]	; 0x9c
    13c8:	e1510003 	cmp	r1, r3
    13cc:	ca000005 	bgt	13e8 <mario_update_location+0x630>
            mario_x += MARIO_RUN_SPEED;
    13d0:	e3033e50 	movw	r3, #15952	; 0x3e50
    13d4:	e3403000 	movt	r3, #0
    13d8:	e2822004 	add	r2, r2, #4
    13dc:	e583200c 	str	r2, [r3, #12]
            is_mario_moving_forward = true;
    13e0:	e3a02001 	mov	r2, #1
    13e4:	e5c32084 	strb	r2, [r3, #132]	; 0x84
        } 
        if (mario_move_backward && (mario_x >= pipe_2_L_high_x || mario_x < pipe_2_L_high_x || mario_y + 25 <= pipe_2_L_y)
    13e8:	e30e3184 	movw	r3, #57732	; 0xe184
    13ec:	e340301c 	movt	r3, #28
    13f0:	e5d33012 	ldrb	r3, [r3, #18]
    13f4:	e3530000 	cmp	r3, #0
    13f8:	0a000006 	beq	1418 <mario_update_location+0x660>
                                && (mario_x >= pipe_2_R_high_x || mario_x < pipe_2_R_high_x || mario_y + 25 <= pipe_2_R_y)){
            mario_x -= MARIO_RUN_SPEED;
    13fc:	e3033e50 	movw	r3, #15952	; 0x3e50
    1400:	e3403000 	movt	r3, #0
    1404:	e593200c 	ldr	r2, [r3, #12]
    1408:	e2422004 	sub	r2, r2, #4
    140c:	e583200c 	str	r2, [r3, #12]
            is_mario_moving_forward = false;
    1410:	e3a02000 	mov	r2, #0
    1414:	e5c32084 	strb	r2, [r3, #132]	; 0x84
        }
        if (mario_jump){
    1418:	e30e3184 	movw	r3, #57732	; 0xe184
    141c:	e340301c 	movt	r3, #28
    1420:	e5d33014 	ldrb	r3, [r3, #20]
    1424:	e3530000 	cmp	r3, #0
    1428:	0a0000a2 	beq	16b8 <mario_update_location+0x900>
            //if under left steps
            if (steps_2_L_low_x <= mario_x + MARIO_MID && mario_x + MARIO_MID <= steps_2_L_high_x && mario_y > steps_2_L_y){
    142c:	e3036e50 	movw	r6, #15952	; 0x3e50
    1430:	e3406000 	movt	r6, #0
    1434:	e596000c 	ldr	r0, [r6, #12]
    1438:	eb000794 	bl	3290 <__aeabi_i2d>
    143c:	e3a02000 	mov	r2, #0
    1440:	e3a03000 	mov	r3, #0
    1444:	e3443029 	movt	r3, #16425	; 0x4029
    1448:	eb0006c3 	bl	2f5c <__adddf3>
    144c:	e1a04000 	mov	r4, r0
    1450:	e1a05001 	mov	r5, r1
    1454:	e5960064 	ldr	r0, [r6, #100]	; 0x64
    1458:	eb00078c 	bl	3290 <__aeabi_i2d>
    145c:	e1a02004 	mov	r2, r4
    1460:	e1a03005 	mov	r3, r5
    1464:	eb000926 	bl	3904 <__aeabi_dcmple>
    1468:	e3500000 	cmp	r0, #0
    146c:	0a00001d 	beq	14e8 <mario_update_location+0x730>
    1470:	e5960068 	ldr	r0, [r6, #104]	; 0x68
    1474:	eb000785 	bl	3290 <__aeabi_i2d>
    1478:	e1a02000 	mov	r2, r0
    147c:	e1a03001 	mov	r3, r1
    1480:	e1a00004 	mov	r0, r4
    1484:	e1a01005 	mov	r1, r5
    1488:	eb00091d 	bl	3904 <__aeabi_dcmple>
    148c:	e3500000 	cmp	r0, #0
    1490:	0a000014 	beq	14e8 <mario_update_location+0x730>
    1494:	e5962010 	ldr	r2, [r6, #16]
    1498:	e59630a0 	ldr	r3, [r6, #160]	; 0xa0
    149c:	e1520003 	cmp	r2, r3
    14a0:	da000010 	ble	14e8 <mario_update_location+0x730>
                if (!mario_fall && mario_y > steps_2_L_y + 25){
    14a4:	e30e1184 	movw	r1, #57732	; 0xe184
    14a8:	e340101c 	movt	r1, #28
    14ac:	e5d11015 	ldrb	r1, [r1, #21]
    14b0:	e3510000 	cmp	r1, #0
    14b4:	1a000004 	bne	14cc <mario_update_location+0x714>
    14b8:	e2833019 	add	r3, r3, #25
    14bc:	e1520003 	cmp	r2, r3
                    mario_y -= MARIO_JUMP_SPEED;
    14c0:	c2422008 	subgt	r2, r2, #8
    14c4:	c5862010 	strgt	r2, [r6, #16]
    14c8:	ca00006e 	bgt	1688 <mario_update_location+0x8d0>
                } else{
                    mario_fall = true;
    14cc:	e30e3184 	movw	r3, #57732	; 0xe184
    14d0:	e340301c 	movt	r3, #28
    14d4:	e3a02001 	mov	r2, #1
    14d8:	e5c32015 	strb	r2, [r3, #21]
                    mario_jumped = 0;
    14dc:	e3a02000 	mov	r2, #0
    14e0:	e5832018 	str	r2, [r3, #24]
    14e4:	ea000067 	b	1688 <mario_update_location+0x8d0>
                }
            } else if (steps_2_R_low_x <= mario_x + MARIO_MID && mario_x + MARIO_MID <= steps_2_R_high_x && mario_y > steps_2_R_y){ //if under right step
    14e8:	e3033e50 	movw	r3, #15952	; 0x3e50
    14ec:	e3403000 	movt	r3, #0
    14f0:	e5930060 	ldr	r0, [r3, #96]	; 0x60
    14f4:	eb000765 	bl	3290 <__aeabi_i2d>
    14f8:	e1a02000 	mov	r2, r0
    14fc:	e1a03001 	mov	r3, r1
    1500:	e1a00004 	mov	r0, r4
    1504:	e1a01005 	mov	r1, r5
    1508:	eb000903 	bl	391c <__aeabi_dcmpge>
    150c:	e3500000 	cmp	r0, #0
    1510:	0a00003e 	beq	1610 <mario_update_location+0x858>
    1514:	e3033e50 	movw	r3, #15952	; 0x3e50
    1518:	e3403000 	movt	r3, #0
    151c:	e59300a4 	ldr	r0, [r3, #164]	; 0xa4
    1520:	eb00075a 	bl	3290 <__aeabi_i2d>
    1524:	e1a02000 	mov	r2, r0
    1528:	e1a03001 	mov	r3, r1
    152c:	e1a00004 	mov	r0, r4
    1530:	e1a01005 	mov	r1, r5
    1534:	eb0008f2 	bl	3904 <__aeabi_dcmple>
    1538:	e3500000 	cmp	r0, #0
    153c:	0a000033 	beq	1610 <mario_update_location+0x858>
    1540:	e3033e50 	movw	r3, #15952	; 0x3e50
    1544:	e3403000 	movt	r3, #0
    1548:	e5932010 	ldr	r2, [r3, #16]
    154c:	e59330a8 	ldr	r3, [r3, #168]	; 0xa8
    1550:	e1520003 	cmp	r2, r3
    1554:	da00002d 	ble	1610 <mario_update_location+0x858>
                if (!mario_fall && mario_y > steps_2_R_y + 25){
    1558:	e30e1184 	movw	r1, #57732	; 0xe184
    155c:	e340101c 	movt	r1, #28
    1560:	e5d11015 	ldrb	r1, [r1, #21]
    1564:	e3510000 	cmp	r1, #0
    1568:	1a000007 	bne	158c <mario_update_location+0x7d4>
    156c:	e2833019 	add	r3, r3, #25
    1570:	e1520003 	cmp	r2, r3
    1574:	da000004 	ble	158c <mario_update_location+0x7d4>
                    mario_y -= MARIO_JUMP_SPEED;
    1578:	e3033e50 	movw	r3, #15952	; 0x3e50
    157c:	e3403000 	movt	r3, #0
    1580:	e2422008 	sub	r2, r2, #8
    1584:	e5832010 	str	r2, [r3, #16]
    1588:	ea00003e 	b	1688 <mario_update_location+0x8d0>
                } else{
                    mario_fall = true;
    158c:	e30e3184 	movw	r3, #57732	; 0xe184
    1590:	e340301c 	movt	r3, #28
    1594:	e3a02001 	mov	r2, #1
    1598:	e5c32015 	strb	r2, [r3, #21]
                    mario_jumped = 0;
    159c:	e3a06000 	mov	r6, #0
    15a0:	e5836018 	str	r6, [r3, #24]
        isGameOver = true;
    }
}


void mario_update_location(){
    15a4:	e59f8728 	ldr	r8, [pc, #1832]	; 1cd4 <mario_update_location+0xf1c>
                    mario_fall = true;
                    mario_jumped = 0;
                    for (int i = 0; i < 3; i++)
                    {
                        if (mario_x + MARIO_MID >= money_x[i] && mario_x + MARIO_MID <= money_x[i] + 16){
                            isMoney[i] = true;
    15a8:	e1a0a003 	mov	r10, r3
    15ac:	e1a09002 	mov	r9, r2
                } else{
                    mario_fall = true;
                    mario_jumped = 0;
                    for (int i = 0; i < 3; i++)
                    {
                        if (mario_x + MARIO_MID >= money_x[i] && mario_x + MARIO_MID <= money_x[i] + 16){
    15b0:	e5b87004 	ldr	r7, [r8, #4]!
    15b4:	e1a00007 	mov	r0, r7
    15b8:	eb000734 	bl	3290 <__aeabi_i2d>
    15bc:	e1a02000 	mov	r2, r0
    15c0:	e1a03001 	mov	r3, r1
    15c4:	e1a00004 	mov	r0, r4
    15c8:	e1a01005 	mov	r1, r5
    15cc:	eb0008d2 	bl	391c <__aeabi_dcmpge>
    15d0:	e3500000 	cmp	r0, #0
    15d4:	0a000009 	beq	1600 <mario_update_location+0x848>
    15d8:	e2870010 	add	r0, r7, #16
    15dc:	eb00072b 	bl	3290 <__aeabi_i2d>
    15e0:	e1a02000 	mov	r2, r0
    15e4:	e1a03001 	mov	r3, r1
    15e8:	e1a00004 	mov	r0, r4
    15ec:	e1a01005 	mov	r1, r5
    15f0:	eb0008c3 	bl	3904 <__aeabi_dcmple>
    15f4:	e3500000 	cmp	r0, #0
                            isMoney[i] = true;
    15f8:	128a3008 	addne	r3, r10, #8
    15fc:	17c69003 	strbne	r9, [r6, r3]
                if (!mario_fall && mario_y > steps_2_R_y + 25){
                    mario_y -= MARIO_JUMP_SPEED;
                } else{
                    mario_fall = true;
                    mario_jumped = 0;
                    for (int i = 0; i < 3; i++)
    1600:	e2866001 	add	r6, r6, #1
    1604:	e3560003 	cmp	r6, #3
    1608:	1affffe8 	bne	15b0 <mario_update_location+0x7f8>
    160c:	ea00001d 	b	1688 <mario_update_location+0x8d0>
                            isMoney[i] = true;
                        }
                    }
                    
                }
            }else if (!mario_fall && mario_jumped < MARIO_JUMP_HIGHT && mario_y >= 27){
    1610:	e30e3184 	movw	r3, #57732	; 0xe184
    1614:	e340301c 	movt	r3, #28
    1618:	e5d33015 	ldrb	r3, [r3, #21]
    161c:	e3530000 	cmp	r3, #0
    1620:	1a000012 	bne	1670 <mario_update_location+0x8b8>
    1624:	e30e3184 	movw	r3, #57732	; 0xe184
    1628:	e340301c 	movt	r3, #28
    162c:	e5933018 	ldr	r3, [r3, #24]
    1630:	e353004a 	cmp	r3, #74	; 0x4a
    1634:	ca00000d 	bgt	1670 <mario_update_location+0x8b8>
    1638:	e3032e50 	movw	r2, #15952	; 0x3e50
    163c:	e3402000 	movt	r2, #0
    1640:	e5922010 	ldr	r2, [r2, #16]
    1644:	e352001a 	cmp	r2, #26
    1648:	da000008 	ble	1670 <mario_update_location+0x8b8>
                mario_y -= MARIO_JUMP_SPEED;
    164c:	e3031e50 	movw	r1, #15952	; 0x3e50
    1650:	e3401000 	movt	r1, #0
    1654:	e2422008 	sub	r2, r2, #8
    1658:	e5812010 	str	r2, [r1, #16]
                mario_jumped += MARIO_JUMP_SPEED;
    165c:	e30e2184 	movw	r2, #57732	; 0xe184
    1660:	e340201c 	movt	r2, #28
    1664:	e2833008 	add	r3, r3, #8
    1668:	e5823018 	str	r3, [r2, #24]
    166c:	ea000005 	b	1688 <mario_update_location+0x8d0>
            } else{
                mario_fall = true;
    1670:	e30e3184 	movw	r3, #57732	; 0xe184
    1674:	e340301c 	movt	r3, #28
    1678:	e3a02001 	mov	r2, #1
    167c:	e5c32015 	strb	r2, [r3, #21]
                mario_jumped = 0;
    1680:	e3a02000 	mov	r2, #0
    1684:	e5832018 	str	r2, [r3, #24]
            }

            if (mario_fall){
    1688:	e30e3184 	movw	r3, #57732	; 0xe184
    168c:	e340301c 	movt	r3, #28
    1690:	e5d33015 	ldrb	r3, [r3, #21]
    1694:	e3530000 	cmp	r3, #0
    1698:	0a0000be 	beq	1998 <mario_update_location+0xbe0>
                beat_mushroom();
    169c:	ebfffd96 	bl	cfc <beat_mushroom>
                beat_turtle();
    16a0:	ebfffcb2 	bl	970 <beat_turtle>
                mario_y += GRAVITY_FALL;
    16a4:	e3033e50 	movw	r3, #15952	; 0x3e50
    16a8:	e3403000 	movt	r3, #0
    16ac:	e5932010 	ldr	r2, [r3, #16]
    16b0:	e282200a 	add	r2, r2, #10
    16b4:	e5832010 	str	r2, [r3, #16]
            }
        }
        //if not landing, cannot jump again
        //if on left steps
        if (mario_fall && steps_2_L_low_x < mario_x + 20 && mario_x + 5 < steps_2_L_high_x && mario_y + 25 <= steps_2_L_y + 20){
    16b8:	e30e3184 	movw	r3, #57732	; 0xe184
    16bc:	e340301c 	movt	r3, #28
    16c0:	e5d33015 	ldrb	r3, [r3, #21]
    16c4:	e3530000 	cmp	r3, #0
    16c8:	0a0000b2 	beq	1998 <mario_update_location+0xbe0>
    16cc:	e3033e50 	movw	r3, #15952	; 0x3e50
    16d0:	e3403000 	movt	r3, #0
    16d4:	e593100c 	ldr	r1, [r3, #12]
    16d8:	e2812014 	add	r2, r1, #20
    16dc:	e5933064 	ldr	r3, [r3, #100]	; 0x64
    16e0:	e1520003 	cmp	r2, r3
    16e4:	da000024 	ble	177c <mario_update_location+0x9c4>
    16e8:	e2810005 	add	r0, r1, #5
    16ec:	e3033e50 	movw	r3, #15952	; 0x3e50
    16f0:	e3403000 	movt	r3, #0
    16f4:	e5933068 	ldr	r3, [r3, #104]	; 0x68
    16f8:	e1500003 	cmp	r0, r3
    16fc:	aa00001e 	bge	177c <mario_update_location+0x9c4>
    1700:	e3033e50 	movw	r3, #15952	; 0x3e50
    1704:	e3403000 	movt	r3, #0
    1708:	e5930010 	ldr	r0, [r3, #16]
    170c:	e2800019 	add	r0, r0, #25
    1710:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
    1714:	e283c014 	add	r12, r3, #20
    1718:	e150000c 	cmp	r0, r12
    171c:	ca000016 	bgt	177c <mario_update_location+0x9c4>
            if (mario_y + 25 >= steps_2_L_y){
    1720:	e1500003 	cmp	r0, r3
    1724:	ba000008 	blt	174c <mario_update_location+0x994>
                mario_y = steps_2_L_y - 25;
    1728:	e3032e50 	movw	r2, #15952	; 0x3e50
    172c:	e3402000 	movt	r2, #0
    1730:	e2431019 	sub	r1, r3, #25
    1734:	e5821010 	str	r1, [r2, #16]
                mario_jump = false;
    1738:	e30e2184 	movw	r2, #57732	; 0xe184
    173c:	e340201c 	movt	r2, #28
    1740:	e3a01000 	mov	r1, #0
    1744:	e5c21014 	strb	r1, [r2, #20]
                mario_fall = false;
    1748:	e5c21015 	strb	r1, [r2, #21]
            }
            if (mario_y != steps_2_L_y - 25){
    174c:	e2433019 	sub	r3, r3, #25
    1750:	e3032e50 	movw	r2, #15952	; 0x3e50
    1754:	e3402000 	movt	r2, #0
    1758:	e5922010 	ldr	r2, [r2, #16]
    175c:	e1530002 	cmp	r3, r2
    1760:	0a00008c 	beq	1998 <mario_update_location+0xbe0>
                mario_jump = true;
    1764:	e30e3184 	movw	r3, #57732	; 0xe184
    1768:	e340301c 	movt	r3, #28
    176c:	e3a02001 	mov	r2, #1
    1770:	e5c32014 	strb	r2, [r3, #20]
                mario_fall = true;
    1774:	e5c32015 	strb	r2, [r3, #21]
    1778:	ea000086 	b	1998 <mario_update_location+0xbe0>
            }
        } else if (mario_fall && steps_2_R_low_x < mario_x + 20 && mario_x + 5 < steps_2_R_high_x && mario_y + 25 <= steps_2_R_y + 20){ // on right step
    177c:	e3033e50 	movw	r3, #15952	; 0x3e50
    1780:	e3403000 	movt	r3, #0
    1784:	e5933060 	ldr	r3, [r3, #96]	; 0x60
    1788:	e1520003 	cmp	r2, r3
    178c:	da000024 	ble	1824 <mario_update_location+0xa6c>
    1790:	e2810005 	add	r0, r1, #5
    1794:	e3033e50 	movw	r3, #15952	; 0x3e50
    1798:	e3403000 	movt	r3, #0
    179c:	e59330a4 	ldr	r3, [r3, #164]	; 0xa4
    17a0:	e1500003 	cmp	r0, r3
    17a4:	aa00001e 	bge	1824 <mario_update_location+0xa6c>
    17a8:	e3033e50 	movw	r3, #15952	; 0x3e50
    17ac:	e3403000 	movt	r3, #0
    17b0:	e5930010 	ldr	r0, [r3, #16]
    17b4:	e2800019 	add	r0, r0, #25
    17b8:	e59330a8 	ldr	r3, [r3, #168]	; 0xa8
    17bc:	e283c014 	add	r12, r3, #20
    17c0:	e150000c 	cmp	r0, r12
    17c4:	ca000016 	bgt	1824 <mario_update_location+0xa6c>
            if (mario_y + 25 >= steps_2_R_y){
    17c8:	e1500003 	cmp	r0, r3
    17cc:	ba000008 	blt	17f4 <mario_update_location+0xa3c>
                mario_y = steps_2_R_y - 25;
    17d0:	e3032e50 	movw	r2, #15952	; 0x3e50
    17d4:	e3402000 	movt	r2, #0
    17d8:	e2431019 	sub	r1, r3, #25
    17dc:	e5821010 	str	r1, [r2, #16]
                mario_jump = false;
    17e0:	e30e2184 	movw	r2, #57732	; 0xe184
    17e4:	e340201c 	movt	r2, #28
    17e8:	e3a01000 	mov	r1, #0
    17ec:	e5c21014 	strb	r1, [r2, #20]
                mario_fall = false;
    17f0:	e5c21015 	strb	r1, [r2, #21]
            }
            if (mario_y != steps_2_R_y - 25){
    17f4:	e2433019 	sub	r3, r3, #25
    17f8:	e3032e50 	movw	r2, #15952	; 0x3e50
    17fc:	e3402000 	movt	r2, #0
    1800:	e5922010 	ldr	r2, [r2, #16]
    1804:	e1530002 	cmp	r3, r2
    1808:	0a000062 	beq	1998 <mario_update_location+0xbe0>
                mario_jump = true;
    180c:	e30e3184 	movw	r3, #57732	; 0xe184
    1810:	e340301c 	movt	r3, #28
    1814:	e3a02001 	mov	r2, #1
    1818:	e5c32014 	strb	r2, [r3, #20]
                mario_fall = true;
    181c:	e5c32015 	strb	r2, [r3, #21]
    1820:	ea00005c 	b	1998 <mario_update_location+0xbe0>
            }
        } else if (mario_fall && pipe_2_L_low_x < mario_x + 20 && mario_x + 5 < pipe_2_L_high_x){//if on left pipe 
    1824:	e3033e50 	movw	r3, #15952	; 0x3e50
    1828:	e3403000 	movt	r3, #0
    182c:	e5933094 	ldr	r3, [r3, #148]	; 0x94
    1830:	e1520003 	cmp	r2, r3
    1834:	da000021 	ble	18c0 <mario_update_location+0xb08>
    1838:	e2810005 	add	r0, r1, #5
    183c:	e3033e50 	movw	r3, #15952	; 0x3e50
    1840:	e3403000 	movt	r3, #0
    1844:	e5933070 	ldr	r3, [r3, #112]	; 0x70
    1848:	e1500003 	cmp	r0, r3
    184c:	aa00001b 	bge	18c0 <mario_update_location+0xb08>
            if (mario_y + 25 >= pipe_2_L_y){
    1850:	e3033e50 	movw	r3, #15952	; 0x3e50
    1854:	e3403000 	movt	r3, #0
    1858:	e5932098 	ldr	r2, [r3, #152]	; 0x98
    185c:	e5933010 	ldr	r3, [r3, #16]
    1860:	e2833019 	add	r3, r3, #25
    1864:	e1530002 	cmp	r3, r2
    1868:	ba000008 	blt	1890 <mario_update_location+0xad8>
                mario_y = pipe_2_L_y - 25;
    186c:	e3033e50 	movw	r3, #15952	; 0x3e50
    1870:	e3403000 	movt	r3, #0
    1874:	e2421019 	sub	r1, r2, #25
    1878:	e5831010 	str	r1, [r3, #16]
                mario_jump = false;
    187c:	e30e3184 	movw	r3, #57732	; 0xe184
    1880:	e340301c 	movt	r3, #28
    1884:	e3a01000 	mov	r1, #0
    1888:	e5c31014 	strb	r1, [r3, #20]
                mario_fall = false;
    188c:	e5c31015 	strb	r1, [r3, #21]
            }
            if (mario_y != pipe_2_L_y - 25){
    1890:	e2422019 	sub	r2, r2, #25
    1894:	e3033e50 	movw	r3, #15952	; 0x3e50
    1898:	e3403000 	movt	r3, #0
    189c:	e5933010 	ldr	r3, [r3, #16]
    18a0:	e1520003 	cmp	r2, r3
    18a4:	0a00003b 	beq	1998 <mario_update_location+0xbe0>
                mario_jump = true;
    18a8:	e30e3184 	movw	r3, #57732	; 0xe184
    18ac:	e340301c 	movt	r3, #28
    18b0:	e3a02001 	mov	r2, #1
    18b4:	e5c32014 	strb	r2, [r3, #20]
                mario_fall = true;
    18b8:	e5c32015 	strb	r2, [r3, #21]
    18bc:	ea000035 	b	1998 <mario_update_location+0xbe0>
            }
        } else if (mario_fall && pipe_2_R_low_x < mario_x + 20 && mario_x + 5 < pipe_2_R_high_x){//if on right pipe 
    18c0:	e3033e50 	movw	r3, #15952	; 0x3e50
    18c4:	e3403000 	movt	r3, #0
    18c8:	e5933074 	ldr	r3, [r3, #116]	; 0x74
    18cc:	e1520003 	cmp	r2, r3
    18d0:	da000021 	ble	195c <mario_update_location+0xba4>
    18d4:	e2811005 	add	r1, r1, #5
    18d8:	e3033e50 	movw	r3, #15952	; 0x3e50
    18dc:	e3403000 	movt	r3, #0
    18e0:	e59330ac 	ldr	r3, [r3, #172]	; 0xac
    18e4:	e1510003 	cmp	r1, r3
    18e8:	aa00001b 	bge	195c <mario_update_location+0xba4>
            if (mario_y + 25 >= pipe_2_R_y){
    18ec:	e3033e50 	movw	r3, #15952	; 0x3e50
    18f0:	e3403000 	movt	r3, #0
    18f4:	e593209c 	ldr	r2, [r3, #156]	; 0x9c
    18f8:	e5933010 	ldr	r3, [r3, #16]
    18fc:	e2833019 	add	r3, r3, #25
    1900:	e1530002 	cmp	r3, r2
    1904:	ba000008 	blt	192c <mario_update_location+0xb74>
                mario_y = pipe_2_R_y - 25;
    1908:	e3033e50 	movw	r3, #15952	; 0x3e50
    190c:	e3403000 	movt	r3, #0
    1910:	e2421019 	sub	r1, r2, #25
    1914:	e5831010 	str	r1, [r3, #16]
                mario_jump = false;
    1918:	e30e3184 	movw	r3, #57732	; 0xe184
    191c:	e340301c 	movt	r3, #28
    1920:	e3a01000 	mov	r1, #0
    1924:	e5c31014 	strb	r1, [r3, #20]
                mario_fall = false;
    1928:	e5c31015 	strb	r1, [r3, #21]
            }
            if (mario_y != pipe_2_R_y - 25){
    192c:	e2422019 	sub	r2, r2, #25
    1930:	e3033e50 	movw	r3, #15952	; 0x3e50
    1934:	e3403000 	movt	r3, #0
    1938:	e5933010 	ldr	r3, [r3, #16]
    193c:	e1520003 	cmp	r2, r3
    1940:	0a000014 	beq	1998 <mario_update_location+0xbe0>
                mario_jump = true;
    1944:	e30e3184 	movw	r3, #57732	; 0xe184
    1948:	e340301c 	movt	r3, #28
    194c:	e3a02001 	mov	r2, #1
    1950:	e5c32014 	strb	r2, [r3, #20]
                mario_fall = true;
    1954:	e5c32015 	strb	r2, [r3, #21]
    1958:	ea00000e 	b	1998 <mario_update_location+0xbe0>
            }
        } else if (mario_fall){
            if (mario_y + 25 >= LOWEST_Y){
    195c:	e3033e50 	movw	r3, #15952	; 0x3e50
    1960:	e3403000 	movt	r3, #0
    1964:	e5933010 	ldr	r3, [r3, #16]
    1968:	e2833019 	add	r3, r3, #25
    196c:	e35300c9 	cmp	r3, #201	; 0xc9
    1970:	da000008 	ble	1998 <mario_update_location+0xbe0>
                mario_y = LOWEST_Y - 25;
    1974:	e3033e50 	movw	r3, #15952	; 0x3e50
    1978:	e3403000 	movt	r3, #0
    197c:	e3a020b1 	mov	r2, #177	; 0xb1
    1980:	e5832010 	str	r2, [r3, #16]
                mario_jump = false;
    1984:	e30e3184 	movw	r3, #57732	; 0xe184
    1988:	e340301c 	movt	r3, #28
    198c:	e3a02000 	mov	r2, #0
    1990:	e5c32014 	strb	r2, [r3, #20]
                mario_fall = false;
    1994:	e5c32015 	strb	r2, [r3, #21]
            }
        }
        mario_move_backward = false;
    1998:	e30e3184 	movw	r3, #57732	; 0xe184
    199c:	e340301c 	movt	r3, #28
    19a0:	e3a02000 	mov	r2, #0
    19a4:	e5c32012 	strb	r2, [r3, #18]
        mario_move_forward = false;
    19a8:	e5c32013 	strb	r2, [r3, #19]

        //gravitational falling of Mario
        if (!mario_jump && (mario_x + 20 < steps_2_L_low_x || mario_x + 5 > steps_2_L_high_x || mario_y + 25 >= steps_2_L_y + 20) 
    19ac:	e5d33014 	ldrb	r3, [r3, #20]
    19b0:	e1530002 	cmp	r3, r2
    19b4:	1a0000f5 	bne	1d90 <mario_update_location+0xfd8>
    19b8:	e3033e50 	movw	r3, #15952	; 0x3e50
    19bc:	e3403000 	movt	r3, #0
    19c0:	e593100c 	ldr	r1, [r3, #12]
    19c4:	e2812014 	add	r2, r1, #20
    19c8:	e5933064 	ldr	r3, [r3, #100]	; 0x64
    19cc:	e1520003 	cmp	r2, r3
    19d0:	ba00000d 	blt	1a0c <mario_update_location+0xc54>
    19d4:	e2810005 	add	r0, r1, #5
    19d8:	e3033e50 	movw	r3, #15952	; 0x3e50
    19dc:	e3403000 	movt	r3, #0
    19e0:	e5933068 	ldr	r3, [r3, #104]	; 0x68
    19e4:	e1500003 	cmp	r0, r3
    19e8:	ca000007 	bgt	1a0c <mario_update_location+0xc54>
    19ec:	e3033e50 	movw	r3, #15952	; 0x3e50
    19f0:	e3403000 	movt	r3, #0
    19f4:	e5930010 	ldr	r0, [r3, #16]
    19f8:	e2800019 	add	r0, r0, #25
    19fc:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
    1a00:	e2833014 	add	r3, r3, #20
    1a04:	e1500003 	cmp	r0, r3
    1a08:	ba0000e0 	blt	1d90 <mario_update_location+0xfd8>
                        && (mario_x + 20 < steps_2_R_low_x || mario_x + 5 > steps_2_R_high_x) 
    1a0c:	e3033e50 	movw	r3, #15952	; 0x3e50
    1a10:	e3403000 	movt	r3, #0
    1a14:	e5933060 	ldr	r3, [r3, #96]	; 0x60
    1a18:	e1520003 	cmp	r2, r3
    1a1c:	ba000005 	blt	1a38 <mario_update_location+0xc80>
    1a20:	e2810005 	add	r0, r1, #5
    1a24:	e3033e50 	movw	r3, #15952	; 0x3e50
    1a28:	e3403000 	movt	r3, #0
    1a2c:	e59330a4 	ldr	r3, [r3, #164]	; 0xa4
    1a30:	e1500003 	cmp	r0, r3
    1a34:	da0000d5 	ble	1d90 <mario_update_location+0xfd8>
                        && (mario_x + 20 < pipe_2_L_low_x || mario_x + 5 > pipe_2_L_high_x) 
    1a38:	e3033e50 	movw	r3, #15952	; 0x3e50
    1a3c:	e3403000 	movt	r3, #0
    1a40:	e5933094 	ldr	r3, [r3, #148]	; 0x94
    1a44:	e1520003 	cmp	r2, r3
    1a48:	ba000005 	blt	1a64 <mario_update_location+0xcac>
    1a4c:	e2810005 	add	r0, r1, #5
    1a50:	e3033e50 	movw	r3, #15952	; 0x3e50
    1a54:	e3403000 	movt	r3, #0
    1a58:	e5933070 	ldr	r3, [r3, #112]	; 0x70
    1a5c:	e1500003 	cmp	r0, r3
    1a60:	da0000ca 	ble	1d90 <mario_update_location+0xfd8>
                        && (mario_x + 20 < pipe_2_R_low_x || mario_x + 5 > pipe_2_R_high_x) 
    1a64:	e3033e50 	movw	r3, #15952	; 0x3e50
    1a68:	e3403000 	movt	r3, #0
    1a6c:	e5933074 	ldr	r3, [r3, #116]	; 0x74
    1a70:	e1520003 	cmp	r2, r3
    1a74:	ba000005 	blt	1a90 <mario_update_location+0xcd8>
    1a78:	e2811005 	add	r1, r1, #5
    1a7c:	e3033e50 	movw	r3, #15952	; 0x3e50
    1a80:	e3403000 	movt	r3, #0
    1a84:	e59330ac 	ldr	r3, [r3, #172]	; 0xac
    1a88:	e1510003 	cmp	r1, r3
    1a8c:	da0000bf 	ble	1d90 <mario_update_location+0xfd8>
                        && mario_y + 25 < LOWEST_Y){
    1a90:	e3033e50 	movw	r3, #15952	; 0x3e50
    1a94:	e3403000 	movt	r3, #0
    1a98:	e5933010 	ldr	r3, [r3, #16]
    1a9c:	e2833019 	add	r3, r3, #25
    1aa0:	e35300c9 	cmp	r3, #201	; 0xc9
    1aa4:	ca0000b9 	bgt	1d90 <mario_update_location+0xfd8>
            mario_fall = true;
    1aa8:	e30e3184 	movw	r3, #57732	; 0xe184
    1aac:	e340301c 	movt	r3, #28
    1ab0:	e3a02001 	mov	r2, #1
    1ab4:	e5c32015 	strb	r2, [r3, #21]
            mario_jump = true;
    1ab8:	e5c32014 	strb	r2, [r3, #20]
    1abc:	ea0000b3 	b	1d90 <mario_update_location+0xfd8>
        } 
    } else if (map_num == 3){
    1ac0:	e3530003 	cmp	r3, #3
    1ac4:	1a0000b1 	bne	1d90 <mario_update_location+0xfd8>
        //control mario depends on different flags
        if (mario_move_forward && (mario_x + 25 <= pipe_3_low_x || mario_x > pipe_3_low_x || mario_y + 25 <= pipe_3_y)){
    1ac8:	e30e3184 	movw	r3, #57732	; 0xe184
    1acc:	e340301c 	movt	r3, #28
    1ad0:	e5d33013 	ldrb	r3, [r3, #19]
    1ad4:	e3530000 	cmp	r3, #0
    1ad8:	0a000015 	beq	1b34 <mario_update_location+0xd7c>
    1adc:	e3033e50 	movw	r3, #15952	; 0x3e50
    1ae0:	e3403000 	movt	r3, #0
    1ae4:	e593200c 	ldr	r2, [r3, #12]
    1ae8:	e59330b0 	ldr	r3, [r3, #176]	; 0xb0
    1aec:	e2821019 	add	r1, r2, #25
    1af0:	e1510003 	cmp	r1, r3
    1af4:	da000008 	ble	1b1c <mario_update_location+0xd64>
    1af8:	e1520003 	cmp	r2, r3
    1afc:	ca000006 	bgt	1b1c <mario_update_location+0xd64>
    1b00:	e3033e50 	movw	r3, #15952	; 0x3e50
    1b04:	e3403000 	movt	r3, #0
    1b08:	e5931010 	ldr	r1, [r3, #16]
    1b0c:	e2811019 	add	r1, r1, #25
    1b10:	e59330b4 	ldr	r3, [r3, #180]	; 0xb4
    1b14:	e1510003 	cmp	r1, r3
    1b18:	ca000005 	bgt	1b34 <mario_update_location+0xd7c>
            mario_x += MARIO_RUN_SPEED;
    1b1c:	e3033e50 	movw	r3, #15952	; 0x3e50
    1b20:	e3403000 	movt	r3, #0
    1b24:	e2822004 	add	r2, r2, #4
    1b28:	e583200c 	str	r2, [r3, #12]
            is_mario_moving_forward = true;
    1b2c:	e3a02001 	mov	r2, #1
    1b30:	e5c32084 	strb	r2, [r3, #132]	; 0x84
        } 
        if (mario_move_backward && (mario_x >= pipe_3_high_x || mario_x < pipe_3_high_x || mario_y + 25 <= pipe_3_y)){
    1b34:	e30e3184 	movw	r3, #57732	; 0xe184
    1b38:	e340301c 	movt	r3, #28
    1b3c:	e5d33012 	ldrb	r3, [r3, #18]
    1b40:	e3530000 	cmp	r3, #0
    1b44:	0a000006 	beq	1b64 <mario_update_location+0xdac>
            mario_x -= MARIO_RUN_SPEED;
    1b48:	e3033e50 	movw	r3, #15952	; 0x3e50
    1b4c:	e3403000 	movt	r3, #0
    1b50:	e593200c 	ldr	r2, [r3, #12]
    1b54:	e2422004 	sub	r2, r2, #4
    1b58:	e583200c 	str	r2, [r3, #12]
            is_mario_moving_forward = false;
    1b5c:	e3a02000 	mov	r2, #0
    1b60:	e5c32084 	strb	r2, [r3, #132]	; 0x84
        }
        if (mario_jump){
    1b64:	e30e3184 	movw	r3, #57732	; 0xe184
    1b68:	e340301c 	movt	r3, #28
    1b6c:	e5d33014 	ldrb	r3, [r3, #20]
    1b70:	e3530000 	cmp	r3, #0
    1b74:	0a000028 	beq	1c1c <mario_update_location+0xe64>
            if (!mario_fall && mario_jumped < MARIO_JUMP_HIGHT && mario_y >= 27){
    1b78:	e30e3184 	movw	r3, #57732	; 0xe184
    1b7c:	e340301c 	movt	r3, #28
    1b80:	e5d33015 	ldrb	r3, [r3, #21]
    1b84:	e3530000 	cmp	r3, #0
    1b88:	1a000012 	bne	1bd8 <mario_update_location+0xe20>
    1b8c:	e30e3184 	movw	r3, #57732	; 0xe184
    1b90:	e340301c 	movt	r3, #28
    1b94:	e5933018 	ldr	r3, [r3, #24]
    1b98:	e353004a 	cmp	r3, #74	; 0x4a
    1b9c:	ca00000d 	bgt	1bd8 <mario_update_location+0xe20>
    1ba0:	e3032e50 	movw	r2, #15952	; 0x3e50
    1ba4:	e3402000 	movt	r2, #0
    1ba8:	e5922010 	ldr	r2, [r2, #16]
    1bac:	e352001a 	cmp	r2, #26
    1bb0:	da000008 	ble	1bd8 <mario_update_location+0xe20>
                mario_y -= MARIO_JUMP_SPEED;
    1bb4:	e3031e50 	movw	r1, #15952	; 0x3e50
    1bb8:	e3401000 	movt	r1, #0
    1bbc:	e2422008 	sub	r2, r2, #8
    1bc0:	e5812010 	str	r2, [r1, #16]
                mario_jumped += MARIO_JUMP_SPEED;
    1bc4:	e30e2184 	movw	r2, #57732	; 0xe184
    1bc8:	e340201c 	movt	r2, #28
    1bcc:	e2833008 	add	r3, r3, #8
    1bd0:	e5823018 	str	r3, [r2, #24]
    1bd4:	ea000005 	b	1bf0 <mario_update_location+0xe38>
            } else{
                mario_fall = true;
    1bd8:	e30e3184 	movw	r3, #57732	; 0xe184
    1bdc:	e340301c 	movt	r3, #28
    1be0:	e3a02001 	mov	r2, #1
    1be4:	e5c32015 	strb	r2, [r3, #21]
                mario_jumped = 0;
    1be8:	e3a02000 	mov	r2, #0
    1bec:	e5832018 	str	r2, [r3, #24]
            }

            if (mario_fall){
    1bf0:	e30e3184 	movw	r3, #57732	; 0xe184
    1bf4:	e340301c 	movt	r3, #28
    1bf8:	e5d33015 	ldrb	r3, [r3, #21]
    1bfc:	e3530000 	cmp	r3, #0
    1c00:	0a000043 	beq	1d14 <mario_update_location+0xf5c>
                beat_mushroom();
    1c04:	ebfffc3c 	bl	cfc <beat_mushroom>
                mario_y += GRAVITY_FALL;
    1c08:	e3033e50 	movw	r3, #15952	; 0x3e50
    1c0c:	e3403000 	movt	r3, #0
    1c10:	e5932010 	ldr	r2, [r3, #16]
    1c14:	e282200a 	add	r2, r2, #10
    1c18:	e5832010 	str	r2, [r3, #16]
            }
        }
        //if not landing, cannot jump again
        if (mario_fall && pipe_3_low_x < mario_x + 20 && mario_x + 5 < pipe_3_high_x){//if on right pipe 
    1c1c:	e30e3184 	movw	r3, #57732	; 0xe184
    1c20:	e340301c 	movt	r3, #28
    1c24:	e5d33015 	ldrb	r3, [r3, #21]
    1c28:	e3530000 	cmp	r3, #0
    1c2c:	0a000038 	beq	1d14 <mario_update_location+0xf5c>
    1c30:	e3033e50 	movw	r3, #15952	; 0x3e50
    1c34:	e3403000 	movt	r3, #0
    1c38:	e593200c 	ldr	r2, [r3, #12]
    1c3c:	e2821014 	add	r1, r2, #20
    1c40:	e59330b0 	ldr	r3, [r3, #176]	; 0xb0
    1c44:	e1510003 	cmp	r1, r3
    1c48:	da000022 	ble	1cd8 <mario_update_location+0xf20>
    1c4c:	e2822005 	add	r2, r2, #5
    1c50:	e3033e50 	movw	r3, #15952	; 0x3e50
    1c54:	e3403000 	movt	r3, #0
    1c58:	e5933078 	ldr	r3, [r3, #120]	; 0x78
    1c5c:	e1520003 	cmp	r2, r3
    1c60:	aa00001c 	bge	1cd8 <mario_update_location+0xf20>
            if (mario_y + 25 >= pipe_3_y){
    1c64:	e3033e50 	movw	r3, #15952	; 0x3e50
    1c68:	e3403000 	movt	r3, #0
    1c6c:	e59320b4 	ldr	r2, [r3, #180]	; 0xb4
    1c70:	e5933010 	ldr	r3, [r3, #16]
    1c74:	e2833019 	add	r3, r3, #25
    1c78:	e1530002 	cmp	r3, r2
    1c7c:	ba000008 	blt	1ca4 <mario_update_location+0xeec>
                mario_y = pipe_3_y - 25;
    1c80:	e3033e50 	movw	r3, #15952	; 0x3e50
    1c84:	e3403000 	movt	r3, #0
    1c88:	e2421019 	sub	r1, r2, #25
    1c8c:	e5831010 	str	r1, [r3, #16]
                mario_jump = false;
    1c90:	e30e3184 	movw	r3, #57732	; 0xe184
    1c94:	e340301c 	movt	r3, #28
    1c98:	e3a01000 	mov	r1, #0
    1c9c:	e5c31014 	strb	r1, [r3, #20]
                mario_fall = false;
    1ca0:	e5c31015 	strb	r1, [r3, #21]
            }
            if (mario_y != pipe_3_y - 25){
    1ca4:	e2422019 	sub	r2, r2, #25
    1ca8:	e3033e50 	movw	r3, #15952	; 0x3e50
    1cac:	e3403000 	movt	r3, #0
    1cb0:	e5933010 	ldr	r3, [r3, #16]
    1cb4:	e1520003 	cmp	r2, r3
    1cb8:	0a000015 	beq	1d14 <mario_update_location+0xf5c>
                mario_jump = true;
    1cbc:	e30e3184 	movw	r3, #57732	; 0xe184
    1cc0:	e340301c 	movt	r3, #28
    1cc4:	e3a02001 	mov	r2, #1
    1cc8:	e5c32014 	strb	r2, [r3, #20]
                mario_fall = true;
    1ccc:	e5c32015 	strb	r2, [r3, #21]
    1cd0:	ea00000f 	b	1d14 <mario_update_location+0xf5c>
    1cd4:	00003e7c 	.word	0x00003e7c
            }
        } else if (mario_fall){
            if (mario_y + 25 >= LOWEST_Y){
    1cd8:	e3033e50 	movw	r3, #15952	; 0x3e50
    1cdc:	e3403000 	movt	r3, #0
    1ce0:	e5933010 	ldr	r3, [r3, #16]
    1ce4:	e2833019 	add	r3, r3, #25
    1ce8:	e35300c9 	cmp	r3, #201	; 0xc9
    1cec:	da000008 	ble	1d14 <mario_update_location+0xf5c>
                mario_y = LOWEST_Y - 25;
    1cf0:	e3033e50 	movw	r3, #15952	; 0x3e50
    1cf4:	e3403000 	movt	r3, #0
    1cf8:	e3a020b1 	mov	r2, #177	; 0xb1
    1cfc:	e5832010 	str	r2, [r3, #16]
                mario_jump = false;
    1d00:	e30e3184 	movw	r3, #57732	; 0xe184
    1d04:	e340301c 	movt	r3, #28
    1d08:	e3a02000 	mov	r2, #0
    1d0c:	e5c32014 	strb	r2, [r3, #20]
                mario_fall = false;
    1d10:	e5c32015 	strb	r2, [r3, #21]
            }
        }
        mario_move_backward = false;
    1d14:	e30e3184 	movw	r3, #57732	; 0xe184
    1d18:	e340301c 	movt	r3, #28
    1d1c:	e3a02000 	mov	r2, #0
    1d20:	e5c32012 	strb	r2, [r3, #18]
        mario_move_forward = false;
    1d24:	e5c32013 	strb	r2, [r3, #19]

        //gravitational falling of Mario
        if (!mario_jump && (mario_x + 20 < pipe_3_low_x || mario_x + 5 > pipe_3_high_x) 
    1d28:	e5d33014 	ldrb	r3, [r3, #20]
    1d2c:	e1530002 	cmp	r3, r2
    1d30:	1a000016 	bne	1d90 <mario_update_location+0xfd8>
    1d34:	e3033e50 	movw	r3, #15952	; 0x3e50
    1d38:	e3403000 	movt	r3, #0
    1d3c:	e593200c 	ldr	r2, [r3, #12]
    1d40:	e2821014 	add	r1, r2, #20
    1d44:	e59330b0 	ldr	r3, [r3, #176]	; 0xb0
    1d48:	e1510003 	cmp	r1, r3
    1d4c:	ba000005 	blt	1d68 <mario_update_location+0xfb0>
    1d50:	e2822005 	add	r2, r2, #5
    1d54:	e3033e50 	movw	r3, #15952	; 0x3e50
    1d58:	e3403000 	movt	r3, #0
    1d5c:	e5933078 	ldr	r3, [r3, #120]	; 0x78
    1d60:	e1520003 	cmp	r2, r3
    1d64:	da000009 	ble	1d90 <mario_update_location+0xfd8>
                        && mario_y + 25 < LOWEST_Y){
    1d68:	e3033e50 	movw	r3, #15952	; 0x3e50
    1d6c:	e3403000 	movt	r3, #0
    1d70:	e5933010 	ldr	r3, [r3, #16]
    1d74:	e2833019 	add	r3, r3, #25
    1d78:	e35300c9 	cmp	r3, #201	; 0xc9
            mario_fall = true;
    1d7c:	d30e3184 	movwle	r3, #57732	; 0xe184
    1d80:	d340301c 	movtle	r3, #28
    1d84:	d3a02001 	movle	r2, #1
    1d88:	d5c32015 	strble	r2, [r3, #21]
            mario_jump = true;
    1d8c:	d5c32014 	strble	r2, [r3, #20]
        } 
    }
    
    if (!isGameOver && !isWin){
    1d90:	e30e3184 	movw	r3, #57732	; 0xe184
    1d94:	e340301c 	movt	r3, #28
    1d98:	e5d33011 	ldrb	r3, [r3, #17]
    1d9c:	e3530000 	cmp	r3, #0
    1da0:	1a00007a 	bne	1f90 <mario_update_location+0x11d8>
    1da4:	e30e3184 	movw	r3, #57732	; 0xe184
    1da8:	e340301c 	movt	r3, #28
    1dac:	e5d33010 	ldrb	r3, [r3, #16]
    1db0:	e3530000 	cmp	r3, #0
    1db4:	1a000075 	bne	1f90 <mario_update_location+0x11d8>
        //whether Mario picks moneys
        for (int i = 0; i < 3; i++)
        {
            if (mario_x + MARIO_MID >= money_x[i] && mario_x + MARIO_MID <= money_x[i] + 16 && money_y[i] + 19 >= mario_y && mario_y + 25 >= money_y[i]){
    1db8:	e3034e50 	movw	r4, #15952	; 0x3e50
    1dbc:	e3404000 	movt	r4, #0
    1dc0:	e594000c 	ldr	r0, [r4, #12]
    1dc4:	eb000531 	bl	3290 <__aeabi_i2d>
    1dc8:	e3a02000 	mov	r2, #0
    1dcc:	e3a03000 	mov	r3, #0
    1dd0:	e3443029 	movt	r3, #16425	; 0x4029
    1dd4:	eb000460 	bl	2f5c <__adddf3>
    1dd8:	e1a0a000 	mov	r10, r0
    1ddc:	e1a0b001 	mov	r11, r1
    1de0:	e5944010 	ldr	r4, [r4, #16]
    1de4:	e58d4000 	str	r4, [sp]
    1de8:	e2841019 	add	r1, r4, #25
    1dec:	e58d1004 	str	r1, [sp, #4]
    1df0:	e30e3184 	movw	r3, #57732	; 0xe184
    1df4:	e340301c 	movt	r3, #28
    1df8:	e5939000 	ldr	r9, [r3]
    1dfc:	e3a04000 	mov	r4, #0
    1e00:	e1a06004 	mov	r6, r4
    1e04:	e3037e50 	movw	r7, #15952	; 0x3e50
    1e08:	e3407000 	movt	r7, #0
                isMoney[i] = false;
    1e0c:	e1a08003 	mov	r8, r3
    
    if (!isGameOver && !isWin){
        //whether Mario picks moneys
        for (int i = 0; i < 3; i++)
        {
            if (mario_x + MARIO_MID >= money_x[i] && mario_x + MARIO_MID <= money_x[i] + 16 && money_y[i] + 19 >= mario_y && mario_y + 25 >= money_y[i]){
    1e10:	e2873030 	add	r3, r7, #48	; 0x30
    1e14:	e7945003 	ldr	r5, [r4, r3]
    1e18:	e1a00005 	mov	r0, r5
    1e1c:	eb00051b 	bl	3290 <__aeabi_i2d>
    1e20:	e1a02000 	mov	r2, r0
    1e24:	e1a03001 	mov	r3, r1
    1e28:	e1a0000a 	mov	r0, r10
    1e2c:	e1a0100b 	mov	r1, r11
    1e30:	eb0006b9 	bl	391c <__aeabi_dcmpge>
    1e34:	e3500000 	cmp	r0, #0
    1e38:	0a00001a 	beq	1ea8 <mario_update_location+0x10f0>
    1e3c:	e2850010 	add	r0, r5, #16
    1e40:	eb000512 	bl	3290 <__aeabi_i2d>
    1e44:	e1a02000 	mov	r2, r0
    1e48:	e1a03001 	mov	r3, r1
    1e4c:	e1a0000a 	mov	r0, r10
    1e50:	e1a0100b 	mov	r1, r11
    1e54:	eb0006aa 	bl	3904 <__aeabi_dcmple>
    1e58:	e3500000 	cmp	r0, #0
    1e5c:	0a000011 	beq	1ea8 <mario_update_location+0x10f0>
    1e60:	e287303c 	add	r3, r7, #60	; 0x3c
    1e64:	e7943003 	ldr	r3, [r4, r3]
    1e68:	e2832013 	add	r2, r3, #19
    1e6c:	e59d1000 	ldr	r1, [sp]
    1e70:	e1520001 	cmp	r2, r1
    1e74:	ba00000b 	blt	1ea8 <mario_update_location+0x10f0>
    1e78:	e59d2004 	ldr	r2, [sp, #4]
    1e7c:	e1530002 	cmp	r3, r2
    1e80:	ca000008 	bgt	1ea8 <mario_update_location+0x10f0>
                isMoney[i] = false;
    1e84:	e2883008 	add	r3, r8, #8
    1e88:	e3a01000 	mov	r1, #0
    1e8c:	e7c61003 	strb	r1, [r6, r3]
                money_x[i] = OUT_SCREEN;
    1e90:	e2873030 	add	r3, r7, #48	; 0x30
    1e94:	e3e02031 	mvn	r2, #49	; 0x31
    1e98:	e7842003 	str	r2, [r4, r3]
                money_y[i] = OUT_SCREEN;
    1e9c:	e287303c 	add	r3, r7, #60	; 0x3c
    1ea0:	e7842003 	str	r2, [r4, r3]
                score++;
    1ea4:	e2899001 	add	r9, r9, #1
        } 
    }
    
    if (!isGameOver && !isWin){
        //whether Mario picks moneys
        for (int i = 0; i < 3; i++)
    1ea8:	e2866001 	add	r6, r6, #1
    1eac:	e2844004 	add	r4, r4, #4
    1eb0:	e354000c 	cmp	r4, #12
    1eb4:	1affffd5 	bne	1e10 <mario_update_location+0x1058>
    1eb8:	e30e3184 	movw	r3, #57732	; 0xe184
    1ebc:	e340301c 	movt	r3, #28
    1ec0:	e5839000 	str	r9, [r3]
                money_y[i] = OUT_SCREEN;
                score++;
            }
        }
        //whether Mario picks Good Mushroom
        if (mario_x + MARIO_MID >= goodMushroom_x && mario_x + MARIO_MID <= goodMushroom_x + 19 && goodMushroom_y + 19 >= mario_y && mario_y + 25 >= goodMushroom_y){
    1ec4:	e3036e50 	movw	r6, #15952	; 0x3e50
    1ec8:	e3406000 	movt	r6, #0
    1ecc:	e596000c 	ldr	r0, [r6, #12]
    1ed0:	eb0004ee 	bl	3290 <__aeabi_i2d>
    1ed4:	e3a02000 	mov	r2, #0
    1ed8:	e3a03000 	mov	r3, #0
    1edc:	e3443029 	movt	r3, #16425	; 0x4029
    1ee0:	eb00041d 	bl	2f5c <__adddf3>
    1ee4:	e1a04000 	mov	r4, r0
    1ee8:	e1a05001 	mov	r5, r1
    1eec:	e5966048 	ldr	r6, [r6, #72]	; 0x48
    1ef0:	e1a00006 	mov	r0, r6
    1ef4:	eb0004e5 	bl	3290 <__aeabi_i2d>
    1ef8:	e1a02000 	mov	r2, r0
    1efc:	e1a03001 	mov	r3, r1
    1f00:	e1a00004 	mov	r0, r4
    1f04:	e1a01005 	mov	r1, r5
    1f08:	eb000683 	bl	391c <__aeabi_dcmpge>
    1f0c:	e3500000 	cmp	r0, #0
    1f10:	0a00001e 	beq	1f90 <mario_update_location+0x11d8>
    1f14:	e2860013 	add	r0, r6, #19
    1f18:	eb0004dc 	bl	3290 <__aeabi_i2d>
    1f1c:	e1a02000 	mov	r2, r0
    1f20:	e1a03001 	mov	r3, r1
    1f24:	e1a00004 	mov	r0, r4
    1f28:	e1a01005 	mov	r1, r5
    1f2c:	eb000674 	bl	3904 <__aeabi_dcmple>
    1f30:	e3500000 	cmp	r0, #0
    1f34:	0a000015 	beq	1f90 <mario_update_location+0x11d8>
    1f38:	e3033e50 	movw	r3, #15952	; 0x3e50
    1f3c:	e3403000 	movt	r3, #0
    1f40:	e593204c 	ldr	r2, [r3, #76]	; 0x4c
    1f44:	e5933010 	ldr	r3, [r3, #16]
    1f48:	e2821013 	add	r1, r2, #19
    1f4c:	e1510003 	cmp	r1, r3
    1f50:	ba00000e 	blt	1f90 <mario_update_location+0x11d8>
    1f54:	e2833019 	add	r3, r3, #25
    1f58:	e1520003 	cmp	r2, r3
    1f5c:	ca00000b 	bgt	1f90 <mario_update_location+0x11d8>
            isGoodMushroom = false;
    1f60:	e30e3184 	movw	r3, #57732	; 0xe184
    1f64:	e340301c 	movt	r3, #28
    1f68:	e3a02000 	mov	r2, #0
    1f6c:	e5c3200b 	strb	r2, [r3, #11]
            goodMushroom_x = OUT_SCREEN;
    1f70:	e3033e50 	movw	r3, #15952	; 0x3e50
    1f74:	e3403000 	movt	r3, #0
    1f78:	e3e02031 	mvn	r2, #49	; 0x31
    1f7c:	e5832048 	str	r2, [r3, #72]	; 0x48
            goodMushroom_y = OUT_SCREEN;
    1f80:	e583204c 	str	r2, [r3, #76]	; 0x4c
            lives++;
    1f84:	e5932004 	ldr	r2, [r3, #4]
    1f88:	e2822001 	add	r2, r2, #1
    1f8c:	e5832004 	str	r2, [r3, #4]
        }
    }
    

    //whether Mario go to next map
    if (map_num != 3 && mario_x + MARIO_MID >= SCREEN_WIDTH){
    1f90:	e3033e50 	movw	r3, #15952	; 0x3e50
    1f94:	e3403000 	movt	r3, #0
    1f98:	e5934000 	ldr	r4, [r3]
    1f9c:	e3540003 	cmp	r4, #3
    1fa0:	0a000013 	beq	1ff4 <mario_update_location+0x123c>
    1fa4:	e3033e50 	movw	r3, #15952	; 0x3e50
    1fa8:	e3403000 	movt	r3, #0
    1fac:	e593000c 	ldr	r0, [r3, #12]
    1fb0:	eb0004b6 	bl	3290 <__aeabi_i2d>
    1fb4:	e3a02000 	mov	r2, #0
    1fb8:	e3a03000 	mov	r3, #0
    1fbc:	e3443029 	movt	r3, #16425	; 0x4029
    1fc0:	eb0003e5 	bl	2f5c <__adddf3>
    1fc4:	e3a02000 	mov	r2, #0
    1fc8:	e3a03000 	mov	r3, #0
    1fcc:	e3443074 	movt	r3, #16500	; 0x4074
    1fd0:	eb000651 	bl	391c <__aeabi_dcmpge>
    1fd4:	e3500000 	cmp	r0, #0
    1fd8:	0a000016 	beq	2038 <mario_update_location+0x1280>
        map_num++;
    1fdc:	e3033e50 	movw	r3, #15952	; 0x3e50
    1fe0:	e3403000 	movt	r3, #0
    1fe4:	e2844001 	add	r4, r4, #1
    1fe8:	e5834000 	str	r4, [r3]
        reset_characters();       
    1fec:	ebfff9ca 	bl	71c <reset_characters>
    1ff0:	ea000010 	b	2038 <mario_update_location+0x1280>
    } else if (map_num == 3 && mario_x + MARIO_MID >= ENDING){
    1ff4:	e3033e50 	movw	r3, #15952	; 0x3e50
    1ff8:	e3403000 	movt	r3, #0
    1ffc:	e593000c 	ldr	r0, [r3, #12]
    2000:	eb0004a2 	bl	3290 <__aeabi_i2d>
    2004:	e3a02000 	mov	r2, #0
    2008:	e3a03000 	mov	r3, #0
    200c:	e3443029 	movt	r3, #16425	; 0x4029
    2010:	eb0003d1 	bl	2f5c <__adddf3>
    2014:	e3a02000 	mov	r2, #0
    2018:	e3a03903 	mov	r3, #49152	; 0xc000
    201c:	e344306f 	movt	r3, #16495	; 0x406f
    2020:	eb00063d 	bl	391c <__aeabi_dcmpge>
    2024:	e3500000 	cmp	r0, #0
        isWin = true;
    2028:	130e3184 	movwne	r3, #57732	; 0xe184
    202c:	1340301c 	movtne	r3, #28
    2030:	13a02001 	movne	r2, #1
    2034:	15c32010 	strbne	r2, [r3, #16]
    }
}
    2038:	e28dd00c 	add	sp, sp, #12
    203c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

00002040 <update_location>:
        pixel_buffer_start = *(pixel_ctrl_ptr + 1); // new back buffer
    }
}

//update locations for all characters
void update_location(){
    2040:	e92d4008 	push	{r3, lr}
    mario_update_location();
    2044:	ebfffb5b 	bl	db8 <mario_update_location>
    bad_mushroom_update_location();
    2048:	ebfffa71 	bl	a14 <bad_mushroom_update_location>
    turtle_update_location();
    204c:	ebfff9ee 	bl	80c <turtle_update_location>
    //check whether the game is over
    if (lives <= 0){
    2050:	e3033e50 	movw	r3, #15952	; 0x3e50
    2054:	e3403000 	movt	r3, #0
    2058:	e5933004 	ldr	r3, [r3, #4]
    205c:	e3530000 	cmp	r3, #0
        isGameOver = true;
    2060:	d30e3184 	movwle	r3, #57732	; 0xe184
    2064:	d340301c 	movtle	r3, #28
    2068:	d3a02001 	movle	r2, #1
    206c:	d5c32011 	strble	r2, [r3, #17]
    2070:	e8bd8008 	pop	{r3, pc}

00002074 <plot_pixel>:
}

// code for subroutines (not shown)
void plot_pixel(int x, int y, short int line_color)
{
    *(short int *)(pixel_buffer_start + (y << 10) + (x << 1)) = line_color;
    2074:	e30e3184 	movw	r3, #57732	; 0xe184
    2078:	e340301c 	movt	r3, #28
    207c:	e593301c 	ldr	r3, [r3, #28]
    2080:	e1a00080 	lsl	r0, r0, #1
    2084:	e0831501 	add	r1, r3, r1, lsl #10
    2088:	e18120b0 	strh	r2, [r1, r0]
    208c:	e12fff1e 	bx	lr

00002090 <draw_image>:
    }
}

//helper function to draw any image
//x,y as the coordinate of right top conor
void draw_image(int x, int y, int color[], int width, int height){
    2090:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    2094:	e24dd014 	sub	sp, sp, #20
    2098:	e58d100c 	str	r1, [sp, #12]
    for (int i = 0; i < width; i++)
    209c:	e3530000 	cmp	r3, #0
    20a0:	e58d3008 	str	r3, [sp, #8]
    20a4:	da00002b 	ble	2158 <draw_image+0xc8>
    20a8:	e1a06000 	mov	r6, r0
    20ac:	e1a07002 	mov	r7, r2
    }
}

//helper function to draw any image
//x,y as the coordinate of right top conor
void draw_image(int x, int y, int color[], int width, int height){
    20b0:	e1a09103 	lsl	r9, r3, #2
    for (int i = 0; i < width; i++)
    20b4:	e3a01000 	mov	r1, #0
    20b8:	e58d1004 	str	r1, [sp, #4]
    }
}

//helper function to draw any image
//x,y as the coordinate of right top conor
void draw_image(int x, int y, int color[], int width, int height){
    20bc:	e59d200c 	ldr	r2, [sp, #12]
    20c0:	e59d3038 	ldr	r3, [sp, #56]	; 0x38
    20c4:	e082a003 	add	r10, r2, r3
            //location of the image drew on the screen
            int plot_x = x + i;
            int plot_y = y + j;

            //filter the transparent color and do not draw when out of screen
            if (color[j * width + i] == 0xf81f || plot_x >= SCREEN_WIDTH || plot_y >= SCREEN_HEIGHT || plot_x < 0 || plot_y < 0){
    20c8:	e30f881f 	movw	r8, #63519	; 0xf81f
    20cc:	e300b13f 	movw	r11, #319	; 0x13f
    20d0:	ea000018 	b	2138 <draw_image+0xa8>
    20d4:	e7972005 	ldr	r2, [r7, r5]
    20d8:	e1520008 	cmp	r2, r8
    20dc:	0a000009 	beq	2108 <draw_image+0x78>
    for (int i = 0; i < width; i++)
    {
        for (int j = 0; j < height; j++)
        {
            //location of the image drew on the screen
            int plot_x = x + i;
    20e0:	e1a00006 	mov	r0, r6
            int plot_y = y + j;
    20e4:	e1a01004 	mov	r1, r4

            //filter the transparent color and do not draw when out of screen
            if (color[j * width + i] == 0xf81f || plot_x >= SCREEN_WIDTH || plot_y >= SCREEN_HEIGHT || plot_x < 0 || plot_y < 0){
    20e8:	e156000b 	cmp	r6, r11
    20ec:	d35400ef 	cmple	r4, #239	; 0xef
    20f0:	ca000004 	bgt	2108 <draw_image+0x78>
    20f4:	e59d3000 	ldr	r3, [sp]
    20f8:	e1933fa4 	orrs	r3, r3, r4, lsr #31
    20fc:	1a000001 	bne	2108 <draw_image+0x78>
                continue;
            }

            plot_pixel(plot_x, plot_y, color[j * width + i]);
    2100:	e6bf2072 	sxth	r2, r2
    2104:	ebffffda 	bl	2074 <plot_pixel>
    2108:	e0855009 	add	r5, r5, r9
    210c:	e2844001 	add	r4, r4, #1
//helper function to draw any image
//x,y as the coordinate of right top conor
void draw_image(int x, int y, int color[], int width, int height){
    for (int i = 0; i < width; i++)
    {
        for (int j = 0; j < height; j++)
    2110:	e154000a 	cmp	r4, r10
    2114:	1affffee 	bne	20d4 <draw_image+0x44>
}

//helper function to draw any image
//x,y as the coordinate of right top conor
void draw_image(int x, int y, int color[], int width, int height){
    for (int i = 0; i < width; i++)
    2118:	e59d1004 	ldr	r1, [sp, #4]
    211c:	e2811001 	add	r1, r1, #1
    2120:	e58d1004 	str	r1, [sp, #4]
    2124:	e2866001 	add	r6, r6, #1
    2128:	e2877004 	add	r7, r7, #4
    212c:	e59d2008 	ldr	r2, [sp, #8]
    2130:	e1510002 	cmp	r1, r2
    2134:	0a000007 	beq	2158 <draw_image+0xc8>
    {
        for (int j = 0; j < height; j++)
    2138:	e59d3038 	ldr	r3, [sp, #56]	; 0x38
    213c:	e3530000 	cmp	r3, #0
    2140:	dafffff4 	ble	2118 <draw_image+0x88>
    2144:	e59d400c 	ldr	r4, [sp, #12]
    }
}

//helper function to draw any image
//x,y as the coordinate of right top conor
void draw_image(int x, int y, int color[], int width, int height){
    2148:	e3a05000 	mov	r5, #0
            //location of the image drew on the screen
            int plot_x = x + i;
            int plot_y = y + j;

            //filter the transparent color and do not draw when out of screen
            if (color[j * width + i] == 0xf81f || plot_x >= SCREEN_WIDTH || plot_y >= SCREEN_HEIGHT || plot_x < 0 || plot_y < 0){
    214c:	e1a01fa6 	lsr	r1, r6, #31
    2150:	e58d1000 	str	r1, [sp]
    2154:	eaffffde 	b	20d4 <draw_image+0x44>
            plot_pixel(plot_x, plot_y, color[j * width + i]);
        }
        
    }
    
}
    2158:	e28dd014 	add	sp, sp, #20
    215c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

00002160 <draw_background>:
    }
    return;
}

//helper function to draw any background
void draw_background(){
    2160:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    2164:	e24dd00c 	sub	sp, sp, #12
    for (int x = 0; x < SCREEN_WIDTH; ++x)
    2168:	e3a02000 	mov	r2, #0
    216c:	e58d2004 	str	r2, [sp, #4]
    }
    return;
}

//helper function to draw any background
void draw_background(){
    2170:	e303be50 	movw	r11, #15952	; 0x3e50
    2174:	e340b000 	movt	r11, #0
    2178:	ea00003f 	b	227c <draw_background+0x11c>
    for (int x = 0; x < SCREEN_WIDTH; ++x)
    {
        for (int y = 0; y <= SCREEN_HEIGHT; ++y)
        {
            if (isFirstTime){
    217c:	e5db305c 	ldrb	r3, [r11, #92]	; 0x5c
    2180:	e3530000 	cmp	r3, #0
    2184:	0a000004 	beq	219c <draw_background+0x3c>
                plot_pixel(x, y, open[y * SCREEN_WIDTH + x]);
    2188:	e59d0004 	ldr	r0, [sp, #4]
    218c:	e1a01004 	mov	r1, r4
    2190:	e1d520f0 	ldrsh	r2, [r5]
    2194:	ebffffb6 	bl	2074 <plot_pixel>
    2198:	ea000029 	b	2244 <draw_background+0xe4>
            } else if (isGameOver){ //check whether the game is over
    219c:	e59d2000 	ldr	r2, [sp]
    21a0:	e5d23011 	ldrb	r3, [r2, #17]
    21a4:	e3530000 	cmp	r3, #0
    21a8:	0a000004 	beq	21c0 <draw_background+0x60>
                plot_pixel(x, y, game_over[y * SCREEN_WIDTH + x]);
    21ac:	e59d0004 	ldr	r0, [sp, #4]
    21b0:	e1a01004 	mov	r1, r4
    21b4:	e1d620f0 	ldrsh	r2, [r6]
    21b8:	ebffffad 	bl	2074 <plot_pixel>
    21bc:	ea000020 	b	2244 <draw_background+0xe4>
            } else if (isWin){
    21c0:	e59d2000 	ldr	r2, [sp]
    21c4:	e5d23010 	ldrb	r3, [r2, #16]
    21c8:	e3530000 	cmp	r3, #0
    21cc:	0a000004 	beq	21e4 <draw_background+0x84>
                plot_pixel(x, y, win[y * SCREEN_WIDTH + x]);
    21d0:	e59d0004 	ldr	r0, [sp, #4]
    21d4:	e1a01004 	mov	r1, r4
    21d8:	e1d720f0 	ldrsh	r2, [r7]
    21dc:	ebffffa4 	bl	2074 <plot_pixel>
    21e0:	ea000017 	b	2244 <draw_background+0xe4>
            } else{    
                if (map_num != 1 && y >= 203){ //to speed up drawing
    21e4:	e59b3000 	ldr	r3, [r11]
    21e8:	e3530001 	cmp	r3, #1
    21ec:	0a000002 	beq	21fc <draw_background+0x9c>
    21f0:	e35400ca 	cmp	r4, #202	; 0xca
    21f4:	da000005 	ble	2210 <draw_background+0xb0>
    21f8:	ea00001a 	b	2268 <draw_background+0x108>
                    break;
                }           
                if (map_num == 1)
                    plot_pixel(x, y, background[y * SCREEN_WIDTH + x]);
    21fc:	e59d0004 	ldr	r0, [sp, #4]
    2200:	e1a01004 	mov	r1, r4
    2204:	e1da20f0 	ldrsh	r2, [r10]
    2208:	ebffff99 	bl	2074 <plot_pixel>
    220c:	ea00000c 	b	2244 <draw_background+0xe4>
                else if (map_num == 2)
    2210:	e3530002 	cmp	r3, #2
    2214:	1a000004 	bne	222c <draw_background+0xcc>
                    plot_pixel(x, y, background2[y * SCREEN_WIDTH + x]);
    2218:	e59d0004 	ldr	r0, [sp, #4]
    221c:	e1a01004 	mov	r1, r4
    2220:	e1d920f0 	ldrsh	r2, [r9]
    2224:	ebffff92 	bl	2074 <plot_pixel>
    2228:	ea000005 	b	2244 <draw_background+0xe4>
                else if (map_num == 3)
    222c:	e3530003 	cmp	r3, #3
                    plot_pixel(x, y, end[y * SCREEN_WIDTH + x]);
    2230:	e59d0004 	ldr	r0, [sp, #4]
    2234:	e1a01004 	mov	r1, r4
    2238:	01d820f0 	ldrsheq	r2, [r8]
                else
                    plot_pixel(x, y, 0);
    223c:	13a02000 	movne	r2, #0
    2240:	ebffff8b 	bl	2074 <plot_pixel>

//helper function to draw any background
void draw_background(){
    for (int x = 0; x < SCREEN_WIDTH; ++x)
    {
        for (int y = 0; y <= SCREEN_HEIGHT; ++y)
    2244:	e2844001 	add	r4, r4, #1
    2248:	e2855c05 	add	r5, r5, #1280	; 0x500
    224c:	e2866c05 	add	r6, r6, #1280	; 0x500
    2250:	e2877c05 	add	r7, r7, #1280	; 0x500
    2254:	e28aac05 	add	r10, r10, #1280	; 0x500
    2258:	e2899c05 	add	r9, r9, #1280	; 0x500
    225c:	e2888c05 	add	r8, r8, #1280	; 0x500
    2260:	e35400f1 	cmp	r4, #241	; 0xf1
    2264:	1affffc4 	bne	217c <draw_background+0x1c>
    return;
}

//helper function to draw any background
void draw_background(){
    for (int x = 0; x < SCREEN_WIDTH; ++x)
    2268:	e59d3004 	ldr	r3, [sp, #4]
    226c:	e2833001 	add	r3, r3, #1
    2270:	e58d3004 	str	r3, [sp, #4]
    2274:	e3530d05 	cmp	r3, #320	; 0x140
    2278:	0a000012 	beq	22c8 <draw_background+0x168>
    }
    return;
}

//helper function to draw any background
void draw_background(){
    227c:	e59d2004 	ldr	r2, [sp, #4]
    2280:	e1a08102 	lsl	r8, r2, #2
    2284:	e59f3044 	ldr	r3, [pc, #68]	; 22d0 <draw_background+0x170>
    2288:	e0835008 	add	r5, r3, r8
    228c:	e59f2040 	ldr	r2, [pc, #64]	; 22d4 <draw_background+0x174>
    2290:	e0826008 	add	r6, r2, r8
    2294:	e59f303c 	ldr	r3, [pc, #60]	; 22d8 <draw_background+0x178>
    2298:	e0837008 	add	r7, r3, r8
    229c:	e59f2038 	ldr	r2, [pc, #56]	; 22dc <draw_background+0x17c>
    22a0:	e082a008 	add	r10, r2, r8
    22a4:	e59f3034 	ldr	r3, [pc, #52]	; 22e0 <draw_background+0x180>
    22a8:	e0839008 	add	r9, r3, r8
    22ac:	e59f2030 	ldr	r2, [pc, #48]	; 22e4 <draw_background+0x184>
    22b0:	e0828008 	add	r8, r2, r8
    22b4:	e3a04000 	mov	r4, #0
    {
        for (int y = 0; y <= SCREEN_HEIGHT; ++y)
        {
            if (isFirstTime){
                plot_pixel(x, y, open[y * SCREEN_WIDTH + x]);
            } else if (isGameOver){ //check whether the game is over
    22b8:	e30e3184 	movw	r3, #57732	; 0xe184
    22bc:	e340301c 	movt	r3, #28
    22c0:	e58d3000 	str	r3, [sp]
    22c4:	eaffffac 	b	217c <draw_background+0x1c>
                    plot_pixel(x, y, 0);
            }
            
        }
    }
}
    22c8:	e28dd00c 	add	sp, sp, #12
    22cc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
    22d0:	00003f08 	.word	0x00003f08
    22d4:	0004ef08 	.word	0x0004ef08
    22d8:	00099f08 	.word	0x00099f08
    22dc:	000e4f08 	.word	0x000e4f08
    22e0:	0012ff08 	.word	0x0012ff08
    22e4:	0017af08 	.word	0x0017af08

000022e8 <plot_digit>:
{
    *(short int *)(pixel_buffer_start + (y << 10) + (x << 1)) = line_color;
}

void plot_digit(int x, int y, int ascii){
    *(short int *)(character_buffer_start + (y << 7) + x) = ascii;
    22e8:	e30e3184 	movw	r3, #57732	; 0xe184
    22ec:	e340301c 	movt	r3, #28
    22f0:	e5933020 	ldr	r3, [r3, #32]
    22f4:	e0801381 	add	r1, r0, r1, lsl #7
    22f8:	e18120b3 	strh	r2, [r1, r3]
    22fc:	e12fff1e 	bx	lr

00002300 <clear_screen>:
}

//function to clear whole screen
void clear_screen(){
    2300:	e92d4070 	push	{r4, r5, r6, lr}
    //set color for every pixel to black
    for (int x = 0; x <= 319; ++x){
    2304:	e3a05000 	mov	r5, #0
void plot_digit(int x, int y, int ascii){
    *(short int *)(character_buffer_start + (y << 7) + x) = ascii;
}

//function to clear whole screen
void clear_screen(){
    2308:	e1a06005 	mov	r6, r5
    230c:	ea000009 	b	2338 <clear_screen+0x38>
    //set color for every pixel to black
    for (int x = 0; x <= 319; ++x){
        for (int y = 0; y <= 239; ++y){
            plot_pixel(x, y, 0x0);
    2310:	e1a00005 	mov	r0, r5
    2314:	e1a01004 	mov	r1, r4
    2318:	e1a02006 	mov	r2, r6
    231c:	ebffff54 	bl	2074 <plot_pixel>

//function to clear whole screen
void clear_screen(){
    //set color for every pixel to black
    for (int x = 0; x <= 319; ++x){
        for (int y = 0; y <= 239; ++y){
    2320:	e2844001 	add	r4, r4, #1
    2324:	e35400f0 	cmp	r4, #240	; 0xf0
    2328:	1afffff8 	bne	2310 <clear_screen+0x10>
}

//function to clear whole screen
void clear_screen(){
    //set color for every pixel to black
    for (int x = 0; x <= 319; ++x){
    232c:	e2855001 	add	r5, r5, #1
    2330:	e3550d05 	cmp	r5, #320	; 0x140
    2334:	08bd8070 	popeq	{r4, r5, r6, pc}
void plot_digit(int x, int y, int ascii){
    *(short int *)(character_buffer_start + (y << 7) + x) = ascii;
}

//function to clear whole screen
void clear_screen(){
    2338:	e1a04006 	mov	r4, r6
    233c:	eafffff3 	b	2310 <clear_screen+0x10>

00002340 <swap>:
    }
}

//function to swap two values
void swap(int* a, int* b){
    int temp = *a;
    2340:	e5903000 	ldr	r3, [r0]
    *a = *b;
    2344:	e5912000 	ldr	r2, [r1]
    2348:	e5802000 	str	r2, [r0]
    *b = temp;
    234c:	e5813000 	str	r3, [r1]
    2350:	e12fff1e 	bx	lr

00002354 <draw_line>:
        }
    }
}

//function to draw a line
void draw_line(int x0, int y0, int x1, int y1, short int line_color){
    2354:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    2358:	e24dd01c 	sub	sp, sp, #28
    235c:	e58d0014 	str	r0, [sp, #20]
    2360:	e58d1010 	str	r1, [sp, #16]
    2364:	e58d200c 	str	r2, [sp, #12]
    2368:	e58d3008 	str	r3, [sp, #8]
    236c:	e1dda4f0 	ldrsh	r10, [sp, #64]	; 0x40
    bool isSteep = abs(y1 - y0) > abs(x1 - x0);
    2370:	e0613003 	rsb	r3, r1, r3
    2374:	e3530000 	cmp	r3, #0
    2378:	b2633000 	rsblt	r3, r3, #0
    237c:	e0602002 	rsb	r2, r0, r2
    2380:	e0228fc2 	eor	r8, r2, r2, asr #31
    2384:	e0488fc2 	sub	r8, r8, r2, asr #31
    2388:	e1530008 	cmp	r3, r8
    238c:	d3a08000 	movle	r8, #0
    2390:	c3a08001 	movgt	r8, #1
    if (isSteep){
    2394:	e3580000 	cmp	r8, #0
    2398:	0a000005 	beq	23b4 <draw_line+0x60>
        swap(&x0, &y0);
    239c:	e28d0014 	add	r0, sp, #20
    23a0:	e28d1010 	add	r1, sp, #16
    23a4:	ebffffe5 	bl	2340 <swap>
        swap(&x1, &y1);
    23a8:	e28d000c 	add	r0, sp, #12
    23ac:	e28d1008 	add	r1, sp, #8
    23b0:	ebffffe2 	bl	2340 <swap>
    }
    if (x0 > x1){
    23b4:	e59d300c 	ldr	r3, [sp, #12]
    23b8:	e59d2014 	ldr	r2, [sp, #20]
    23bc:	e1520003 	cmp	r2, r3
    23c0:	da000005 	ble	23dc <draw_line+0x88>
        swap(&x0, &x1);
    23c4:	e28d0014 	add	r0, sp, #20
    23c8:	e28d100c 	add	r1, sp, #12
    23cc:	ebffffdb 	bl	2340 <swap>
        swap(&y0, &y1);
    23d0:	e28d0010 	add	r0, sp, #16
    23d4:	e28d1008 	add	r1, sp, #8
    23d8:	ebffffd8 	bl	2340 <swap>
    }

    int deltax = x1 - x0;
    23dc:	e59d300c 	ldr	r3, [sp, #12]
    23e0:	e58d3004 	str	r3, [sp, #4]
    23e4:	e59d5014 	ldr	r5, [sp, #20]
    23e8:	e0659003 	rsb	r9, r5, r3
    int deltay = abs(y1 - y0);
    23ec:	e59db008 	ldr	r11, [sp, #8]
    23f0:	e59d6010 	ldr	r6, [sp, #16]
    23f4:	e066700b 	rsb	r7, r6, r11
    23f8:	e3570000 	cmp	r7, #0
    23fc:	b2677000 	rsblt	r7, r7, #0
    int error = -1 * (deltax * 0.5);
    2400:	e1a00009 	mov	r0, r9
    2404:	eb0003a1 	bl	3290 <__aeabi_i2d>
    2408:	e3a02000 	mov	r2, #0
    240c:	e3a03000 	mov	r3, #0
    2410:	e3433fe0 	movt	r3, #16352	; 0x3fe0
    2414:	eb0003d4 	bl	336c <__aeabi_dmul>
    2418:	e2813102 	add	r3, r1, #-2147483648	; 0x80000000
    241c:	e1a01003 	mov	r1, r3
    2420:	eb000549 	bl	394c <__aeabi_d2iz>
    2424:	e1a04000 	mov	r4, r0
    int y = y0;
    int y_step;
    if (y0 < y1){
        y_step = 1;
    2428:	e15b0006 	cmp	r11, r6
    242c:	d3e0b000 	mvnle	r11, #0
    2430:	c3a0b001 	movgt	r11, #1
    } else{
        y_step = -1;
    }

    for (int x = x0; x <= x1; ++x){
    2434:	e59d3004 	ldr	r3, [sp, #4]
    2438:	e1530005 	cmp	r3, r5
    243c:	ba00000d 	blt	2478 <draw_line+0x124>
        if (isSteep){
    2440:	e3580000 	cmp	r8, #0
            plot_pixel(y, x, line_color);
    2444:	11a00006 	movne	r0, r6
    2448:	11a01005 	movne	r1, r5
        } else{
            plot_pixel(x, y, line_color);
    244c:	01a00005 	moveq	r0, r5
    2450:	01a01006 	moveq	r1, r6
    2454:	e1a0200a 	mov	r2, r10
    2458:	ebffff05 	bl	2074 <plot_pixel>
        }
        error = error + deltay;
        if (error >= 0){
    245c:	e0944007 	adds	r4, r4, r7
            y = y + y_step;
    2460:	5086600b 	addpl	r6, r6, r11
            error = error - deltax;
    2464:	50694004 	rsbpl	r4, r9, r4
        y_step = 1;
    } else{
        y_step = -1;
    }

    for (int x = x0; x <= x1; ++x){
    2468:	e2855001 	add	r5, r5, #1
    246c:	e59d300c 	ldr	r3, [sp, #12]
    2470:	e1530005 	cmp	r3, r5
    2474:	aafffff1 	bge	2440 <draw_line+0xec>
        if (error >= 0){
            y = y + y_step;
            error = error - deltax;
        }
    }
}
    2478:	e28dd01c 	add	sp, sp, #28
    247c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

00002480 <wait_for_vsync>:
//function to wait for Vsync
void wait_for_vsync(){
     volatile int *pixel_ctrl_ptr = (int *)0xFF203020;
     register int status;

     *pixel_ctrl_ptr = 1;
    2480:	e3033fff 	movw	r3, #16383	; 0x3fff
    2484:	e34f3f20 	movt	r3, #65312	; 0xff20
    2488:	e3a02001 	mov	r2, #1
    248c:	e5032fdf 	str	r2, [r3, #-4063]	; 0xfffff021

     status = *(pixel_ctrl_ptr + 3);
    2490:	e5133fd3 	ldr	r3, [r3, #-4051]	; 0xfffff02d
     while ((status & 0x01) != 0){
    2494:	e3130001 	tst	r3, #1
    2498:	012fff1e 	bxeq	lr
         status = *(pixel_ctrl_ptr + 3);
    249c:	e3032fff 	movw	r2, #16383	; 0x3fff
    24a0:	e34f2f20 	movt	r2, #65312	; 0xff20
    24a4:	e5123fd3 	ldr	r3, [r2, #-4051]	; 0xfffff02d
     register int status;

     *pixel_ctrl_ptr = 1;

     status = *(pixel_ctrl_ptr + 3);
     while ((status & 0x01) != 0){
    24a8:	e3130001 	tst	r3, #1
    24ac:	1afffffc 	bne	24a4 <wait_for_vsync+0x24>
    24b0:	e12fff1e 	bx	lr

000024b4 <draw_scores>:
         status = *(pixel_ctrl_ptr + 3);
     }
}
	
//helper function to darw all scores
void draw_scores(){
    24b4:	e92d4070 	push	{r4, r5, r6, lr}
    24b8:	e24dd030 	sub	sp, sp, #48	; 0x30
    int ones, tens, hundreds;
    //set an array, easy to get wanted value
    int *num[] = {zero, one, two, three, four, five, six, seven, eight, nine};
    24bc:	e28de008 	add	lr, sp, #8
    24c0:	e303cdc8 	movw	r12, #15816	; 0x3dc8
    24c4:	e340c000 	movt	r12, #0
    24c8:	e8bc000f 	ldm	r12!, {r0, r1, r2, r3}
    24cc:	e8ae000f 	stmia	lr!, {r0, r1, r2, r3}
    24d0:	e8bc000f 	ldm	r12!, {r0, r1, r2, r3}
    24d4:	e8ae000f 	stmia	lr!, {r0, r1, r2, r3}
    24d8:	e89c0003 	ldm	r12, {r0, r1}
    24dc:	e88e0003 	stm	lr, {r0, r1}

    //draw score
    ones = score % 10;
    24e0:	e30e3184 	movw	r3, #57732	; 0xe184
    24e4:	e340301c 	movt	r3, #28
    24e8:	e5931000 	ldr	r1, [r3]
    24ec:	e3062667 	movw	r2, #26215	; 0x6667
    24f0:	e3462666 	movt	r2, #26214	; 0x6666
    24f4:	e0c40192 	smull	r0, r4, r2, r1
    24f8:	e1a03fc1 	asr	r3, r1, #31
    24fc:	e0634144 	rsb	r4, r3, r4, asr #2
    2500:	e1a03004 	mov	r3, r4
    2504:	e0844104 	add	r4, r4, r4, lsl #2
    2508:	e0414084 	sub	r4, r1, r4, lsl #1
    tens = score / 10 % 10;
    250c:	e0c21392 	smull	r1, r2, r2, r3
    2510:	e1a01fc3 	asr	r1, r3, #31
    2514:	e0612142 	rsb	r2, r1, r2, asr #2
    2518:	e0822102 	add	r2, r2, r2, lsl #2
    if (tens != 0){
    251c:	e0532082 	subs	r2, r3, r2, lsl #1
    2520:	0a000011 	beq	256c <draw_scores+0xb8>
        draw_image(15, 23, num[tens], 15, 15);
    2524:	e28d3030 	add	r3, sp, #48	; 0x30
    2528:	e0832102 	add	r2, r3, r2, lsl #2
    252c:	e5122028 	ldr	r2, [r2, #-40]	; 0xffffffd8
    2530:	e3a0500f 	mov	r5, #15
    2534:	e58d5000 	str	r5, [sp]
    2538:	e1a00005 	mov	r0, r5
    253c:	e3a01017 	mov	r1, #23
    2540:	e1a03005 	mov	r3, r5
    2544:	ebfffed1 	bl	2090 <draw_image>
        draw_image(15 + 15, 23, num[ones], 15, 15);
    2548:	e28d0030 	add	r0, sp, #48	; 0x30
    254c:	e0804104 	add	r4, r0, r4, lsl #2
    2550:	e5142028 	ldr	r2, [r4, #-40]	; 0xffffffd8
    2554:	e58d5000 	str	r5, [sp]
    2558:	e3a0001e 	mov	r0, #30
    255c:	e3a01017 	mov	r1, #23
    2560:	e1a03005 	mov	r3, r5
    2564:	ebfffec9 	bl	2090 <draw_image>
    2568:	ea000007 	b	258c <draw_scores+0xd8>
    } else{
        draw_image(20, 23, num[ones], 15, 15);
    256c:	e28d1030 	add	r1, sp, #48	; 0x30
    2570:	e0814104 	add	r4, r1, r4, lsl #2
    2574:	e5142028 	ldr	r2, [r4, #-40]	; 0xffffffd8
    2578:	e3a0300f 	mov	r3, #15
    257c:	e58d3000 	str	r3, [sp]
    2580:	e3a00014 	mov	r0, #20
    2584:	e3a01017 	mov	r1, #23
    2588:	ebfffec0 	bl	2090 <draw_image>
    }
    

    //draw world
    draw_image(98, 23, num[map_num], 15, 15);
    258c:	e3035e50 	movw	r5, #15952	; 0x3e50
    2590:	e3405000 	movt	r5, #0
    2594:	e5953000 	ldr	r3, [r5]
    2598:	e28d2030 	add	r2, sp, #48	; 0x30
    259c:	e0823103 	add	r3, r2, r3, lsl #2
    25a0:	e5132028 	ldr	r2, [r3, #-40]	; 0xffffffd8
    25a4:	e3a0400f 	mov	r4, #15
    25a8:	e58d4000 	str	r4, [sp]
    25ac:	e3a00062 	mov	r0, #98	; 0x62
    25b0:	e3a01017 	mov	r1, #23
    25b4:	e1a03004 	mov	r3, r4
    25b8:	ebfffeb4 	bl	2090 <draw_image>
    draw_image(98 + 15, 27, dash, 8, 15);
    25bc:	e58d4000 	str	r4, [sp]
    25c0:	e3a00071 	mov	r0, #113	; 0x71
    25c4:	e3a0101b 	mov	r1, #27
    25c8:	e59f2654 	ldr	r2, [pc, #1620]	; 2c24 <draw_scores+0x770>
    25cc:	e3a03008 	mov	r3, #8
    25d0:	ebfffeae 	bl	2090 <draw_image>
    draw_image(98 + 15 + 8, 23, num[3], 15, 15);
    25d4:	e58d4000 	str	r4, [sp]
    25d8:	e3a00079 	mov	r0, #121	; 0x79
    25dc:	e3a01017 	mov	r1, #23
    25e0:	e59d2014 	ldr	r2, [sp, #20]
    25e4:	e1a03004 	mov	r3, r4
    25e8:	ebfffea8 	bl	2090 <draw_image>

    //draw time
    ones = time_left % 10;
    25ec:	e5953008 	ldr	r3, [r5, #8]
    25f0:	e3065667 	movw	r5, #26215	; 0x6667
    25f4:	e3465666 	movt	r5, #26214	; 0x6666
    25f8:	e0c40395 	smull	r0, r4, r5, r3
    25fc:	e1a02fc3 	asr	r2, r3, #31
    2600:	e0624144 	rsb	r4, r2, r4, asr #2
    2604:	e1a01004 	mov	r1, r4
    2608:	e0844104 	add	r4, r4, r4, lsl #2
    260c:	e0434084 	sub	r4, r3, r4, lsl #1
    tens = time_left / 10 % 10;
    2610:	e0c50195 	smull	r0, r5, r5, r1
    2614:	e1a00fc1 	asr	r0, r1, #31
    2618:	e0605145 	rsb	r5, r0, r5, asr #2
    261c:	e0855105 	add	r5, r5, r5, lsl #2
    2620:	e0415085 	sub	r5, r1, r5, lsl #1
    hundreds = time_left / 100;
    2624:	e308151f 	movw	r1, #34079	; 0x851f
    2628:	e34511eb 	movt	r1, #20971	; 0x51eb
    262c:	e0c30391 	smull	r0, r3, r1, r3
    if (hundreds != 0){
    2630:	e07232c3 	rsbs	r3, r2, r3, asr #5
    2634:	0a000019 	beq	26a0 <draw_scores+0x1ec>
        draw_image(187, 23, num[hundreds], 15, 15);
    2638:	e28d1030 	add	r1, sp, #48	; 0x30
    263c:	e0813103 	add	r3, r1, r3, lsl #2
    2640:	e5132028 	ldr	r2, [r3, #-40]	; 0xffffffd8
    2644:	e3a0600f 	mov	r6, #15
    2648:	e58d6000 	str	r6, [sp]
    264c:	e3a000bb 	mov	r0, #187	; 0xbb
    2650:	e3a01017 	mov	r1, #23
    2654:	e1a03006 	mov	r3, r6
    2658:	ebfffe8c 	bl	2090 <draw_image>
        draw_image(187 + 15, 23, num[tens], 15, 15);
    265c:	e28d2030 	add	r2, sp, #48	; 0x30
    2660:	e0825105 	add	r5, r2, r5, lsl #2
    2664:	e5152028 	ldr	r2, [r5, #-40]	; 0xffffffd8
    2668:	e58d6000 	str	r6, [sp]
    266c:	e3a000ca 	mov	r0, #202	; 0xca
    2670:	e3a01017 	mov	r1, #23
    2674:	e1a03006 	mov	r3, r6
    2678:	ebfffe84 	bl	2090 <draw_image>
        draw_image(187 + 15 + 15, 23, num[ones], 15, 15);
    267c:	e28d3030 	add	r3, sp, #48	; 0x30
    2680:	e0834104 	add	r4, r3, r4, lsl #2
    2684:	e5142028 	ldr	r2, [r4, #-40]	; 0xffffffd8
    2688:	e58d6000 	str	r6, [sp]
    268c:	e3a000d9 	mov	r0, #217	; 0xd9
    2690:	e3a01017 	mov	r1, #23
    2694:	e1a03006 	mov	r3, r6
    2698:	ebfffe7c 	bl	2090 <draw_image>
    269c:	ea00001b 	b	2710 <draw_scores+0x25c>
    } else if (tens != 0){
    26a0:	e3550000 	cmp	r5, #0
    26a4:	0a000011 	beq	26f0 <draw_scores+0x23c>
        draw_image(192, 23, num[tens], 15, 15);
    26a8:	e28d0030 	add	r0, sp, #48	; 0x30
    26ac:	e0805105 	add	r5, r0, r5, lsl #2
    26b0:	e5152028 	ldr	r2, [r5, #-40]	; 0xffffffd8
    26b4:	e3a0500f 	mov	r5, #15
    26b8:	e58d5000 	str	r5, [sp]
    26bc:	e3a000c0 	mov	r0, #192	; 0xc0
    26c0:	e3a01017 	mov	r1, #23
    26c4:	e1a03005 	mov	r3, r5
    26c8:	ebfffe70 	bl	2090 <draw_image>
        draw_image(192 + 15, 23, num[ones], 15, 15);
    26cc:	e28d1030 	add	r1, sp, #48	; 0x30
    26d0:	e0814104 	add	r4, r1, r4, lsl #2
    26d4:	e5142028 	ldr	r2, [r4, #-40]	; 0xffffffd8
    26d8:	e58d5000 	str	r5, [sp]
    26dc:	e3a000cf 	mov	r0, #207	; 0xcf
    26e0:	e3a01017 	mov	r1, #23
    26e4:	e1a03005 	mov	r3, r5
    26e8:	ebfffe68 	bl	2090 <draw_image>
    26ec:	ea000007 	b	2710 <draw_scores+0x25c>
    } else{
        draw_image(202, 23, num[ones], 15, 15);
    26f0:	e28d2030 	add	r2, sp, #48	; 0x30
    26f4:	e0824104 	add	r4, r2, r4, lsl #2
    26f8:	e5142028 	ldr	r2, [r4, #-40]	; 0xffffffd8
    26fc:	e3a0300f 	mov	r3, #15
    2700:	e58d3000 	str	r3, [sp]
    2704:	e3a000ca 	mov	r0, #202	; 0xca
    2708:	e3a01017 	mov	r1, #23
    270c:	ebfffe5f 	bl	2090 <draw_image>
    }

    //draw lives
    if (lives < 0){
    2710:	e3033e50 	movw	r3, #15952	; 0x3e50
    2714:	e3403000 	movt	r3, #0
    2718:	e5933004 	ldr	r3, [r3, #4]
    271c:	e3530000 	cmp	r3, #0
        lives = 0;
    2720:	b3033e50 	movwlt	r3, #15952	; 0x3e50
    2724:	b3403000 	movtlt	r3, #0
    2728:	b3a02000 	movlt	r2, #0
    272c:	b5832004 	strlt	r2, [r3, #4]
    }
    draw_image(284, 23, num[lives], 15, 15);
    2730:	e3033e50 	movw	r3, #15952	; 0x3e50
    2734:	e3403000 	movt	r3, #0
    2738:	e5933004 	ldr	r3, [r3, #4]
    273c:	e28d0030 	add	r0, sp, #48	; 0x30
    2740:	e0803103 	add	r3, r0, r3, lsl #2
    2744:	e5132028 	ldr	r2, [r3, #-40]	; 0xffffffd8
    2748:	e3a0300f 	mov	r3, #15
    274c:	e58d3000 	str	r3, [sp]
    2750:	e3a00f47 	mov	r0, #284	; 0x11c
    2754:	e3a01017 	mov	r1, #23
    2758:	ebfffe4c 	bl	2090 <draw_image>


    //draw scores if game is over
    if (isGameOver){
    275c:	e30e3184 	movw	r3, #57732	; 0xe184
    2760:	e340301c 	movt	r3, #28
    2764:	e5d33011 	ldrb	r3, [r3, #17]
    2768:	e3530000 	cmp	r3, #0
    276c:	0a000089 	beq	2998 <draw_scores+0x4e4>
        //draw best time
        ones = best_time % 10;
    2770:	e3053748 	movw	r3, #22344	; 0x5748
    2774:	e340301c 	movt	r3, #28
    2778:	e59339a0 	ldr	r3, [r3, #2464]	; 0x9a0
    277c:	e3065667 	movw	r5, #26215	; 0x6667
    2780:	e3465666 	movt	r5, #26214	; 0x6666
    2784:	e0c41395 	smull	r1, r4, r5, r3
    2788:	e1a02fc3 	asr	r2, r3, #31
    278c:	e0624144 	rsb	r4, r2, r4, asr #2
    2790:	e1a01004 	mov	r1, r4
    2794:	e0844104 	add	r4, r4, r4, lsl #2
    2798:	e0434084 	sub	r4, r3, r4, lsl #1
        tens = best_time / 10 % 10;
    279c:	e0c50195 	smull	r0, r5, r5, r1
    27a0:	e1a00fc1 	asr	r0, r1, #31
    27a4:	e0605145 	rsb	r5, r0, r5, asr #2
    27a8:	e0855105 	add	r5, r5, r5, lsl #2
    27ac:	e0415085 	sub	r5, r1, r5, lsl #1
        hundreds = best_time / 100;
    27b0:	e308151f 	movw	r1, #34079	; 0x851f
    27b4:	e34511eb 	movt	r1, #20971	; 0x51eb
    27b8:	e0c30391 	smull	r0, r3, r1, r3
        if (hundreds != 0){
    27bc:	e07232c3 	rsbs	r3, r2, r3, asr #5
    27c0:	0a00001f 	beq	2844 <draw_scores+0x390>
            draw_image(115, 97, num[hundreds], 15, 15);
    27c4:	e28d1030 	add	r1, sp, #48	; 0x30
    27c8:	e0813103 	add	r3, r1, r3, lsl #2
    27cc:	e5132028 	ldr	r2, [r3, #-40]	; 0xffffffd8
    27d0:	e3a0600f 	mov	r6, #15
    27d4:	e58d6000 	str	r6, [sp]
    27d8:	e3a00073 	mov	r0, #115	; 0x73
    27dc:	e3a01061 	mov	r1, #97	; 0x61
    27e0:	e1a03006 	mov	r3, r6
    27e4:	ebfffe29 	bl	2090 <draw_image>
            draw_image(115 + 15, 97, num[tens], 15, 15);
    27e8:	e28d2030 	add	r2, sp, #48	; 0x30
    27ec:	e0825105 	add	r5, r2, r5, lsl #2
    27f0:	e5152028 	ldr	r2, [r5, #-40]	; 0xffffffd8
    27f4:	e58d6000 	str	r6, [sp]
    27f8:	e3a00082 	mov	r0, #130	; 0x82
    27fc:	e3a01061 	mov	r1, #97	; 0x61
    2800:	e1a03006 	mov	r3, r6
    2804:	ebfffe21 	bl	2090 <draw_image>
            draw_image(115 + 15 + 15, 97, num[ones], 15, 15);
    2808:	e28d3030 	add	r3, sp, #48	; 0x30
    280c:	e0834104 	add	r4, r3, r4, lsl #2
    2810:	e5142028 	ldr	r2, [r4, #-40]	; 0xffffffd8
    2814:	e58d6000 	str	r6, [sp]
    2818:	e3a00091 	mov	r0, #145	; 0x91
    281c:	e3a01061 	mov	r1, #97	; 0x61
    2820:	e1a03006 	mov	r3, r6
    2824:	ebfffe19 	bl	2090 <draw_image>
            draw_image(115 + 15 + 15 + 15, 97, sec, 30, 15);
    2828:	e58d6000 	str	r6, [sp]
    282c:	e3a000a0 	mov	r0, #160	; 0xa0
    2830:	e3a01061 	mov	r1, #97	; 0x61
    2834:	e59f23ec 	ldr	r2, [pc, #1004]	; 2c28 <draw_scores+0x774>
    2838:	e3a0301e 	mov	r3, #30
    283c:	ebfffe13 	bl	2090 <draw_image>
    2840:	ea000028 	b	28e8 <draw_scores+0x434>
        } else if (tens != 0){
    2844:	e3550000 	cmp	r5, #0
    2848:	0a000017 	beq	28ac <draw_scores+0x3f8>
            draw_image(115, 97, num[tens], 15, 15);
    284c:	e28d0030 	add	r0, sp, #48	; 0x30
    2850:	e0805105 	add	r5, r0, r5, lsl #2
    2854:	e5152028 	ldr	r2, [r5, #-40]	; 0xffffffd8
    2858:	e3a0500f 	mov	r5, #15
    285c:	e58d5000 	str	r5, [sp]
    2860:	e3a00073 	mov	r0, #115	; 0x73
    2864:	e3a01061 	mov	r1, #97	; 0x61
    2868:	e1a03005 	mov	r3, r5
    286c:	ebfffe07 	bl	2090 <draw_image>
            draw_image(115 + 15, 97, num[ones], 15, 15);
    2870:	e28d1030 	add	r1, sp, #48	; 0x30
    2874:	e0814104 	add	r4, r1, r4, lsl #2
    2878:	e5142028 	ldr	r2, [r4, #-40]	; 0xffffffd8
    287c:	e58d5000 	str	r5, [sp]
    2880:	e3a00082 	mov	r0, #130	; 0x82
    2884:	e3a01061 	mov	r1, #97	; 0x61
    2888:	e1a03005 	mov	r3, r5
    288c:	ebfffdff 	bl	2090 <draw_image>
            draw_image(115 + 15 + 15, 97, sec, 30, 15);
    2890:	e58d5000 	str	r5, [sp]
    2894:	e3a00091 	mov	r0, #145	; 0x91
    2898:	e3a01061 	mov	r1, #97	; 0x61
    289c:	e59f2384 	ldr	r2, [pc, #900]	; 2c28 <draw_scores+0x774>
    28a0:	e3a0301e 	mov	r3, #30
    28a4:	ebfffdf9 	bl	2090 <draw_image>
    28a8:	ea00000e 	b	28e8 <draw_scores+0x434>
        } else{
            draw_image(115, 97, num[ones], 15, 15);
    28ac:	e28d2030 	add	r2, sp, #48	; 0x30
    28b0:	e0824104 	add	r4, r2, r4, lsl #2
    28b4:	e5142028 	ldr	r2, [r4, #-40]	; 0xffffffd8
    28b8:	e3a0400f 	mov	r4, #15
    28bc:	e58d4000 	str	r4, [sp]
    28c0:	e3a00073 	mov	r0, #115	; 0x73
    28c4:	e3a01061 	mov	r1, #97	; 0x61
    28c8:	e1a03004 	mov	r3, r4
    28cc:	ebfffdef 	bl	2090 <draw_image>
            draw_image(115 + 15, 97, sec, 30, 15);
    28d0:	e58d4000 	str	r4, [sp]
    28d4:	e3a00082 	mov	r0, #130	; 0x82
    28d8:	e3a01061 	mov	r1, #97	; 0x61
    28dc:	e59f2344 	ldr	r2, [pc, #836]	; 2c28 <draw_scores+0x774>
    28e0:	e3a0301e 	mov	r3, #30
    28e4:	ebfffde9 	bl	2090 <draw_image>
        }

        //draw best score
        ones = hightest_score % 10;
    28e8:	e30e3184 	movw	r3, #57732	; 0xe184
    28ec:	e340301c 	movt	r3, #28
    28f0:	e5931024 	ldr	r1, [r3, #36]	; 0x24
    28f4:	e3062667 	movw	r2, #26215	; 0x6667
    28f8:	e3462666 	movt	r2, #26214	; 0x6666
    28fc:	e0c43192 	smull	r3, r4, r2, r1
    2900:	e1a03fc1 	asr	r3, r1, #31
    2904:	e0634144 	rsb	r4, r3, r4, asr #2
    2908:	e1a03004 	mov	r3, r4
    290c:	e0844104 	add	r4, r4, r4, lsl #2
    2910:	e0414084 	sub	r4, r1, r4, lsl #1
        tens = hightest_score / 10 % 10;
    2914:	e0c20392 	smull	r0, r2, r2, r3
    2918:	e1a01fc3 	asr	r1, r3, #31
    291c:	e0612142 	rsb	r2, r1, r2, asr #2
    2920:	e0822102 	add	r2, r2, r2, lsl #2
        if (tens != 0){
    2924:	e0532082 	subs	r2, r3, r2, lsl #1
    2928:	0a000011 	beq	2974 <draw_scores+0x4c0>
            draw_image(115, 121, num[tens], 15, 15);
    292c:	e28d1030 	add	r1, sp, #48	; 0x30
    2930:	e0812102 	add	r2, r1, r2, lsl #2
    2934:	e5122028 	ldr	r2, [r2, #-40]	; 0xffffffd8
    2938:	e3a0500f 	mov	r5, #15
    293c:	e58d5000 	str	r5, [sp]
    2940:	e3a00073 	mov	r0, #115	; 0x73
    2944:	e3a01079 	mov	r1, #121	; 0x79
    2948:	e1a03005 	mov	r3, r5
    294c:	ebfffdcf 	bl	2090 <draw_image>
            draw_image(115 + 15, 121, num[ones], 15, 15);
    2950:	e28d2030 	add	r2, sp, #48	; 0x30
    2954:	e0824104 	add	r4, r2, r4, lsl #2
    2958:	e5142028 	ldr	r2, [r4, #-40]	; 0xffffffd8
    295c:	e58d5000 	str	r5, [sp]
    2960:	e3a00082 	mov	r0, #130	; 0x82
    2964:	e3a01079 	mov	r1, #121	; 0x79
    2968:	e1a03005 	mov	r3, r5
    296c:	ebfffdc7 	bl	2090 <draw_image>
    2970:	ea0000a9 	b	2c1c <draw_scores+0x768>
        } else{
            draw_image(115, 121, num[ones], 15, 15);
    2974:	e28d3030 	add	r3, sp, #48	; 0x30
    2978:	e0834104 	add	r4, r3, r4, lsl #2
    297c:	e5142028 	ldr	r2, [r4, #-40]	; 0xffffffd8
    2980:	e3a0300f 	mov	r3, #15
    2984:	e58d3000 	str	r3, [sp]
    2988:	e3a00073 	mov	r0, #115	; 0x73
    298c:	e3a01079 	mov	r1, #121	; 0x79
    2990:	ebfffdbe 	bl	2090 <draw_image>
    2994:	ea0000a0 	b	2c1c <draw_scores+0x768>
        }
    } else if (isWin){
    2998:	e30e3184 	movw	r3, #57732	; 0xe184
    299c:	e340301c 	movt	r3, #28
    29a0:	e5d33010 	ldrb	r3, [r3, #16]
    29a4:	e3530000 	cmp	r3, #0
    29a8:	0a00009b 	beq	2c1c <draw_scores+0x768>
        if (score > hightest_score){
    29ac:	e30e3184 	movw	r3, #57732	; 0xe184
    29b0:	e340301c 	movt	r3, #28
    29b4:	e5932000 	ldr	r2, [r3]
    29b8:	e5933024 	ldr	r3, [r3, #36]	; 0x24
    29bc:	e1520003 	cmp	r2, r3
            hightest_score = score;
    29c0:	c30e3184 	movwgt	r3, #57732	; 0xe184
    29c4:	c340301c 	movtgt	r3, #28
    29c8:	c5832024 	strgt	r2, [r3, #36]	; 0x24
        }

        int current_time = 200 - time_left;
    29cc:	e3033e50 	movw	r3, #15952	; 0x3e50
    29d0:	e3403000 	movt	r3, #0
    29d4:	e5932008 	ldr	r2, [r3, #8]
    29d8:	e26220c8 	rsb	r2, r2, #200	; 0xc8
        if (current_time < best_time){
    29dc:	e3053748 	movw	r3, #22344	; 0x5748
    29e0:	e340301c 	movt	r3, #28
    29e4:	e59339a0 	ldr	r3, [r3, #2464]	; 0x9a0
    29e8:	e1520003 	cmp	r2, r3
            best_time = current_time;
    29ec:	b3053748 	movwlt	r3, #22344	; 0x5748
    29f0:	b340301c 	movtlt	r3, #28
    29f4:	b58329a0 	strlt	r2, [r3, #2464]	; 0x9a0
        }

        //draw best time
        ones = best_time % 10;
    29f8:	e3053748 	movw	r3, #22344	; 0x5748
    29fc:	e340301c 	movt	r3, #28
    2a00:	e59339a0 	ldr	r3, [r3, #2464]	; 0x9a0
    2a04:	e3065667 	movw	r5, #26215	; 0x6667
    2a08:	e3465666 	movt	r5, #26214	; 0x6666
    2a0c:	e0c40395 	smull	r0, r4, r5, r3
    2a10:	e1a02fc3 	asr	r2, r3, #31
    2a14:	e0624144 	rsb	r4, r2, r4, asr #2
    2a18:	e1a01004 	mov	r1, r4
    2a1c:	e0844104 	add	r4, r4, r4, lsl #2
    2a20:	e0434084 	sub	r4, r3, r4, lsl #1
        tens = best_time / 10 % 10;
    2a24:	e0c50195 	smull	r0, r5, r5, r1
    2a28:	e1a00fc1 	asr	r0, r1, #31
    2a2c:	e0605145 	rsb	r5, r0, r5, asr #2
    2a30:	e0855105 	add	r5, r5, r5, lsl #2
    2a34:	e0415085 	sub	r5, r1, r5, lsl #1
        hundreds = best_time / 100;
    2a38:	e308151f 	movw	r1, #34079	; 0x851f
    2a3c:	e34511eb 	movt	r1, #20971	; 0x51eb
    2a40:	e0c30391 	smull	r0, r3, r1, r3
        if (hundreds != 0){
    2a44:	e07232c3 	rsbs	r3, r2, r3, asr #5
    2a48:	0a00001f 	beq	2acc <draw_scores+0x618>
            draw_image(124, 92, num[hundreds], 15, 15);
    2a4c:	e28d1030 	add	r1, sp, #48	; 0x30
    2a50:	e0813103 	add	r3, r1, r3, lsl #2
    2a54:	e5132028 	ldr	r2, [r3, #-40]	; 0xffffffd8
    2a58:	e3a0600f 	mov	r6, #15
    2a5c:	e58d6000 	str	r6, [sp]
    2a60:	e3a0007c 	mov	r0, #124	; 0x7c
    2a64:	e3a0105c 	mov	r1, #92	; 0x5c
    2a68:	e1a03006 	mov	r3, r6
    2a6c:	ebfffd87 	bl	2090 <draw_image>
            draw_image(124 + 15, 92, num[tens], 15, 15);
    2a70:	e28d2030 	add	r2, sp, #48	; 0x30
    2a74:	e0825105 	add	r5, r2, r5, lsl #2
    2a78:	e5152028 	ldr	r2, [r5, #-40]	; 0xffffffd8
    2a7c:	e58d6000 	str	r6, [sp]
    2a80:	e3a0008b 	mov	r0, #139	; 0x8b
    2a84:	e3a0105c 	mov	r1, #92	; 0x5c
    2a88:	e1a03006 	mov	r3, r6
    2a8c:	ebfffd7f 	bl	2090 <draw_image>
            draw_image(124 + 15 + 15, 92, num[ones], 15, 15);
    2a90:	e28d3030 	add	r3, sp, #48	; 0x30
    2a94:	e0834104 	add	r4, r3, r4, lsl #2
    2a98:	e5142028 	ldr	r2, [r4, #-40]	; 0xffffffd8
    2a9c:	e58d6000 	str	r6, [sp]
    2aa0:	e3a0009a 	mov	r0, #154	; 0x9a
    2aa4:	e3a0105c 	mov	r1, #92	; 0x5c
    2aa8:	e1a03006 	mov	r3, r6
    2aac:	ebfffd77 	bl	2090 <draw_image>
            draw_image(124 + 15 + 15 + 15, 92, sec, 30, 15);
    2ab0:	e58d6000 	str	r6, [sp]
    2ab4:	e3a000a9 	mov	r0, #169	; 0xa9
    2ab8:	e3a0105c 	mov	r1, #92	; 0x5c
    2abc:	e59f2164 	ldr	r2, [pc, #356]	; 2c28 <draw_scores+0x774>
    2ac0:	e3a0301e 	mov	r3, #30
    2ac4:	ebfffd71 	bl	2090 <draw_image>
    2ac8:	ea000028 	b	2b70 <draw_scores+0x6bc>
        } else if (tens != 0){
    2acc:	e3550000 	cmp	r5, #0
    2ad0:	0a000017 	beq	2b34 <draw_scores+0x680>
            draw_image(124, 92, num[tens], 15, 15);
    2ad4:	e28d0030 	add	r0, sp, #48	; 0x30
    2ad8:	e0805105 	add	r5, r0, r5, lsl #2
    2adc:	e5152028 	ldr	r2, [r5, #-40]	; 0xffffffd8
    2ae0:	e3a0500f 	mov	r5, #15
    2ae4:	e58d5000 	str	r5, [sp]
    2ae8:	e3a0007c 	mov	r0, #124	; 0x7c
    2aec:	e3a0105c 	mov	r1, #92	; 0x5c
    2af0:	e1a03005 	mov	r3, r5
    2af4:	ebfffd65 	bl	2090 <draw_image>
            draw_image(124 + 15, 92, num[ones], 15, 15);
    2af8:	e28d1030 	add	r1, sp, #48	; 0x30
    2afc:	e0814104 	add	r4, r1, r4, lsl #2
    2b00:	e5142028 	ldr	r2, [r4, #-40]	; 0xffffffd8
    2b04:	e58d5000 	str	r5, [sp]
    2b08:	e3a0008b 	mov	r0, #139	; 0x8b
    2b0c:	e3a0105c 	mov	r1, #92	; 0x5c
    2b10:	e1a03005 	mov	r3, r5
    2b14:	ebfffd5d 	bl	2090 <draw_image>
            draw_image(124 + 15 + 15, 92, sec, 30, 15);
    2b18:	e58d5000 	str	r5, [sp]
    2b1c:	e3a0009a 	mov	r0, #154	; 0x9a
    2b20:	e3a0105c 	mov	r1, #92	; 0x5c
    2b24:	e59f20fc 	ldr	r2, [pc, #252]	; 2c28 <draw_scores+0x774>
    2b28:	e3a0301e 	mov	r3, #30
    2b2c:	ebfffd57 	bl	2090 <draw_image>
    2b30:	ea00000e 	b	2b70 <draw_scores+0x6bc>
        } else{
            draw_image(124, 92, num[ones], 15, 15);
    2b34:	e28d2030 	add	r2, sp, #48	; 0x30
    2b38:	e0824104 	add	r4, r2, r4, lsl #2
    2b3c:	e5142028 	ldr	r2, [r4, #-40]	; 0xffffffd8
    2b40:	e3a0400f 	mov	r4, #15
    2b44:	e58d4000 	str	r4, [sp]
    2b48:	e3a0007c 	mov	r0, #124	; 0x7c
    2b4c:	e3a0105c 	mov	r1, #92	; 0x5c
    2b50:	e1a03004 	mov	r3, r4
    2b54:	ebfffd4d 	bl	2090 <draw_image>
            draw_image(124 + 15, 92, sec, 30, 15);
    2b58:	e58d4000 	str	r4, [sp]
    2b5c:	e3a0008b 	mov	r0, #139	; 0x8b
    2b60:	e3a0105c 	mov	r1, #92	; 0x5c
    2b64:	e59f20bc 	ldr	r2, [pc, #188]	; 2c28 <draw_scores+0x774>
    2b68:	e3a0301e 	mov	r3, #30
    2b6c:	ebfffd47 	bl	2090 <draw_image>
        }

        //draw best score
        ones = hightest_score % 10;
    2b70:	e30e3184 	movw	r3, #57732	; 0xe184
    2b74:	e340301c 	movt	r3, #28
    2b78:	e5931024 	ldr	r1, [r3, #36]	; 0x24
    2b7c:	e3062667 	movw	r2, #26215	; 0x6667
    2b80:	e3462666 	movt	r2, #26214	; 0x6666
    2b84:	e0c43192 	smull	r3, r4, r2, r1
    2b88:	e1a03fc1 	asr	r3, r1, #31
    2b8c:	e0634144 	rsb	r4, r3, r4, asr #2
    2b90:	e1a03004 	mov	r3, r4
    2b94:	e0844104 	add	r4, r4, r4, lsl #2
    2b98:	e0414084 	sub	r4, r1, r4, lsl #1
        tens = hightest_score / 10 % 10;
    2b9c:	e0c20392 	smull	r0, r2, r2, r3
    2ba0:	e1a01fc3 	asr	r1, r3, #31
    2ba4:	e0612142 	rsb	r2, r1, r2, asr #2
    2ba8:	e0822102 	add	r2, r2, r2, lsl #2
        if (tens != 0){
    2bac:	e0532082 	subs	r2, r3, r2, lsl #1
    2bb0:	0a000011 	beq	2bfc <draw_scores+0x748>
            draw_image(124, 108, num[tens], 15, 15);
    2bb4:	e28d1030 	add	r1, sp, #48	; 0x30
    2bb8:	e0812102 	add	r2, r1, r2, lsl #2
    2bbc:	e5122028 	ldr	r2, [r2, #-40]	; 0xffffffd8
    2bc0:	e3a0500f 	mov	r5, #15
    2bc4:	e58d5000 	str	r5, [sp]
    2bc8:	e3a0007c 	mov	r0, #124	; 0x7c
    2bcc:	e3a0106c 	mov	r1, #108	; 0x6c
    2bd0:	e1a03005 	mov	r3, r5
    2bd4:	ebfffd2d 	bl	2090 <draw_image>
            draw_image(124 + 15, 108, num[ones], 15, 15);
    2bd8:	e28d2030 	add	r2, sp, #48	; 0x30
    2bdc:	e0824104 	add	r4, r2, r4, lsl #2
    2be0:	e5142028 	ldr	r2, [r4, #-40]	; 0xffffffd8
    2be4:	e58d5000 	str	r5, [sp]
    2be8:	e3a0008b 	mov	r0, #139	; 0x8b
    2bec:	e3a0106c 	mov	r1, #108	; 0x6c
    2bf0:	e1a03005 	mov	r3, r5
    2bf4:	ebfffd25 	bl	2090 <draw_image>
    2bf8:	ea000007 	b	2c1c <draw_scores+0x768>
        } else{
            draw_image(124, 108, num[ones], 15, 15);
    2bfc:	e28d3030 	add	r3, sp, #48	; 0x30
    2c00:	e0834104 	add	r4, r3, r4, lsl #2
    2c04:	e5142028 	ldr	r2, [r4, #-40]	; 0xffffffd8
    2c08:	e3a0300f 	mov	r3, #15
    2c0c:	e58d3000 	str	r3, [sp]
    2c10:	e3a0007c 	mov	r0, #124	; 0x7c
    2c14:	e3a0106c 	mov	r1, #108	; 0x6c
    2c18:	ebfffd1c 	bl	2090 <draw_image>
        }
    }
    
    2c1c:	e28dd030 	add	sp, sp, #48	; 0x30
    2c20:	e8bd8070 	pop	{r4, r5, r6, pc}
    2c24:	001c5f08 	.word	0x001c5f08
    2c28:	001c60ec 	.word	0x001c60ec

00002c2c <draw_main_canvas>:

    //draw things
    draw_main_canvas();
}

void draw_main_canvas(){
    2c2c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    2c30:	e24dd014 	sub	sp, sp, #20
    volatile int * character_ctrl_ptr = (int *)0xFF203030;
    // declare other variables(not shown)
    // initialize location and direction of rectangles(not shown)

    /* set front pixel buffer to start of FPGA On-chip memory */
    *(pixel_ctrl_ptr + 1) = 0xC8000000; // first store the address in the 
    2c34:	e3035fff 	movw	r5, #16383	; 0x3fff
    2c38:	e34f5f20 	movt	r5, #65312	; 0xff20
    2c3c:	e3a03332 	mov	r3, #-939524096	; 0xc8000000
    2c40:	e5053fdb 	str	r3, [r5, #-4059]	; 0xfffff025
                                        // back buffer
    //*(character_ctrl_ptr + 1) = 0xC9000000;                                    
    /* now, swap the front/back buffers, to set the front buffer location */
    wait_for_vsync();
    2c44:	ebfffe0d 	bl	2480 <wait_for_vsync>
    /* initialize a pointer to the pixel buffer, used by drawing functions */
    pixel_buffer_start = *pixel_ctrl_ptr;
    2c48:	e5153fdf 	ldr	r3, [r5, #-4063]	; 0xfffff021
    2c4c:	e30e4184 	movw	r4, #57732	; 0xe184
    2c50:	e340401c 	movt	r4, #28
    2c54:	e584301c 	str	r3, [r4, #28]
    character_buffer_start = *character_ctrl_ptr;
    2c58:	e5153fcf 	ldr	r3, [r5, #-4047]	; 0xfffff031
    2c5c:	e5843020 	str	r3, [r4, #32]

    clear_screen(); // pixel_buffer_start points to the pixel buffer
    2c60:	ebfffda6 	bl	2300 <clear_screen>
    /* set back pixel buffer to start of SDRAM memory */
    *(pixel_ctrl_ptr + 1) = 0xC0000000;
    2c64:	e3a03103 	mov	r3, #-1073741824	; 0xc0000000
    2c68:	e5053fdb 	str	r3, [r5, #-4059]	; 0xfffff025
    //*(character_ctrl_ptr + 1) = 0xC9000000; 

    pixel_buffer_start = *(pixel_ctrl_ptr + 1); // we draw on the back buffer
    2c6c:	e5153fdb 	ldr	r3, [r5, #-4059]	; 0xfffff025
    2c70:	e584301c 	str	r3, [r4, #28]
    //character_buffer_start = *(character_ctrl_ptr + 1);
	character_buffer_start = 0xC9000000; 
    2c74:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
    2c78:	e5843020 	str	r3, [r4, #32]
            } else if (mario_jump && !is_mario_moving_forward){
                draw_image(mario_x, mario_y, Mario_jump_back, 26, 25);
            } else if (is_mario_moving_forward){
                draw_image(mario_x, mario_y, Mario_run, 25, 25);
            } else if (!is_mario_moving_forward){
                draw_image(mario_x, mario_y, Mario_run_back, 25, 25);
    2c7c:	e3073740 	movw	r3, #30528	; 0x7740
    2c80:	e340301c 	movt	r3, #28
    2c84:	e58d3008 	str	r3, [sp, #8]
    2c88:	e283cd3b 	add	r12, r3, #3776	; 0xec0
    2c8c:	e28cc008 	add	r12, r12, #8
    2c90:	e58dc00c 	str	r12, [sp, #12]
            
            //draw bad mushrooms
            for (int i = 0; i < 3; i++)
            {
                if (isBadMushroom[i]){
                    draw_image(badMushroom_x[i], badMushroom_y[i], bad_mushroom, 19, 19);
    2c94:	e309b738 	movw	r11, #38712	; 0x9738
    2c98:	e340b01c 	movt	r11, #28
    2c9c:	e24b9e76 	sub	r9, r11, #1888	; 0x760
    2ca0:	e249900c 	sub	r9, r9, #12
	
    while (1)
    {

        // code for drawing the boxes and lines 
        draw_background();
    2ca4:	ebfffd2d 	bl	2160 <draw_background>

        if (!isFirstTime){
    2ca8:	e3033e50 	movw	r3, #15952	; 0x3e50
    2cac:	e3403000 	movt	r3, #0
    2cb0:	e5d3305c 	ldrb	r3, [r3, #92]	; 0x5c
    2cb4:	e3530000 	cmp	r3, #0
    2cb8:	1a000000 	bne	2cc0 <draw_main_canvas+0x94>
            draw_scores();
    2cbc:	ebfffdfc 	bl	24b4 <draw_scores>
        }
		
        //check whether the game is over
        if (!isGameOver && !isWin && !isFirstTime){
    2cc0:	e30e3184 	movw	r3, #57732	; 0xe184
    2cc4:	e340301c 	movt	r3, #28
    2cc8:	e5d33011 	ldrb	r3, [r3, #17]
    2ccc:	e3530000 	cmp	r3, #0
    2cd0:	1a000075 	bne	2eac <draw_main_canvas+0x280>
    2cd4:	e30e3184 	movw	r3, #57732	; 0xe184
    2cd8:	e340301c 	movt	r3, #28
    2cdc:	e5d33010 	ldrb	r3, [r3, #16]
    2ce0:	e3530000 	cmp	r3, #0
    2ce4:	1a000070 	bne	2eac <draw_main_canvas+0x280>
    2ce8:	e3033e50 	movw	r3, #15952	; 0x3e50
    2cec:	e3403000 	movt	r3, #0
    2cf0:	e5d3305c 	ldrb	r3, [r3, #92]	; 0x5c
    2cf4:	e3530000 	cmp	r3, #0
    2cf8:	1a00006b 	bne	2eac <draw_main_canvas+0x280>
            //draw Mario depends on different movements
            if (mario_jump && is_mario_moving_forward){
    2cfc:	e30e3184 	movw	r3, #57732	; 0xe184
    2d00:	e340301c 	movt	r3, #28
    2d04:	e5d33014 	ldrb	r3, [r3, #20]
    2d08:	e3530000 	cmp	r3, #0
    2d0c:	0a000075 	beq	2ee8 <draw_main_canvas+0x2bc>
    2d10:	e3033e50 	movw	r3, #15952	; 0x3e50
    2d14:	e3403000 	movt	r3, #0
    2d18:	e5d33084 	ldrb	r3, [r3, #132]	; 0x84
    2d1c:	e3530000 	cmp	r3, #0
                draw_image(mario_x, mario_y, Mario_jump, 26, 25);
    2d20:	e3033e50 	movw	r3, #15952	; 0x3e50
    2d24:	e3403000 	movt	r3, #0
    2d28:	e593000c 	ldr	r0, [r3, #12]
    2d2c:	e5931010 	ldr	r1, [r3, #16]
    2d30:	159d3008 	ldrne	r3, [sp, #8]
    2d34:	12432d3d 	subne	r2, r3, #3904	; 0xf40
    2d38:	13a03019 	movne	r3, #25
    2d3c:	158d3000 	strne	r3, [sp]
    2d40:	1242200c 	subne	r2, r2, #12
            } else if (mario_jump && !is_mario_moving_forward){
                draw_image(mario_x, mario_y, Mario_jump_back, 26, 25);
    2d44:	059dc008 	ldreq	r12, [sp, #8]
    2d48:	024c2e52 	subeq	r2, r12, #1312	; 0x520
    2d4c:	03a03019 	moveq	r3, #25
    2d50:	058d3000 	streq	r3, [sp]
    2d54:	02422004 	subeq	r2, r2, #4
    2d58:	e3a0301a 	mov	r3, #26
    2d5c:	ebfffccb 	bl	2090 <draw_image>
    2d60:	ea00005a 	b	2ed0 <draw_main_canvas+0x2a4>
            } else if (is_mario_moving_forward){
                draw_image(mario_x, mario_y, Mario_run, 25, 25);
    2d64:	e3033e50 	movw	r3, #15952	; 0x3e50
    2d68:	e3403000 	movt	r3, #0
    2d6c:	e593000c 	ldr	r0, [r3, #12]
    2d70:	e5931010 	ldr	r1, [r3, #16]
    2d74:	e3a03019 	mov	r3, #25
    2d78:	e58d3000 	str	r3, [sp]
    2d7c:	e59dc008 	ldr	r12, [sp, #8]
    2d80:	e28c2c05 	add	r2, r12, #1280	; 0x500
    2d84:	e2822004 	add	r2, r2, #4
    2d88:	ebfffcc0 	bl	2090 <draw_image>
    2d8c:	ea00004f 	b	2ed0 <draw_main_canvas+0x2a4>
            } else if (!is_mario_moving_forward){
                draw_image(mario_x, mario_y, Mario_run_back, 25, 25);
    2d90:	e3033e50 	movw	r3, #15952	; 0x3e50
    2d94:	e3403000 	movt	r3, #0
    2d98:	e593000c 	ldr	r0, [r3, #12]
    2d9c:	e5931010 	ldr	r1, [r3, #16]
    2da0:	e3a03019 	mov	r3, #25
    2da4:	e58d3000 	str	r3, [sp]
    2da8:	e59d200c 	ldr	r2, [sp, #12]
    2dac:	ebfffcb7 	bl	2090 <draw_image>
    2db0:	ea000046 	b	2ed0 <draw_main_canvas+0x2a4>
            } 
            
            //draw bad mushrooms
            for (int i = 0; i < 3; i++)
            {
                if (isBadMushroom[i]){
    2db4:	e5f53001 	ldrb	r3, [r5, #1]!
    2db8:	e3530000 	cmp	r3, #0
    2dbc:	0a000007 	beq	2de0 <draw_main_canvas+0x1b4>
                    draw_image(badMushroom_x[i], badMushroom_y[i], bad_mushroom, 19, 19);
    2dc0:	e2863018 	add	r3, r6, #24
    2dc4:	e7940003 	ldr	r0, [r4, r3]
    2dc8:	e2863024 	add	r3, r6, #36	; 0x24
    2dcc:	e7941003 	ldr	r1, [r4, r3]
    2dd0:	e58d7000 	str	r7, [sp]
    2dd4:	e1a02009 	mov	r2, r9
    2dd8:	e1a03007 	mov	r3, r7
    2ddc:	ebfffcab 	bl	2090 <draw_image>
    2de0:	e2844004 	add	r4, r4, #4
            } else if (!is_mario_moving_forward){
                draw_image(mario_x, mario_y, Mario_run_back, 25, 25);
            } 
            
            //draw bad mushrooms
            for (int i = 0; i < 3; i++)
    2de4:	e354000c 	cmp	r4, #12
    2de8:	1afffff1 	bne	2db4 <draw_main_canvas+0x188>
                if (isBadMushroom[i]){
                    draw_image(badMushroom_x[i], badMushroom_y[i], bad_mushroom, 19, 19);
                } 
            }
            
            if (isGoodMushroom){
    2dec:	e30e3184 	movw	r3, #57732	; 0xe184
    2df0:	e340301c 	movt	r3, #28
    2df4:	e5d3300b 	ldrb	r3, [r3, #11]
    2df8:	e3530000 	cmp	r3, #0
    2dfc:	0a000007 	beq	2e20 <draw_main_canvas+0x1f4>
                draw_image(goodMushroom_x, goodMushroom_y, good_mushroom, 19, 19);
    2e00:	e3033e50 	movw	r3, #15952	; 0x3e50
    2e04:	e3403000 	movt	r3, #0
    2e08:	e5930048 	ldr	r0, [r3, #72]	; 0x48
    2e0c:	e593104c 	ldr	r1, [r3, #76]	; 0x4c
    2e10:	e3a03013 	mov	r3, #19
    2e14:	e58d3000 	str	r3, [sp]
    2e18:	e24b2f72 	sub	r2, r11, #456	; 0x1c8
    2e1c:	ebfffc9b 	bl	2090 <draw_image>
            }

            if (isTurtle){
    2e20:	e30e3184 	movw	r3, #57732	; 0xe184
    2e24:	e340301c 	movt	r3, #28
    2e28:	e5d3300c 	ldrb	r3, [r3, #12]
    2e2c:	e3530000 	cmp	r3, #0
    2e30:	0a000032 	beq	2f00 <draw_main_canvas+0x2d4>
                if (isTurtleMovingRight){
    2e34:	e3033e50 	movw	r3, #15952	; 0x3e50
    2e38:	e3403000 	movt	r3, #0
    2e3c:	e5d33050 	ldrb	r3, [r3, #80]	; 0x50
    2e40:	e3530000 	cmp	r3, #0
                    draw_image(turtle_x, turtle_y, turtle_right, 19, 28);
    2e44:	e3033e50 	movw	r3, #15952	; 0x3e50
    2e48:	e3403000 	movt	r3, #0
    2e4c:	e5930054 	ldr	r0, [r3, #84]	; 0x54
    2e50:	e5931058 	ldr	r1, [r3, #88]	; 0x58
    2e54:	e3a0301c 	mov	r3, #28
    2e58:	e58d3000 	str	r3, [sp]
    2e5c:	128b2ff7 	addne	r2, r11, #988	; 0x3dc
                }else{
                    draw_image(turtle_x, turtle_y, turtle, 19, 28);
    2e60:	028b2ec2 	addeq	r2, r11, #3104	; 0xc20
    2e64:	0282200c 	addeq	r2, r2, #12
    2e68:	e3a03013 	mov	r3, #19
    2e6c:	ebfffc87 	bl	2090 <draw_image>
    2e70:	ea000022 	b	2f00 <draw_main_canvas+0x2d4>
            }

            //draw moneys
            for (int i = 0; i < 3; i++)
            {   
                if (isMoney[i]){
    2e74:	e5f53001 	ldrb	r3, [r5, #1]!
    2e78:	e3530000 	cmp	r3, #0
    2e7c:	0a000007 	beq	2ea0 <draw_main_canvas+0x274>
                    draw_image(money_x[i], money_y[i], money, 16, 19);
    2e80:	e2863030 	add	r3, r6, #48	; 0x30
    2e84:	e7940003 	ldr	r0, [r4, r3]
    2e88:	e286303c 	add	r3, r6, #60	; 0x3c
    2e8c:	e7941003 	ldr	r1, [r4, r3]
    2e90:	e58d8000 	str	r8, [sp]
    2e94:	e1a0200a 	mov	r2, r10
    2e98:	e1a03007 	mov	r3, r7
    2e9c:	ebfffc7b 	bl	2090 <draw_image>
    2ea0:	e2844004 	add	r4, r4, #4
                    draw_image(turtle_x, turtle_y, turtle, 19, 28);
                }
            }

            //draw moneys
            for (int i = 0; i < 3; i++)
    2ea4:	e354000c 	cmp	r4, #12
    2ea8:	1afffff1 	bne	2e74 <draw_main_canvas+0x248>
        }

        
        // code for updating the locations of boxes
        //update_location();
        update_location();
    2eac:	ebfffc63 	bl	2040 <update_location>
        wait_for_vsync(); // swap front and back buffers on VGA vertical sync
    2eb0:	ebfffd72 	bl	2480 <wait_for_vsync>
        pixel_buffer_start = *(pixel_ctrl_ptr + 1); // new back buffer
    2eb4:	e3033fff 	movw	r3, #16383	; 0x3fff
    2eb8:	e34f3f20 	movt	r3, #65312	; 0xff20
    2ebc:	e5132fdb 	ldr	r2, [r3, #-4059]	; 0xfffff025
    2ec0:	e30e3184 	movw	r3, #57732	; 0xe184
    2ec4:	e340301c 	movt	r3, #28
    2ec8:	e583201c 	str	r2, [r3, #28]
    }
    2ecc:	eaffff74 	b	2ca4 <draw_main_canvas+0x78>

    //draw things
    draw_main_canvas();
}

void draw_main_canvas(){
    2ed0:	e59f5048 	ldr	r5, [pc, #72]	; 2f20 <draw_main_canvas+0x2f4>
    2ed4:	e3a04000 	mov	r4, #0
            
            //draw bad mushrooms
            for (int i = 0; i < 3; i++)
            {
                if (isBadMushroom[i]){
                    draw_image(badMushroom_x[i], badMushroom_y[i], bad_mushroom, 19, 19);
    2ed8:	e3036e50 	movw	r6, #15952	; 0x3e50
    2edc:	e3406000 	movt	r6, #0
    2ee0:	e3a07013 	mov	r7, #19
    2ee4:	eaffffb2 	b	2db4 <draw_main_canvas+0x188>
            //draw Mario depends on different movements
            if (mario_jump && is_mario_moving_forward){
                draw_image(mario_x, mario_y, Mario_jump, 26, 25);
            } else if (mario_jump && !is_mario_moving_forward){
                draw_image(mario_x, mario_y, Mario_jump_back, 26, 25);
            } else if (is_mario_moving_forward){
    2ee8:	e3033e50 	movw	r3, #15952	; 0x3e50
    2eec:	e3403000 	movt	r3, #0
    2ef0:	e5d33084 	ldrb	r3, [r3, #132]	; 0x84
    2ef4:	e3530000 	cmp	r3, #0
    2ef8:	0affffa4 	beq	2d90 <draw_main_canvas+0x164>
    2efc:	eaffff98 	b	2d64 <draw_main_canvas+0x138>

    //draw things
    draw_main_canvas();
}

void draw_main_canvas(){
    2f00:	e59f501c 	ldr	r5, [pc, #28]	; 2f24 <draw_main_canvas+0x2f8>
    2f04:	e3a04000 	mov	r4, #0

            //draw moneys
            for (int i = 0; i < 3; i++)
            {   
                if (isMoney[i]){
                    draw_image(money_x[i], money_y[i], money, 16, 19);
    2f08:	e3036e50 	movw	r6, #15952	; 0x3e50
    2f0c:	e3406000 	movt	r6, #0
    2f10:	e59fa010 	ldr	r10, [pc, #16]	; 2f28 <draw_main_canvas+0x2fc>
    2f14:	e3a08013 	mov	r8, #19
    2f18:	e3a07010 	mov	r7, #16
    2f1c:	eaffffd4 	b	2e74 <draw_main_canvas+0x248>
    2f20:	00003e63 	.word	0x00003e63
    2f24:	001ce18b 	.word	0x001ce18b
    2f28:	001cabb4 	.word	0x001cabb4

00002f2c <main>:
void reset_characters();
void turtle_update_location();
void beat_turtle();
void draw_scores();

int main(void){
    2f2c:	e92d4008 	push	{r3, lr}
    disable_A9_interrupts ();	// disable interrupts in the A9 processor
    2f30:	ebfff4cf 	bl	274 <disable_A9_interrupts>
	set_A9_IRQ_stack ();			// initialize the stack pointer for IRQ mode
    2f34:	ebfff4d1 	bl	280 <set_A9_IRQ_stack>
	config_GIC ();					// configure the general interrupt controller
    2f38:	ebfff4e7 	bl	2dc <config_GIC>
    config_interval_timer(); // configure Altera interval timer to generate
    2f3c:	ebfff505 	bl	358 <config_interval_timer>
                             // interrupts
	config_KEYs ();				// configure pushbutton KEYs to generate interrupts
    2f40:	ebfff4f8 	bl	328 <config_KEYs>
    config_PS2();  // configure PS/2 port to generate interrupts
    2f44:	ebfff4fc 	bl	33c <config_PS2>

	enable_A9_interrupts ();	// enable interrupts in the A9 processor
    2f48:	ebfff4d3 	bl	29c <enable_A9_interrupts>

    //draw things
    draw_main_canvas();
    2f4c:	ebffff36 	bl	2c2c <draw_main_canvas>

00002f50 <__aeabi_drsub>:
    2f50:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000
    2f54:	ea000000 	b	2f5c <__adddf3>

00002f58 <__aeabi_dsub>:
    2f58:	e2233102 	eor	r3, r3, #-2147483648	; 0x80000000

00002f5c <__adddf3>:
    2f5c:	e92d4030 	push	{r4, r5, lr}
    2f60:	e1a04081 	lsl	r4, r1, #1
    2f64:	e1a05083 	lsl	r5, r3, #1
    2f68:	e1340005 	teq	r4, r5
    2f6c:	01300002 	teqeq	r0, r2
    2f70:	1194c000 	orrsne	r12, r4, r0
    2f74:	1195c002 	orrsne	r12, r5, r2
    2f78:	11f0cac4 	mvnsne	r12, r4, asr #21
    2f7c:	11f0cac5 	mvnsne	r12, r5, asr #21
    2f80:	0a00008c 	beq	31b8 <__adddf3+0x25c>
    2f84:	e1a04aa4 	lsr	r4, r4, #21
    2f88:	e0745aa5 	rsbs	r5, r4, r5, lsr #21
    2f8c:	b2655000 	rsblt	r5, r5, #0
    2f90:	da000006 	ble	2fb0 <__adddf3+0x54>
    2f94:	e0844005 	add	r4, r4, r5
    2f98:	e0202002 	eor	r2, r0, r2
    2f9c:	e0213003 	eor	r3, r1, r3
    2fa0:	e0220000 	eor	r0, r2, r0
    2fa4:	e0231001 	eor	r1, r3, r1
    2fa8:	e0202002 	eor	r2, r0, r2
    2fac:	e0213003 	eor	r3, r1, r3
    2fb0:	e3550036 	cmp	r5, #54	; 0x36
    2fb4:	88bd4030 	pophi	{r4, r5, lr}
    2fb8:	812fff1e 	bxhi	lr
    2fbc:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    2fc0:	e1a01601 	lsl	r1, r1, #12
    2fc4:	e3a0c601 	mov	r12, #1048576	; 0x100000
    2fc8:	e18c1621 	orr	r1, r12, r1, lsr #12
    2fcc:	0a000001 	beq	2fd8 <__adddf3+0x7c>
    2fd0:	e2700000 	rsbs	r0, r0, #0
    2fd4:	e2e11000 	rsc	r1, r1, #0
    2fd8:	e3130102 	tst	r3, #-2147483648	; 0x80000000
    2fdc:	e1a03603 	lsl	r3, r3, #12
    2fe0:	e18c3623 	orr	r3, r12, r3, lsr #12
    2fe4:	0a000001 	beq	2ff0 <__adddf3+0x94>
    2fe8:	e2722000 	rsbs	r2, r2, #0
    2fec:	e2e33000 	rsc	r3, r3, #0
    2ff0:	e1340005 	teq	r4, r5
    2ff4:	0a000069 	beq	31a0 <__adddf3+0x244>
    2ff8:	e2444001 	sub	r4, r4, #1
    2ffc:	e275e020 	rsbs	lr, r5, #32
    3000:	ba000005 	blt	301c <__adddf3+0xc0>
    3004:	e1a0ce12 	lsl	r12, r2, lr
    3008:	e0900532 	adds	r0, r0, r2, lsr r5
    300c:	e2a11000 	adc	r1, r1, #0
    3010:	e0900e13 	adds	r0, r0, r3, lsl lr
    3014:	e0b11553 	adcs	r1, r1, r3, asr r5
    3018:	ea000006 	b	3038 <__adddf3+0xdc>
    301c:	e2455020 	sub	r5, r5, #32
    3020:	e28ee020 	add	lr, lr, #32
    3024:	e3520001 	cmp	r2, #1
    3028:	e1a0ce13 	lsl	r12, r3, lr
    302c:	238cc002 	orrcs	r12, r12, #2
    3030:	e0900553 	adds	r0, r0, r3, asr r5
    3034:	e0b11fc3 	adcs	r1, r1, r3, asr #31
    3038:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    303c:	5a000002 	bpl	304c <__adddf3+0xf0>
    3040:	e27cc000 	rsbs	r12, r12, #0
    3044:	e2f00000 	rscs	r0, r0, #0
    3048:	e2e11000 	rsc	r1, r1, #0
    304c:	e3510601 	cmp	r1, #1048576	; 0x100000
    3050:	3a00000f 	bcc	3094 <__adddf3+0x138>
    3054:	e3510602 	cmp	r1, #2097152	; 0x200000
    3058:	3a000006 	bcc	3078 <__adddf3+0x11c>
    305c:	e1b010a1 	lsrs	r1, r1, #1
    3060:	e1b00060 	rrxs	r0, r0
    3064:	e1a0c06c 	rrx	r12, r12
    3068:	e2844001 	add	r4, r4, #1
    306c:	e1a02a84 	lsl	r2, r4, #21
    3070:	e3720501 	cmn	r2, #4194304	; 0x400000
    3074:	2a00006b 	bcs	3228 <__adddf3+0x2cc>
    3078:	e35c0102 	cmp	r12, #-2147483648	; 0x80000000
    307c:	01b0c0a0 	lsrseq	r12, r0, #1
    3080:	e2b00000 	adcs	r0, r0, #0
    3084:	e0a11a04 	adc	r1, r1, r4, lsl #20
    3088:	e1811005 	orr	r1, r1, r5
    308c:	e8bd4030 	pop	{r4, r5, lr}
    3090:	e12fff1e 	bx	lr
    3094:	e1b0c08c 	lsls	r12, r12, #1
    3098:	e0b00000 	adcs	r0, r0, r0
    309c:	e0a11001 	adc	r1, r1, r1
    30a0:	e3110601 	tst	r1, #1048576	; 0x100000
    30a4:	e2444001 	sub	r4, r4, #1
    30a8:	1afffff2 	bne	3078 <__adddf3+0x11c>
    30ac:	e3310000 	teq	r1, #0
    30b0:	13a03014 	movne	r3, #20
    30b4:	03a03034 	moveq	r3, #52	; 0x34
    30b8:	01a01000 	moveq	r1, r0
    30bc:	03a00000 	moveq	r0, #0
    30c0:	e1a02001 	mov	r2, r1
    30c4:	e3520801 	cmp	r2, #65536	; 0x10000
    30c8:	21a02822 	lsrcs	r2, r2, #16
    30cc:	22433010 	subcs	r3, r3, #16
    30d0:	e3520c01 	cmp	r2, #256	; 0x100
    30d4:	21a02422 	lsrcs	r2, r2, #8
    30d8:	22433008 	subcs	r3, r3, #8
    30dc:	e3520010 	cmp	r2, #16
    30e0:	21a02222 	lsrcs	r2, r2, #4
    30e4:	22433004 	subcs	r3, r3, #4
    30e8:	e3520004 	cmp	r2, #4
    30ec:	22433002 	subcs	r3, r3, #2
    30f0:	304330a2 	subcc	r3, r3, r2, lsr #1
    30f4:	e04331a2 	sub	r3, r3, r2, lsr #3
    30f8:	e2532020 	subs	r2, r3, #32
    30fc:	aa000007 	bge	3120 <__adddf3+0x1c4>
    3100:	e292200c 	adds	r2, r2, #12
    3104:	da000004 	ble	311c <__adddf3+0x1c0>
    3108:	e282c014 	add	r12, r2, #20
    310c:	e262200c 	rsb	r2, r2, #12
    3110:	e1a00c11 	lsl	r0, r1, r12
    3114:	e1a01231 	lsr	r1, r1, r2
    3118:	ea000004 	b	3130 <__adddf3+0x1d4>
    311c:	e2822014 	add	r2, r2, #20
    3120:	d262c020 	rsble	r12, r2, #32
    3124:	e1a01211 	lsl	r1, r1, r2
    3128:	d1811c30 	orrle	r1, r1, r0, lsr r12
    312c:	d1a00210 	lslle	r0, r0, r2
    3130:	e0544003 	subs	r4, r4, r3
    3134:	a0811a04 	addge	r1, r1, r4, lsl #20
    3138:	a1811005 	orrge	r1, r1, r5
    313c:	a8bd4030 	popge	{r4, r5, lr}
    3140:	a12fff1e 	bxge	lr
    3144:	e1e04004 	mvn	r4, r4
    3148:	e254401f 	subs	r4, r4, #31
    314c:	aa00000f 	bge	3190 <__adddf3+0x234>
    3150:	e294400c 	adds	r4, r4, #12
    3154:	ca000006 	bgt	3174 <__adddf3+0x218>
    3158:	e2844014 	add	r4, r4, #20
    315c:	e2642020 	rsb	r2, r4, #32
    3160:	e1a00430 	lsr	r0, r0, r4
    3164:	e1800211 	orr	r0, r0, r1, lsl r2
    3168:	e1851431 	orr	r1, r5, r1, lsr r4
    316c:	e8bd4030 	pop	{r4, r5, lr}
    3170:	e12fff1e 	bx	lr
    3174:	e264400c 	rsb	r4, r4, #12
    3178:	e2642020 	rsb	r2, r4, #32
    317c:	e1a00230 	lsr	r0, r0, r2
    3180:	e1800411 	orr	r0, r0, r1, lsl r4
    3184:	e1a01005 	mov	r1, r5
    3188:	e8bd4030 	pop	{r4, r5, lr}
    318c:	e12fff1e 	bx	lr
    3190:	e1a00431 	lsr	r0, r1, r4
    3194:	e1a01005 	mov	r1, r5
    3198:	e8bd4030 	pop	{r4, r5, lr}
    319c:	e12fff1e 	bx	lr
    31a0:	e3340000 	teq	r4, #0
    31a4:	e2233601 	eor	r3, r3, #1048576	; 0x100000
    31a8:	02211601 	eoreq	r1, r1, #1048576	; 0x100000
    31ac:	02844001 	addeq	r4, r4, #1
    31b0:	12455001 	subne	r5, r5, #1
    31b4:	eaffff8f 	b	2ff8 <__adddf3+0x9c>
    31b8:	e1f0cac4 	mvns	r12, r4, asr #21
    31bc:	11f0cac5 	mvnsne	r12, r5, asr #21
    31c0:	0a00001d 	beq	323c <__adddf3+0x2e0>
    31c4:	e1340005 	teq	r4, r5
    31c8:	01300002 	teqeq	r0, r2
    31cc:	0a000004 	beq	31e4 <__adddf3+0x288>
    31d0:	e194c000 	orrs	r12, r4, r0
    31d4:	01a01003 	moveq	r1, r3
    31d8:	01a00002 	moveq	r0, r2
    31dc:	e8bd4030 	pop	{r4, r5, lr}
    31e0:	e12fff1e 	bx	lr
    31e4:	e1310003 	teq	r1, r3
    31e8:	13a01000 	movne	r1, #0
    31ec:	13a00000 	movne	r0, #0
    31f0:	18bd4030 	popne	{r4, r5, lr}
    31f4:	112fff1e 	bxne	lr
    31f8:	e1b0caa4 	lsrs	r12, r4, #21
    31fc:	1a000004 	bne	3214 <__adddf3+0x2b8>
    3200:	e1b00080 	lsls	r0, r0, #1
    3204:	e0b11001 	adcs	r1, r1, r1
    3208:	23811102 	orrcs	r1, r1, #-2147483648	; 0x80000000
    320c:	e8bd4030 	pop	{r4, r5, lr}
    3210:	e12fff1e 	bx	lr
    3214:	e2944501 	adds	r4, r4, #4194304	; 0x400000
    3218:	32811601 	addcc	r1, r1, #1048576	; 0x100000
    321c:	38bd4030 	popcc	{r4, r5, lr}
    3220:	312fff1e 	bxcc	lr
    3224:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    3228:	e385147f 	orr	r1, r5, #2130706432	; 0x7f000000
    322c:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    3230:	e3a00000 	mov	r0, #0
    3234:	e8bd4030 	pop	{r4, r5, lr}
    3238:	e12fff1e 	bx	lr
    323c:	e1f0cac4 	mvns	r12, r4, asr #21
    3240:	11a01003 	movne	r1, r3
    3244:	11a00002 	movne	r0, r2
    3248:	01f0cac5 	mvnseq	r12, r5, asr #21
    324c:	11a03001 	movne	r3, r1
    3250:	11a02000 	movne	r2, r0
    3254:	e1904601 	orrs	r4, r0, r1, lsl #12
    3258:	01925603 	orrseq	r5, r2, r3, lsl #12
    325c:	01310003 	teqeq	r1, r3
    3260:	13811702 	orrne	r1, r1, #524288	; 0x80000
    3264:	e8bd4030 	pop	{r4, r5, lr}
    3268:	e12fff1e 	bx	lr

0000326c <__aeabi_ui2d>:
    326c:	e3300000 	teq	r0, #0
    3270:	03a01000 	moveq	r1, #0
    3274:	012fff1e 	bxeq	lr
    3278:	e92d4030 	push	{r4, r5, lr}
    327c:	e3a04b01 	mov	r4, #1024	; 0x400
    3280:	e2844032 	add	r4, r4, #50	; 0x32
    3284:	e3a05000 	mov	r5, #0
    3288:	e3a01000 	mov	r1, #0
    328c:	eaffff86 	b	30ac <__adddf3+0x150>

00003290 <__aeabi_i2d>:
    3290:	e3300000 	teq	r0, #0
    3294:	03a01000 	moveq	r1, #0
    3298:	012fff1e 	bxeq	lr
    329c:	e92d4030 	push	{r4, r5, lr}
    32a0:	e3a04b01 	mov	r4, #1024	; 0x400
    32a4:	e2844032 	add	r4, r4, #50	; 0x32
    32a8:	e2105102 	ands	r5, r0, #-2147483648	; 0x80000000
    32ac:	42600000 	rsbmi	r0, r0, #0
    32b0:	e3a01000 	mov	r1, #0
    32b4:	eaffff7c 	b	30ac <__adddf3+0x150>

000032b8 <__aeabi_f2d>:
    32b8:	e1b02080 	lsls	r2, r0, #1
    32bc:	e1a011c2 	asr	r1, r2, #3
    32c0:	e1a01061 	rrx	r1, r1
    32c4:	e1a00e02 	lsl	r0, r2, #28
    32c8:	121234ff 	andsne	r3, r2, #-16777216	; 0xff000000
    32cc:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    32d0:	1221130e 	eorne	r1, r1, #939524096	; 0x38000000
    32d4:	112fff1e 	bxne	lr
    32d8:	e3320000 	teq	r2, #0
    32dc:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    32e0:	012fff1e 	bxeq	lr
    32e4:	e92d4030 	push	{r4, r5, lr}
    32e8:	e3a04d0e 	mov	r4, #896	; 0x380
    32ec:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    32f0:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    32f4:	eaffff6c 	b	30ac <__adddf3+0x150>

000032f8 <__aeabi_ul2d>:
    32f8:	e1902001 	orrs	r2, r0, r1
    32fc:	012fff1e 	bxeq	lr
    3300:	e92d4030 	push	{r4, r5, lr}
    3304:	e3a05000 	mov	r5, #0
    3308:	ea000006 	b	3328 <__aeabi_l2d+0x1c>

0000330c <__aeabi_l2d>:
    330c:	e1902001 	orrs	r2, r0, r1
    3310:	012fff1e 	bxeq	lr
    3314:	e92d4030 	push	{r4, r5, lr}
    3318:	e2115102 	ands	r5, r1, #-2147483648	; 0x80000000
    331c:	5a000001 	bpl	3328 <__aeabi_l2d+0x1c>
    3320:	e2700000 	rsbs	r0, r0, #0
    3324:	e2e11000 	rsc	r1, r1, #0
    3328:	e3a04b01 	mov	r4, #1024	; 0x400
    332c:	e2844032 	add	r4, r4, #50	; 0x32
    3330:	e1b0cb21 	lsrs	r12, r1, #22
    3334:	0affff44 	beq	304c <__adddf3+0xf0>
    3338:	e3a02003 	mov	r2, #3
    333c:	e1b0c1ac 	lsrs	r12, r12, #3
    3340:	12822003 	addne	r2, r2, #3
    3344:	e1b0c1ac 	lsrs	r12, r12, #3
    3348:	12822003 	addne	r2, r2, #3
    334c:	e08221ac 	add	r2, r2, r12, lsr #3
    3350:	e2623020 	rsb	r3, r2, #32
    3354:	e1a0c310 	lsl	r12, r0, r3
    3358:	e1a00230 	lsr	r0, r0, r2
    335c:	e1800311 	orr	r0, r0, r1, lsl r3
    3360:	e1a01231 	lsr	r1, r1, r2
    3364:	e0844002 	add	r4, r4, r2
    3368:	eaffff37 	b	304c <__adddf3+0xf0>

0000336c <__aeabi_dmul>:
    336c:	e92d4070 	push	{r4, r5, r6, lr}
    3370:	e3a0c0ff 	mov	r12, #255	; 0xff
    3374:	e38ccc07 	orr	r12, r12, #1792	; 0x700
    3378:	e01c4a21 	ands	r4, r12, r1, lsr #20
    337c:	101c5a23 	andsne	r5, r12, r3, lsr #20
    3380:	1134000c 	teqne	r4, r12
    3384:	1135000c 	teqne	r5, r12
    3388:	0b000075 	bleq	3564 <__aeabi_dmul+0x1f8>
    338c:	e0844005 	add	r4, r4, r5
    3390:	e0216003 	eor	r6, r1, r3
    3394:	e1c11a8c 	bic	r1, r1, r12, lsl #21
    3398:	e1c33a8c 	bic	r3, r3, r12, lsl #21
    339c:	e1905601 	orrs	r5, r0, r1, lsl #12
    33a0:	11925603 	orrsne	r5, r2, r3, lsl #12
    33a4:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    33a8:	e3833601 	orr	r3, r3, #1048576	; 0x100000
    33ac:	0a00001d 	beq	3428 <__aeabi_dmul+0xbc>
    33b0:	e08ec290 	umull	r12, lr, r0, r2
    33b4:	e3a05000 	mov	r5, #0
    33b8:	e0a5e291 	umlal	lr, r5, r1, r2
    33bc:	e2062102 	and	r2, r6, #-2147483648	; 0x80000000
    33c0:	e0a5e390 	umlal	lr, r5, r0, r3
    33c4:	e3a06000 	mov	r6, #0
    33c8:	e0a65391 	umlal	r5, r6, r1, r3
    33cc:	e33c0000 	teq	r12, #0
    33d0:	138ee001 	orrne	lr, lr, #1
    33d4:	e24440ff 	sub	r4, r4, #255	; 0xff
    33d8:	e3560c02 	cmp	r6, #512	; 0x200
    33dc:	e2c44c03 	sbc	r4, r4, #768	; 0x300
    33e0:	2a000002 	bcs	33f0 <__aeabi_dmul+0x84>
    33e4:	e1b0e08e 	lsls	lr, lr, #1
    33e8:	e0b55005 	adcs	r5, r5, r5
    33ec:	e0a66006 	adc	r6, r6, r6
    33f0:	e1821586 	orr	r1, r2, r6, lsl #11
    33f4:	e1811aa5 	orr	r1, r1, r5, lsr #21
    33f8:	e1a00585 	lsl	r0, r5, #11
    33fc:	e1800aae 	orr	r0, r0, lr, lsr #21
    3400:	e1a0e58e 	lsl	lr, lr, #11
    3404:	e254c0fd 	subs	r12, r4, #253	; 0xfd
    3408:	835c0c07 	cmphi	r12, #1792	; 0x700
    340c:	8a000011 	bhi	3458 <__aeabi_dmul+0xec>
    3410:	e35e0102 	cmp	lr, #-2147483648	; 0x80000000
    3414:	01b0e0a0 	lsrseq	lr, r0, #1
    3418:	e2b00000 	adcs	r0, r0, #0
    341c:	e0a11a04 	adc	r1, r1, r4, lsl #20
    3420:	e8bd4070 	pop	{r4, r5, r6, lr}
    3424:	e12fff1e 	bx	lr
    3428:	e2066102 	and	r6, r6, #-2147483648	; 0x80000000
    342c:	e1861001 	orr	r1, r6, r1
    3430:	e1800002 	orr	r0, r0, r2
    3434:	e0211003 	eor	r1, r1, r3
    3438:	e05440ac 	subs	r4, r4, r12, lsr #1
    343c:	c074500c 	rsbsgt	r5, r4, r12
    3440:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    3444:	c8bd4070 	popgt	{r4, r5, r6, lr}
    3448:	c12fff1e 	bxgt	lr
    344c:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    3450:	e3a0e000 	mov	lr, #0
    3454:	e2544001 	subs	r4, r4, #1
    3458:	ca00005d 	bgt	35d4 <__aeabi_dmul+0x268>
    345c:	e3740036 	cmn	r4, #54	; 0x36
    3460:	d3a00000 	movle	r0, #0
    3464:	d2011102 	andle	r1, r1, #-2147483648	; 0x80000000
    3468:	d8bd4070 	pople	{r4, r5, r6, lr}
    346c:	d12fff1e 	bxle	lr
    3470:	e2644000 	rsb	r4, r4, #0
    3474:	e2544020 	subs	r4, r4, #32
    3478:	aa00001a 	bge	34e8 <__aeabi_dmul+0x17c>
    347c:	e294400c 	adds	r4, r4, #12
    3480:	ca00000c 	bgt	34b8 <__aeabi_dmul+0x14c>
    3484:	e2844014 	add	r4, r4, #20
    3488:	e2645020 	rsb	r5, r4, #32
    348c:	e1a03510 	lsl	r3, r0, r5
    3490:	e1a00430 	lsr	r0, r0, r4
    3494:	e1800511 	orr	r0, r0, r1, lsl r5
    3498:	e2012102 	and	r2, r1, #-2147483648	; 0x80000000
    349c:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    34a0:	e0900fa3 	adds	r0, r0, r3, lsr #31
    34a4:	e0a21431 	adc	r1, r2, r1, lsr r4
    34a8:	e19ee083 	orrs	lr, lr, r3, lsl #1
    34ac:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    34b0:	e8bd4070 	pop	{r4, r5, r6, lr}
    34b4:	e12fff1e 	bx	lr
    34b8:	e264400c 	rsb	r4, r4, #12
    34bc:	e2645020 	rsb	r5, r4, #32
    34c0:	e1a03410 	lsl	r3, r0, r4
    34c4:	e1a00530 	lsr	r0, r0, r5
    34c8:	e1800411 	orr	r0, r0, r1, lsl r4
    34cc:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    34d0:	e0900fa3 	adds	r0, r0, r3, lsr #31
    34d4:	e2a11000 	adc	r1, r1, #0
    34d8:	e19ee083 	orrs	lr, lr, r3, lsl #1
    34dc:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    34e0:	e8bd4070 	pop	{r4, r5, r6, lr}
    34e4:	e12fff1e 	bx	lr
    34e8:	e2645020 	rsb	r5, r4, #32
    34ec:	e18ee510 	orr	lr, lr, r0, lsl r5
    34f0:	e1a03430 	lsr	r3, r0, r4
    34f4:	e1833511 	orr	r3, r3, r1, lsl r5
    34f8:	e1a00431 	lsr	r0, r1, r4
    34fc:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    3500:	e1c00431 	bic	r0, r0, r1, lsr r4
    3504:	e0800fa3 	add	r0, r0, r3, lsr #31
    3508:	e19ee083 	orrs	lr, lr, r3, lsl #1
    350c:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    3510:	e8bd4070 	pop	{r4, r5, r6, lr}
    3514:	e12fff1e 	bx	lr
    3518:	e3340000 	teq	r4, #0
    351c:	1a000008 	bne	3544 <__aeabi_dmul+0x1d8>
    3520:	e2016102 	and	r6, r1, #-2147483648	; 0x80000000
    3524:	e1b00080 	lsls	r0, r0, #1
    3528:	e0a11001 	adc	r1, r1, r1
    352c:	e3110601 	tst	r1, #1048576	; 0x100000
    3530:	02444001 	subeq	r4, r4, #1
    3534:	0afffffa 	beq	3524 <__aeabi_dmul+0x1b8>
    3538:	e1811006 	orr	r1, r1, r6
    353c:	e3350000 	teq	r5, #0
    3540:	112fff1e 	bxne	lr
    3544:	e2036102 	and	r6, r3, #-2147483648	; 0x80000000
    3548:	e1b02082 	lsls	r2, r2, #1
    354c:	e0a33003 	adc	r3, r3, r3
    3550:	e3130601 	tst	r3, #1048576	; 0x100000
    3554:	02455001 	subeq	r5, r5, #1
    3558:	0afffffa 	beq	3548 <__aeabi_dmul+0x1dc>
    355c:	e1833006 	orr	r3, r3, r6
    3560:	e12fff1e 	bx	lr
    3564:	e134000c 	teq	r4, r12
    3568:	e00c5a23 	and	r5, r12, r3, lsr #20
    356c:	1135000c 	teqne	r5, r12
    3570:	0a000007 	beq	3594 <__aeabi_dmul+0x228>
    3574:	e1906081 	orrs	r6, r0, r1, lsl #1
    3578:	11926083 	orrsne	r6, r2, r3, lsl #1
    357c:	1affffe5 	bne	3518 <__aeabi_dmul+0x1ac>
    3580:	e0211003 	eor	r1, r1, r3
    3584:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    3588:	e3a00000 	mov	r0, #0
    358c:	e8bd4070 	pop	{r4, r5, r6, lr}
    3590:	e12fff1e 	bx	lr
    3594:	e1906081 	orrs	r6, r0, r1, lsl #1
    3598:	01a00002 	moveq	r0, r2
    359c:	01a01003 	moveq	r1, r3
    35a0:	11926083 	orrsne	r6, r2, r3, lsl #1
    35a4:	0a000010 	beq	35ec <__aeabi_dmul+0x280>
    35a8:	e134000c 	teq	r4, r12
    35ac:	1a000001 	bne	35b8 <__aeabi_dmul+0x24c>
    35b0:	e1906601 	orrs	r6, r0, r1, lsl #12
    35b4:	1a00000c 	bne	35ec <__aeabi_dmul+0x280>
    35b8:	e135000c 	teq	r5, r12
    35bc:	1a000003 	bne	35d0 <__aeabi_dmul+0x264>
    35c0:	e1926603 	orrs	r6, r2, r3, lsl #12
    35c4:	11a00002 	movne	r0, r2
    35c8:	11a01003 	movne	r1, r3
    35cc:	1a000006 	bne	35ec <__aeabi_dmul+0x280>
    35d0:	e0211003 	eor	r1, r1, r3
    35d4:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    35d8:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    35dc:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    35e0:	e3a00000 	mov	r0, #0
    35e4:	e8bd4070 	pop	{r4, r5, r6, lr}
    35e8:	e12fff1e 	bx	lr
    35ec:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    35f0:	e381173e 	orr	r1, r1, #16252928	; 0xf80000
    35f4:	e8bd4070 	pop	{r4, r5, r6, lr}
    35f8:	e12fff1e 	bx	lr

000035fc <__aeabi_ddiv>:
    35fc:	e92d4070 	push	{r4, r5, r6, lr}
    3600:	e3a0c0ff 	mov	r12, #255	; 0xff
    3604:	e38ccc07 	orr	r12, r12, #1792	; 0x700
    3608:	e01c4a21 	ands	r4, r12, r1, lsr #20
    360c:	101c5a23 	andsne	r5, r12, r3, lsr #20
    3610:	1134000c 	teqne	r4, r12
    3614:	1135000c 	teqne	r5, r12
    3618:	0b00005e 	bleq	3798 <__aeabi_ddiv+0x19c>
    361c:	e0444005 	sub	r4, r4, r5
    3620:	e021e003 	eor	lr, r1, r3
    3624:	e1925603 	orrs	r5, r2, r3, lsl #12
    3628:	e1a01601 	lsl	r1, r1, #12
    362c:	0a00004c 	beq	3764 <__aeabi_ddiv+0x168>
    3630:	e1a03603 	lsl	r3, r3, #12
    3634:	e3a05201 	mov	r5, #268435456	; 0x10000000
    3638:	e1853223 	orr	r3, r5, r3, lsr #4
    363c:	e1833c22 	orr	r3, r3, r2, lsr #24
    3640:	e1a02402 	lsl	r2, r2, #8
    3644:	e1855221 	orr	r5, r5, r1, lsr #4
    3648:	e1855c20 	orr	r5, r5, r0, lsr #24
    364c:	e1a06400 	lsl	r6, r0, #8
    3650:	e20e1102 	and	r1, lr, #-2147483648	; 0x80000000
    3654:	e1550003 	cmp	r5, r3
    3658:	01560002 	cmpeq	r6, r2
    365c:	e2a440fd 	adc	r4, r4, #253	; 0xfd
    3660:	e2844c03 	add	r4, r4, #768	; 0x300
    3664:	2a000001 	bcs	3670 <__aeabi_ddiv+0x74>
    3668:	e1b030a3 	lsrs	r3, r3, #1
    366c:	e1a02062 	rrx	r2, r2
    3670:	e0566002 	subs	r6, r6, r2
    3674:	e0c55003 	sbc	r5, r5, r3
    3678:	e1b030a3 	lsrs	r3, r3, #1
    367c:	e1a02062 	rrx	r2, r2
    3680:	e3a00601 	mov	r0, #1048576	; 0x100000
    3684:	e3a0c702 	mov	r12, #524288	; 0x80000
    3688:	e056e002 	subs	lr, r6, r2
    368c:	e0d5e003 	sbcs	lr, r5, r3
    3690:	20466002 	subcs	r6, r6, r2
    3694:	21a0500e 	movcs	r5, lr
    3698:	2180000c 	orrcs	r0, r0, r12
    369c:	e1b030a3 	lsrs	r3, r3, #1
    36a0:	e1a02062 	rrx	r2, r2
    36a4:	e056e002 	subs	lr, r6, r2
    36a8:	e0d5e003 	sbcs	lr, r5, r3
    36ac:	20466002 	subcs	r6, r6, r2
    36b0:	21a0500e 	movcs	r5, lr
    36b4:	218000ac 	orrcs	r0, r0, r12, lsr #1
    36b8:	e1b030a3 	lsrs	r3, r3, #1
    36bc:	e1a02062 	rrx	r2, r2
    36c0:	e056e002 	subs	lr, r6, r2
    36c4:	e0d5e003 	sbcs	lr, r5, r3
    36c8:	20466002 	subcs	r6, r6, r2
    36cc:	21a0500e 	movcs	r5, lr
    36d0:	2180012c 	orrcs	r0, r0, r12, lsr #2
    36d4:	e1b030a3 	lsrs	r3, r3, #1
    36d8:	e1a02062 	rrx	r2, r2
    36dc:	e056e002 	subs	lr, r6, r2
    36e0:	e0d5e003 	sbcs	lr, r5, r3
    36e4:	20466002 	subcs	r6, r6, r2
    36e8:	21a0500e 	movcs	r5, lr
    36ec:	218001ac 	orrcs	r0, r0, r12, lsr #3
    36f0:	e195e006 	orrs	lr, r5, r6
    36f4:	0a00000d 	beq	3730 <__aeabi_ddiv+0x134>
    36f8:	e1a05205 	lsl	r5, r5, #4
    36fc:	e1855e26 	orr	r5, r5, r6, lsr #28
    3700:	e1a06206 	lsl	r6, r6, #4
    3704:	e1a03183 	lsl	r3, r3, #3
    3708:	e1833ea2 	orr	r3, r3, r2, lsr #29
    370c:	e1a02182 	lsl	r2, r2, #3
    3710:	e1b0c22c 	lsrs	r12, r12, #4
    3714:	1affffdb 	bne	3688 <__aeabi_ddiv+0x8c>
    3718:	e3110601 	tst	r1, #1048576	; 0x100000
    371c:	1a000006 	bne	373c <__aeabi_ddiv+0x140>
    3720:	e1811000 	orr	r1, r1, r0
    3724:	e3a00000 	mov	r0, #0
    3728:	e3a0c102 	mov	r12, #-2147483648	; 0x80000000
    372c:	eaffffd5 	b	3688 <__aeabi_ddiv+0x8c>
    3730:	e3110601 	tst	r1, #1048576	; 0x100000
    3734:	01811000 	orreq	r1, r1, r0
    3738:	03a00000 	moveq	r0, #0
    373c:	e254c0fd 	subs	r12, r4, #253	; 0xfd
    3740:	835c0c07 	cmphi	r12, #1792	; 0x700
    3744:	8affff43 	bhi	3458 <__aeabi_dmul+0xec>
    3748:	e055c003 	subs	r12, r5, r3
    374c:	0056c002 	subseq	r12, r6, r2
    3750:	01b0c0a0 	lsrseq	r12, r0, #1
    3754:	e2b00000 	adcs	r0, r0, #0
    3758:	e0a11a04 	adc	r1, r1, r4, lsl #20
    375c:	e8bd4070 	pop	{r4, r5, r6, lr}
    3760:	e12fff1e 	bx	lr
    3764:	e20ee102 	and	lr, lr, #-2147483648	; 0x80000000
    3768:	e18e1621 	orr	r1, lr, r1, lsr #12
    376c:	e09440ac 	adds	r4, r4, r12, lsr #1
    3770:	c074500c 	rsbsgt	r5, r4, r12
    3774:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    3778:	c8bd4070 	popgt	{r4, r5, r6, lr}
    377c:	c12fff1e 	bxgt	lr
    3780:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    3784:	e3a0e000 	mov	lr, #0
    3788:	e2544001 	subs	r4, r4, #1
    378c:	eaffff31 	b	3458 <__aeabi_dmul+0xec>
    3790:	e185e006 	orr	lr, r5, r6
    3794:	eaffff2f 	b	3458 <__aeabi_dmul+0xec>
    3798:	e00c5a23 	and	r5, r12, r3, lsr #20
    379c:	e134000c 	teq	r4, r12
    37a0:	0135000c 	teqeq	r5, r12
    37a4:	0affff90 	beq	35ec <__aeabi_dmul+0x280>
    37a8:	e134000c 	teq	r4, r12
    37ac:	1a000006 	bne	37cc <__aeabi_ddiv+0x1d0>
    37b0:	e1904601 	orrs	r4, r0, r1, lsl #12
    37b4:	1affff8c 	bne	35ec <__aeabi_dmul+0x280>
    37b8:	e135000c 	teq	r5, r12
    37bc:	1affff83 	bne	35d0 <__aeabi_dmul+0x264>
    37c0:	e1a00002 	mov	r0, r2
    37c4:	e1a01003 	mov	r1, r3
    37c8:	eaffff87 	b	35ec <__aeabi_dmul+0x280>
    37cc:	e135000c 	teq	r5, r12
    37d0:	1a000004 	bne	37e8 <__aeabi_ddiv+0x1ec>
    37d4:	e1925603 	orrs	r5, r2, r3, lsl #12
    37d8:	0affff68 	beq	3580 <__aeabi_dmul+0x214>
    37dc:	e1a00002 	mov	r0, r2
    37e0:	e1a01003 	mov	r1, r3
    37e4:	eaffff80 	b	35ec <__aeabi_dmul+0x280>
    37e8:	e1906081 	orrs	r6, r0, r1, lsl #1
    37ec:	11926083 	orrsne	r6, r2, r3, lsl #1
    37f0:	1affff48 	bne	3518 <__aeabi_dmul+0x1ac>
    37f4:	e1904081 	orrs	r4, r0, r1, lsl #1
    37f8:	1affff74 	bne	35d0 <__aeabi_dmul+0x264>
    37fc:	e1925083 	orrs	r5, r2, r3, lsl #1
    3800:	1affff5e 	bne	3580 <__aeabi_dmul+0x214>
    3804:	eaffff78 	b	35ec <__aeabi_dmul+0x280>

00003808 <__gedf2>:
    3808:	e3e0c000 	mvn	r12, #0
    380c:	ea000002 	b	381c <__cmpdf2+0x4>

00003810 <__ledf2>:
    3810:	e3a0c001 	mov	r12, #1
    3814:	ea000000 	b	381c <__cmpdf2+0x4>

00003818 <__cmpdf2>:
    3818:	e3a0c001 	mov	r12, #1
    381c:	e52dc004 	push	{r12}		; (str r12, [sp, #-4]!)
    3820:	e1a0c081 	lsl	r12, r1, #1
    3824:	e1f0cacc 	mvns	r12, r12, asr #21
    3828:	e1a0c083 	lsl	r12, r3, #1
    382c:	11f0cacc 	mvnsne	r12, r12, asr #21
    3830:	0a00000e 	beq	3870 <__cmpdf2+0x58>
    3834:	e28dd004 	add	sp, sp, #4
    3838:	e190c081 	orrs	r12, r0, r1, lsl #1
    383c:	0192c083 	orrseq	r12, r2, r3, lsl #1
    3840:	11310003 	teqne	r1, r3
    3844:	01300002 	teqeq	r0, r2
    3848:	03a00000 	moveq	r0, #0
    384c:	012fff1e 	bxeq	lr
    3850:	e3700000 	cmn	r0, #0
    3854:	e1310003 	teq	r1, r3
    3858:	51510003 	cmppl	r1, r3
    385c:	01500002 	cmpeq	r0, r2
    3860:	21a00fc3 	asrcs	r0, r3, #31
    3864:	31e00fc3 	mvncc	r0, r3, asr #31
    3868:	e3800001 	orr	r0, r0, #1
    386c:	e12fff1e 	bx	lr
    3870:	e1a0c081 	lsl	r12, r1, #1
    3874:	e1f0cacc 	mvns	r12, r12, asr #21
    3878:	1a000001 	bne	3884 <__cmpdf2+0x6c>
    387c:	e190c601 	orrs	r12, r0, r1, lsl #12
    3880:	1a000004 	bne	3898 <__cmpdf2+0x80>
    3884:	e1a0c083 	lsl	r12, r3, #1
    3888:	e1f0cacc 	mvns	r12, r12, asr #21
    388c:	1affffe8 	bne	3834 <__cmpdf2+0x1c>
    3890:	e192c603 	orrs	r12, r2, r3, lsl #12
    3894:	0affffe6 	beq	3834 <__cmpdf2+0x1c>
    3898:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    389c:	e12fff1e 	bx	lr

000038a0 <__aeabi_cdrcmple>:
    38a0:	e1a0c000 	mov	r12, r0
    38a4:	e1a00002 	mov	r0, r2
    38a8:	e1a0200c 	mov	r2, r12
    38ac:	e1a0c001 	mov	r12, r1
    38b0:	e1a01003 	mov	r1, r3
    38b4:	e1a0300c 	mov	r3, r12
    38b8:	eaffffff 	b	38bc <__aeabi_cdcmpeq>

000038bc <__aeabi_cdcmpeq>:
    38bc:	e92d4001 	push	{r0, lr}
    38c0:	ebffffd4 	bl	3818 <__cmpdf2>
    38c4:	e3500000 	cmp	r0, #0
    38c8:	43700000 	cmnmi	r0, #0
    38cc:	e8bd4001 	pop	{r0, lr}
    38d0:	e12fff1e 	bx	lr

000038d4 <__aeabi_dcmpeq>:
    38d4:	e52de008 	str	lr, [sp, #-8]!
    38d8:	ebfffff7 	bl	38bc <__aeabi_cdcmpeq>
    38dc:	03a00001 	moveq	r0, #1
    38e0:	13a00000 	movne	r0, #0
    38e4:	e49de008 	ldr	lr, [sp], #8
    38e8:	e12fff1e 	bx	lr

000038ec <__aeabi_dcmplt>:
    38ec:	e52de008 	str	lr, [sp, #-8]!
    38f0:	ebfffff1 	bl	38bc <__aeabi_cdcmpeq>
    38f4:	33a00001 	movcc	r0, #1
    38f8:	23a00000 	movcs	r0, #0
    38fc:	e49de008 	ldr	lr, [sp], #8
    3900:	e12fff1e 	bx	lr

00003904 <__aeabi_dcmple>:
    3904:	e52de008 	str	lr, [sp, #-8]!
    3908:	ebffffeb 	bl	38bc <__aeabi_cdcmpeq>
    390c:	93a00001 	movls	r0, #1
    3910:	83a00000 	movhi	r0, #0
    3914:	e49de008 	ldr	lr, [sp], #8
    3918:	e12fff1e 	bx	lr

0000391c <__aeabi_dcmpge>:
    391c:	e52de008 	str	lr, [sp, #-8]!
    3920:	ebffffde 	bl	38a0 <__aeabi_cdrcmple>
    3924:	93a00001 	movls	r0, #1
    3928:	83a00000 	movhi	r0, #0
    392c:	e49de008 	ldr	lr, [sp], #8
    3930:	e12fff1e 	bx	lr

00003934 <__aeabi_dcmpgt>:
    3934:	e52de008 	str	lr, [sp, #-8]!
    3938:	ebffffd8 	bl	38a0 <__aeabi_cdrcmple>
    393c:	33a00001 	movcc	r0, #1
    3940:	23a00000 	movcs	r0, #0
    3944:	e49de008 	ldr	lr, [sp], #8
    3948:	e12fff1e 	bx	lr

0000394c <__aeabi_d2iz>:
    394c:	e1a02081 	lsl	r2, r1, #1
    3950:	e2922602 	adds	r2, r2, #2097152	; 0x200000
    3954:	2a00000c 	bcs	398c <__aeabi_d2iz+0x40>
    3958:	5a000009 	bpl	3984 <__aeabi_d2iz+0x38>
    395c:	e3e03e3e 	mvn	r3, #992	; 0x3e0
    3960:	e0532ac2 	subs	r2, r3, r2, asr #21
    3964:	9a00000a 	bls	3994 <__aeabi_d2iz+0x48>
    3968:	e1a03581 	lsl	r3, r1, #11
    396c:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
    3970:	e1833aa0 	orr	r3, r3, r0, lsr #21
    3974:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    3978:	e1a00233 	lsr	r0, r3, r2
    397c:	12600000 	rsbne	r0, r0, #0
    3980:	e12fff1e 	bx	lr
    3984:	e3a00000 	mov	r0, #0
    3988:	e12fff1e 	bx	lr
    398c:	e1900601 	orrs	r0, r0, r1, lsl #12
    3990:	1a000002 	bne	39a0 <__aeabi_d2iz+0x54>
    3994:	e2110102 	ands	r0, r1, #-2147483648	; 0x80000000
    3998:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
    399c:	e12fff1e 	bx	lr
    39a0:	e3a00000 	mov	r0, #0
    39a4:	e12fff1e 	bx	lr

000039a8 <atexit>:
    39a8:	e1a01000 	mov	r1, r0
    39ac:	e3a00000 	mov	r0, #0
    39b0:	e92d4008 	push	{r3, lr}
    39b4:	e1a02000 	mov	r2, r0
    39b8:	e1a03000 	mov	r3, r0
    39bc:	eb00000e 	bl	39fc <__register_exitproc>
    39c0:	e8bd4008 	pop	{r3, lr}
    39c4:	e12fff1e 	bx	lr

000039c8 <exit>:
    39c8:	e92d4008 	push	{r3, lr}
    39cc:	e3a01000 	mov	r1, #0
    39d0:	e1a04000 	mov	r4, r0
    39d4:	eb000045 	bl	3af0 <__call_exitprocs>
    39d8:	e59f3018 	ldr	r3, [pc, #24]	; 39f8 <exit+0x30>
    39dc:	e5930000 	ldr	r0, [r3]
    39e0:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    39e4:	e3530000 	cmp	r3, #0
    39e8:	11a0e00f 	movne	lr, pc
    39ec:	112fff13 	bxne	r3
    39f0:	e1a00004 	mov	r0, r4
    39f4:	eb0000c9 	bl	3d20 <_exit>
    39f8:	00003df0 	.word	0x00003df0

000039fc <__register_exitproc>:
    39fc:	e59fc0e4 	ldr	r12, [pc, #228]	; 3ae8 <__register_exitproc+0xec>
    3a00:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    3a04:	e59c4000 	ldr	r4, [r12]
    3a08:	e594c148 	ldr	r12, [r4, #328]	; 0x148
    3a0c:	e35c0000 	cmp	r12, #0
    3a10:	0284cf53 	addeq	r12, r4, #332	; 0x14c
    3a14:	e59c5004 	ldr	r5, [r12, #4]
    3a18:	0584c148 	streq	r12, [r4, #328]	; 0x148
    3a1c:	e355001f 	cmp	r5, #31
    3a20:	e24dd010 	sub	sp, sp, #16
    3a24:	e1a06000 	mov	r6, r0
    3a28:	da000015 	ble	3a84 <__register_exitproc+0x88>
    3a2c:	e59f00b8 	ldr	r0, [pc, #184]	; 3aec <__register_exitproc+0xf0>
    3a30:	e3500000 	cmp	r0, #0
    3a34:	1a000001 	bne	3a40 <__register_exitproc+0x44>
    3a38:	e3e00000 	mvn	r0, #0
    3a3c:	ea000018 	b	3aa4 <__register_exitproc+0xa8>
    3a40:	e3a00e19 	mov	r0, #400	; 0x190
    3a44:	e58d100c 	str	r1, [sp, #12]
    3a48:	e58d2008 	str	r2, [sp, #8]
    3a4c:	e58d3004 	str	r3, [sp, #4]
    3a50:	e320f000 	nop	{0}
    3a54:	e250c000 	subs	r12, r0, #0
    3a58:	e59d100c 	ldr	r1, [sp, #12]
    3a5c:	e59d2008 	ldr	r2, [sp, #8]
    3a60:	e59d3004 	ldr	r3, [sp, #4]
    3a64:	0afffff3 	beq	3a38 <__register_exitproc+0x3c>
    3a68:	e5945148 	ldr	r5, [r4, #328]	; 0x148
    3a6c:	e3a00000 	mov	r0, #0
    3a70:	e58c0004 	str	r0, [r12, #4]
    3a74:	e58c5000 	str	r5, [r12]
    3a78:	e584c148 	str	r12, [r4, #328]	; 0x148
    3a7c:	e58c0188 	str	r0, [r12, #392]	; 0x188
    3a80:	e58c018c 	str	r0, [r12, #396]	; 0x18c
    3a84:	e3560000 	cmp	r6, #0
    3a88:	e59c4004 	ldr	r4, [r12, #4]
    3a8c:	1a000007 	bne	3ab0 <__register_exitproc+0xb4>
    3a90:	e2843002 	add	r3, r4, #2
    3a94:	e2844001 	add	r4, r4, #1
    3a98:	e78c1103 	str	r1, [r12, r3, lsl #2]
    3a9c:	e58c4004 	str	r4, [r12, #4]
    3aa0:	e3a00000 	mov	r0, #0
    3aa4:	e28dd010 	add	sp, sp, #16
    3aa8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    3aac:	e12fff1e 	bx	lr
    3ab0:	e3a00001 	mov	r0, #1
    3ab4:	e1a00410 	lsl	r0, r0, r4
    3ab8:	e08c8104 	add	r8, r12, r4, lsl #2
    3abc:	e3560002 	cmp	r6, #2
    3ac0:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
    3ac4:	e5883108 	str	r3, [r8, #264]	; 0x108
    3ac8:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
    3acc:	e1877000 	orr	r7, r7, r0
    3ad0:	01830000 	orreq	r0, r3, r0
    3ad4:	e1a05008 	mov	r5, r8
    3ad8:	e5882088 	str	r2, [r8, #136]	; 0x88
    3adc:	e58c7188 	str	r7, [r12, #392]	; 0x188
    3ae0:	058c018c 	streq	r0, [r12, #396]	; 0x18c
    3ae4:	eaffffe9 	b	3a90 <__register_exitproc+0x94>
    3ae8:	00003df0 	.word	0x00003df0
    3aec:	00000000 	.word	0x00000000

00003af0 <__call_exitprocs>:
    3af0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    3af4:	e59f3168 	ldr	r3, [pc, #360]	; 3c64 <__call_exitprocs+0x174>
    3af8:	e5933000 	ldr	r3, [r3]
    3afc:	e24dd014 	sub	sp, sp, #20
    3b00:	e58d3004 	str	r3, [sp, #4]
    3b04:	e2833f52 	add	r3, r3, #328	; 0x148
    3b08:	e58d0008 	str	r0, [sp, #8]
    3b0c:	e58d300c 	str	r3, [sp, #12]
    3b10:	e1a07001 	mov	r7, r1
    3b14:	e3a08001 	mov	r8, #1
    3b18:	e59d3004 	ldr	r3, [sp, #4]
    3b1c:	e5936148 	ldr	r6, [r3, #328]	; 0x148
    3b20:	e3560000 	cmp	r6, #0
    3b24:	e59db00c 	ldr	r11, [sp, #12]
    3b28:	0a000033 	beq	3bfc <__call_exitprocs+0x10c>
    3b2c:	e5965004 	ldr	r5, [r6, #4]
    3b30:	e2554001 	subs	r4, r5, #1
    3b34:	5286a088 	addpl	r10, r6, #136	; 0x88
    3b38:	5285501f 	addpl	r5, r5, #31
    3b3c:	508a5105 	addpl	r5, r10, r5, lsl #2
    3b40:	5a000007 	bpl	3b64 <__call_exitprocs+0x74>
    3b44:	ea000029 	b	3bf0 <__call_exitprocs+0x100>
    3b48:	e5953000 	ldr	r3, [r5]
    3b4c:	e1530007 	cmp	r3, r7
    3b50:	0a000005 	beq	3b6c <__call_exitprocs+0x7c>
    3b54:	e2444001 	sub	r4, r4, #1
    3b58:	e3740001 	cmn	r4, #1
    3b5c:	e2455004 	sub	r5, r5, #4
    3b60:	0a000022 	beq	3bf0 <__call_exitprocs+0x100>
    3b64:	e3570000 	cmp	r7, #0
    3b68:	1afffff6 	bne	3b48 <__call_exitprocs+0x58>
    3b6c:	e5963004 	ldr	r3, [r6, #4]
    3b70:	e06a2005 	rsb	r2, r10, r5
    3b74:	e2433001 	sub	r3, r3, #1
    3b78:	e0862002 	add	r2, r6, r2
    3b7c:	e1530004 	cmp	r3, r4
    3b80:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
    3b84:	13a01000 	movne	r1, #0
    3b88:	05864004 	streq	r4, [r6, #4]
    3b8c:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
    3b90:	e3530000 	cmp	r3, #0
    3b94:	0affffee 	beq	3b54 <__call_exitprocs+0x64>
    3b98:	e1a02418 	lsl	r2, r8, r4
    3b9c:	e5961188 	ldr	r1, [r6, #392]	; 0x188
    3ba0:	e1120001 	tst	r2, r1
    3ba4:	e5969004 	ldr	r9, [r6, #4]
    3ba8:	0a000016 	beq	3c08 <__call_exitprocs+0x118>
    3bac:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
    3bb0:	e1120001 	tst	r2, r1
    3bb4:	1a000016 	bne	3c14 <__call_exitprocs+0x124>
    3bb8:	e59d0008 	ldr	r0, [sp, #8]
    3bbc:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
    3bc0:	e1a0e00f 	mov	lr, pc
    3bc4:	e12fff13 	bx	r3
    3bc8:	e5963004 	ldr	r3, [r6, #4]
    3bcc:	e1530009 	cmp	r3, r9
    3bd0:	1affffd0 	bne	3b18 <__call_exitprocs+0x28>
    3bd4:	e59b3000 	ldr	r3, [r11]
    3bd8:	e1530006 	cmp	r3, r6
    3bdc:	1affffcd 	bne	3b18 <__call_exitprocs+0x28>
    3be0:	e2444001 	sub	r4, r4, #1
    3be4:	e3740001 	cmn	r4, #1
    3be8:	e2455004 	sub	r5, r5, #4
    3bec:	1affffdc 	bne	3b64 <__call_exitprocs+0x74>
    3bf0:	e59f1070 	ldr	r1, [pc, #112]	; 3c68 <__call_exitprocs+0x178>
    3bf4:	e3510000 	cmp	r1, #0
    3bf8:	1a000009 	bne	3c24 <__call_exitprocs+0x134>
    3bfc:	e28dd014 	add	sp, sp, #20
    3c00:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    3c04:	e12fff1e 	bx	lr
    3c08:	e1a0e00f 	mov	lr, pc
    3c0c:	e12fff13 	bx	r3
    3c10:	eaffffec 	b	3bc8 <__call_exitprocs+0xd8>
    3c14:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
    3c18:	e1a0e00f 	mov	lr, pc
    3c1c:	e12fff13 	bx	r3
    3c20:	eaffffe8 	b	3bc8 <__call_exitprocs+0xd8>
    3c24:	e5963004 	ldr	r3, [r6, #4]
    3c28:	e3530000 	cmp	r3, #0
    3c2c:	e5963000 	ldr	r3, [r6]
    3c30:	1a000008 	bne	3c58 <__call_exitprocs+0x168>
    3c34:	e3530000 	cmp	r3, #0
    3c38:	0a000006 	beq	3c58 <__call_exitprocs+0x168>
    3c3c:	e1a00006 	mov	r0, r6
    3c40:	e58b3000 	str	r3, [r11]
    3c44:	e320f000 	nop	{0}
    3c48:	e59b6000 	ldr	r6, [r11]
    3c4c:	e3560000 	cmp	r6, #0
    3c50:	1affffb5 	bne	3b2c <__call_exitprocs+0x3c>
    3c54:	eaffffe8 	b	3bfc <__call_exitprocs+0x10c>
    3c58:	e1a0b006 	mov	r11, r6
    3c5c:	e1a06003 	mov	r6, r3
    3c60:	eafffff9 	b	3c4c <__call_exitprocs+0x15c>
    3c64:	00003df0 	.word	0x00003df0
    3c68:	00000000 	.word	0x00000000

00003c6c <register_fini>:
    3c6c:	e92d4008 	push	{r3, lr}
    3c70:	e59f3010 	ldr	r3, [pc, #16]	; 3c88 <register_fini+0x1c>
    3c74:	e3530000 	cmp	r3, #0
    3c78:	159f000c 	ldrne	r0, [pc, #12]	; 3c8c <register_fini+0x20>
    3c7c:	1bffff49 	blne	39a8 <atexit>
    3c80:	e8bd4008 	pop	{r3, lr}
    3c84:	e12fff1e 	bx	lr
    3c88:	00003e18 	.word	0x00003e18
    3c8c:	00003c90 	.word	0x00003c90

00003c90 <__libc_fini_array>:
    3c90:	e92d4038 	push	{r3, r4, r5, lr}
    3c94:	e59f5030 	ldr	r5, [pc, #48]	; 3ccc <__libc_fini_array+0x3c>
    3c98:	e59f4030 	ldr	r4, [pc, #48]	; 3cd0 <__libc_fini_array+0x40>
    3c9c:	e0654004 	rsb	r4, r5, r4
    3ca0:	e1b04144 	asrs	r4, r4, #2
    3ca4:	10855104 	addne	r5, r5, r4, lsl #2
    3ca8:	0a000004 	beq	3cc0 <__libc_fini_array+0x30>
    3cac:	e5353004 	ldr	r3, [r5, #-4]!
    3cb0:	e1a0e00f 	mov	lr, pc
    3cb4:	e12fff13 	bx	r3
    3cb8:	e2544001 	subs	r4, r4, #1
    3cbc:	1afffffa 	bne	3cac <__libc_fini_array+0x1c>
    3cc0:	eb000054 	bl	3e18 <__libc_fini>
    3cc4:	e8bd4038 	pop	{r3, r4, r5, lr}
    3cc8:	e12fff1e 	bx	lr
    3ccc:	00003e30 	.word	0x00003e30
    3cd0:	00003e34 	.word	0x00003e34

00003cd4 <__cs3_premain>:
    3cd4:	e92d4008 	push	{r3, lr}
    3cd8:	eb000017 	bl	3d3c <__libc_init_array>
    3cdc:	e59f3030 	ldr	r3, [pc, #48]	; 3d14 <__cs3_premain+0x40>
    3ce0:	e3530000 	cmp	r3, #0
    3ce4:	15930000 	ldrne	r0, [r3]
    3ce8:	01a00003 	moveq	r0, r3
    3cec:	e59f3024 	ldr	r3, [pc, #36]	; 3d18 <__cs3_premain+0x44>
    3cf0:	e3530000 	cmp	r3, #0
    3cf4:	15931000 	ldrne	r1, [r3]
    3cf8:	01a01003 	moveq	r1, r3
    3cfc:	e3a02000 	mov	r2, #0
    3d00:	ebfffc89 	bl	2f2c <main>
    3d04:	e59f3010 	ldr	r3, [pc, #16]	; 3d1c <__cs3_premain+0x48>
    3d08:	e3530000 	cmp	r3, #0
    3d0c:	1bffff2d 	blne	39c8 <exit>
    3d10:	eafffffe 	b	3d10 <__cs3_premain+0x3c>
	...
    3d1c:	000039c8 	.word	0x000039c8

00003d20 <_exit>:
    3d20:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    3d24:	e3a00018 	mov	r0, #24
    3d28:	e59f1004 	ldr	r1, [pc, #4]	; 3d34 <_exit+0x14>
    3d2c:	ef123456 	svc	0x00123456
    3d30:	eafffffe 	b	3d30 <_exit+0x10>
    3d34:	00020026 	.word	0x00020026

00003d38 <__cs3_isr_interrupt>:
    3d38:	eafffffe 	b	3d38 <__cs3_isr_interrupt>

00003d3c <__libc_init_array>:
    3d3c:	e92d4070 	push	{r4, r5, r6, lr}
    3d40:	e59f506c 	ldr	r5, [pc, #108]	; 3db4 <__libc_init_array+0x78>
    3d44:	e59f606c 	ldr	r6, [pc, #108]	; 3db8 <__libc_init_array+0x7c>
    3d48:	e0656006 	rsb	r6, r5, r6
    3d4c:	e1b06146 	asrs	r6, r6, #2
    3d50:	12455004 	subne	r5, r5, #4
    3d54:	13a04000 	movne	r4, #0
    3d58:	0a000005 	beq	3d74 <__libc_init_array+0x38>
    3d5c:	e5b53004 	ldr	r3, [r5, #4]!
    3d60:	e2844001 	add	r4, r4, #1
    3d64:	e1a0e00f 	mov	lr, pc
    3d68:	e12fff13 	bx	r3
    3d6c:	e1560004 	cmp	r6, r4
    3d70:	1afffff9 	bne	3d5c <__libc_init_array+0x20>
    3d74:	e59f5040 	ldr	r5, [pc, #64]	; 3dbc <__libc_init_array+0x80>
    3d78:	e59f6040 	ldr	r6, [pc, #64]	; 3dc0 <__libc_init_array+0x84>
    3d7c:	e0656006 	rsb	r6, r5, r6
    3d80:	eb00001c 	bl	3df8 <_init>
    3d84:	e1b06146 	asrs	r6, r6, #2
    3d88:	12455004 	subne	r5, r5, #4
    3d8c:	13a04000 	movne	r4, #0
    3d90:	0a000005 	beq	3dac <__libc_init_array+0x70>
    3d94:	e5b53004 	ldr	r3, [r5, #4]!
    3d98:	e2844001 	add	r4, r4, #1
    3d9c:	e1a0e00f 	mov	lr, pc
    3da0:	e12fff13 	bx	r3
    3da4:	e1560004 	cmp	r6, r4
    3da8:	1afffff9 	bne	3d94 <__libc_init_array+0x58>
    3dac:	e8bd4070 	pop	{r4, r5, r6, lr}
    3db0:	e12fff1e 	bx	lr
    3db4:	00003e10 	.word	0x00003e10
    3db8:	00003e10 	.word	0x00003e10
    3dbc:	00003e10 	.word	0x00003e10
    3dc0:	00003e18 	.word	0x00003e18

Disassembly of section .rodata:

00003dc8 <_global_impure_ptr-0x28>:
    3dc8:	001cd018 	.word	0x001cd018
    3dcc:	001ccc94 	.word	0x001ccc94
    3dd0:	001cc910 	.word	0x001cc910
    3dd4:	001cc58c 	.word	0x001cc58c
    3dd8:	001cc208 	.word	0x001cc208
    3ddc:	001cbe84 	.word	0x001cbe84
    3de0:	001cbb00 	.word	0x001cbb00
    3de4:	001cb77c 	.word	0x001cb77c
    3de8:	001cb3f8 	.word	0x001cb3f8
    3dec:	001cb074 	.word	0x001cb074

00003df0 <_global_impure_ptr>:
    3df0:	001cdd38 00000043                       8...C...

00003df8 <_init>:
    3df8:	e1a0c00d 	mov	r12, sp
    3dfc:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    3e00:	e24cb004 	sub	r11, r12, #4
    3e04:	e24bd028 	sub	sp, r11, #40	; 0x28
    3e08:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    3e0c:	e12fff1e 	bx	lr

00003e10 <__init_array_start>:
    3e10:	00003c6c 	.word	0x00003c6c

00003e14 <__frame_dummy_init_array_entry>:
    3e14:	00000208                                ....

00003e18 <__libc_fini>:
    3e18:	e1a0c00d 	mov	r12, sp
    3e1c:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    3e20:	e24cb004 	sub	r11, r12, #4
    3e24:	e24bd028 	sub	sp, r11, #40	; 0x28
    3e28:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    3e2c:	e12fff1e 	bx	lr

00003e30 <__fini_array_start>:
    3e30:	000001c4 	.word	0x000001c4

00003e34 <__cs3_regions>:
    3e34:	00000000 	.word	0x00000000
    3e38:	00000040 	.word	0x00000040
    3e3c:	00000040 	.word	0x00000040
    3e40:	001ce128 	.word	0x001ce128
    3e44:	00000048 	.word	0x00000048
